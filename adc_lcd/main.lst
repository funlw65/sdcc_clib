gplink-1.4.3 #1207 (May 12 2016)
Copyright (c) 1998-2016 gputils project
Listing File Generated: 5-22-2016  08:21:21
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.5.6 #9604 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	___uflags
                                           	global	__entry
                                           	global	__startup
                                           	global	_main
                                           	global	_LCD_POS
                                           	global	_s
                                           	global	_config
                                           	global	_config2
                                           	global	_config3
                                           	global	__delay_us
                                           	global	__delay_ms
                                           	global	___lcd_write_nibble
                                           	global	___lcd_write
                                           	global	__lcd_write_data
                                           	global	__lcd_write_command
                                           	global	__lcd_line2index
                                           	global	__lcd_restore_cursor
                                           	global	_lcd_write_char
                                           	global	_lcd_write_str
                                           	global	_lcd_write_strF
                                           	global	_lcd_cursor_position
                                           	global	_lcd_shift_left
                                           	global	_lcd_shift_right
                                           	global	_lcd_cursor_shift_left
                                           	global	_lcd_cursor_shift_right
                                           	global	_lcd_clear_screen
                                           	global	_lcd_cursor_blink_display
                                           	global	_lcd_home
                                           	global	_lcd_clear_line
                                           	global	_lcd_progress
                                           	global	_lcd_init
                                           	global	_adc_init
                                           	global	_adc_setch
                                           	global	_adc_conv
                                           	global	_adc_busy
                                           	global	_adc_setchconv
                                           	global	_adc_read
                                           	global	_adc_close
                                           	global	_sf

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrget1
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_stack_end
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_delay10tcy
                                           	extern	_delay100tcy
                                           	extern	_delay1ktcy
                                           	extern	_delay10ktcy
                                           	extern	_uitoa
                                           	extern	_cinit

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           	idata
                                           ___uflags	db	0x00
                                           _config	db	0xef
                                           _config2	db	0x03
                                           _config3	db	0x70


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1

                                           udata_main_0	udata
                                           ___lcd_write_nibble_nibble_1_29	res	1

                                           udata_main_1	udata
                                           _LCD_POS	res	1

                                           udata_main_2	udata
                                           _s	res	5

                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_main___entry	code	0X000300
                                           __entry:
000300   ef59     goto    0x000eb2         	goto	__startup
000302   f007
                                           	
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
000832   010f     movlb   0xf              	BANKSEL	_ANSELA
                                           ;	.line	39; main.c	AllDigital(); /* all pins digital */
000834   6b38     clrf    0x38, 0x1        	CLRF	_ANSELA, B
000836   010f     movlb   0xf              	BANKSEL	_ANSELB
000838   6b39     clrf    0x39, 0x1        	CLRF	_ANSELB, B
00083a   010f     movlb   0xf              	BANKSEL	_ANSELC
00083c   6b3a     clrf    0x3a, 0x1        	CLRF	_ANSELC, B
00083e   010f     movlb   0xf              	BANKSEL	_ANSELD
000840   6b3b     clrf    0x3b, 0x1        	CLRF	_ANSELD, B
000842   010f     movlb   0xf              	BANKSEL	_ANSELE
000844   6b3c     clrf    0x3c, 0x1        	CLRF	_ANSELE, B
000846   6ac2     clrf    0xc2, 0x0        	CLRF	_ADCON0
000848   6ac1     clrf    0xc1, 0x0        	CLRF	_ADCON1
00084a   6ac0     clrf    0xc0, 0x0        	CLRF	_ADCON2
00084c   6a79     clrf    0x79, 0x0        	CLRF	_CM1CON0
00084e   6a78     clrf    0x78, 0x0        	CLRF	_CM2CON0
000850   6a77     clrf    0x77, 0x0        	CLRF	_CM2CON1
                                           ;	.line	41; main.c	OnBoardLED_dir = 0; /* output */
000852   9494     bcf     0x94, 0x2, 0x0   	BCF	_TRISCbits, 2
                                           ;	.line	42; main.c	OnBoardButton_dir = 1; /* input */
000854   8892     bsf     0x92, 0x4, 0x0   	BSF	_TRISAbits, 4
                                           ;	.line	43; main.c	OnBoardLED = 0;
000856   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	46; main.c	TRISAbits.RA0 = 1;
000858   8092     bsf     0x92, 0x0, 0x0   	BSF	_TRISAbits, 0
00085a   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	47; main.c	ANSELAbits.ANSA0 = 1;
00085c   8138     bsf     0x38, 0x0, 0x1   	BSF	_ANSELAbits, 0, B
00085e   010f     movlb   0xf              	BANKSEL	_config3
                                           ;	.line	49; main.c	adc_init(config, config2, config3);
000860   5128     movf    0x28, 0x0, 0x1   	MOVF	_config3, W, B
000862   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000864   010f     movlb   0xf              	BANKSEL	_config2
000866   5127     movf    0x27, 0x0, 0x1   	MOVF	_config2, W, B
000868   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00086a   010f     movlb   0xf              	BANKSEL	_config
00086c   5126     movf    0x26, 0x0, 0x1   	MOVF	_config, W, B
00086e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000870   ec3a     call    0x001074, 0x0    	CALL	_adc_init
000872   f008
000874   0e03     movlw   0x03             	MOVLW	0x03
000876   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	50; main.c	lcd_init(LCD_HD44780);
000878   0e00     movlw   0x00             	MOVLW	0x00
00087a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00087c   ec95     call    0x00032a, 0x0    	CALL	_lcd_init
00087e   f001
000880   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	51; main.c	lcd_cursor_position(0, 0);
000882   0e00     movlw   0x00             	MOVLW	0x00
000884   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000886   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000888   ec98     call    0x001530, 0x0    	CALL	_lcd_cursor_position
00088a   f00a
00088c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00088e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	52; main.c	lcd_write_strF(sf); /* reading the string from the FLASH */
000890   0e00     movlw   0x00             	MOVLW	UPPER(_sf)
000892   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000894   0e0c     movlw   0x0c             	MOVLW	HIGH(_sf)
000896   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000898   0eae     movlw   0xae             	MOVLW	LOW(_sf)
00089a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00089c   ecee     call    0x0011dc, 0x0    	CALL	_lcd_write_strF
00089e   f008
0008a0   0e03     movlw   0x03             	MOVLW	0x03
0008a2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	53; main.c	adc_setch(ADC_CH0);
0008a4   0e83     movlw   0x83             	MOVLW	0x83
0008a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008a8   ecd2     call    0x0015a4, 0x0    	CALL	_adc_setch
0008aa   f00a
0008ac   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00479_DS_:
                                           ;	.line	56; main.c	adc_conv();
0008ae   ec6e     call    0x0016dc, 0x0    	CALL	_adc_conv
0008b0   f00b
                                           _00468_DS_:
                                           ;	.line	57; main.c	do{;}while(adc_busy());
0008b2   ec51     call    0x0016a2, 0x0    	CALL	_adc_busy
0008b4   f00b
0008b6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0008b8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0008ba   e1fb     bnz     0x0008b2         	BNZ	_00468_DS_
                                           ;	.line	58; main.c	adcval = adc_read();
0008bc   ecfc     call    0x0013f8, 0x0    	CALL	_adc_read
0008be   f009
0008c0   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0008c2   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0008c4   f001
                                           ;	.line	59; main.c	lcd_cursor_position(1, 0);
0008c6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0008c8   0e01     movlw   0x01             	MOVLW	0x01
0008ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008cc   ec98     call    0x001530, 0x0    	CALL	_lcd_cursor_position
0008ce   f00a
0008d0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0008d2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	60; main.c	uitoa(adcval, s, 10);
0008d4   0e0a     movlw   0x0a             	MOVLW	0x0a
0008d6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008d8   0e0f     movlw   0x0f             	MOVLW	HIGH(_s)
0008da   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008dc   0e20     movlw   0x20             	MOVLW	LOW(_s)
0008de   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008e0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0008e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008e4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0008e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008e8   ecb4     call    0x001168, 0x0    	CALL	_uitoa
0008ea   f008
0008ec   0e05     movlw   0x05             	MOVLW	0x05
0008ee   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	62; main.c	if(adcval < 10) { 
0008f0   0e00     movlw   0x00             	MOVLW	0x00
0008f2   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
0008f4   e102     bnz     0x0008fa         	BNZ	_00507_DS_
0008f6   0e0a     movlw   0x0a             	MOVLW	0x0a
0008f8   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00507_DS_:
0008fa   e20a     bc      0x000910         	BC	_00471_DS_
                                           ;	.line	63; main.c	lcd_write_str("   ");
0008fc   0e00     movlw   0x00             	MOVLW	UPPER(___str_0)
0008fe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000900   0e0c     movlw   0x0c             	MOVLW	HIGH(___str_0)
000902   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000904   0ebc     movlw   0xbc             	MOVLW	LOW(___str_0)
000906   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000908   ec22     call    0x001244, 0x0    	CALL	_lcd_write_str
00090a   f009
00090c   0e03     movlw   0x03             	MOVLW	0x03
00090e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00471_DS_:
                                           ;	.line	65; main.c	if((adcval > 9) && (adcval < 100)) { 
000910   0e00     movlw   0x00             	MOVLW	0x00
000912   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
000914   e102     bnz     0x00091a         	BNZ	_00508_DS_
000916   0e0a     movlw   0x0a             	MOVLW	0x0a
000918   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00508_DS_:
00091a   e310     bnc     0x00093c         	BNC	_00473_DS_
00091c   0e00     movlw   0x00             	MOVLW	0x00
00091e   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
000920   e102     bnz     0x000926         	BNZ	_00509_DS_
000922   0e64     movlw   0x64             	MOVLW	0x64
000924   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00509_DS_:
000926   e20a     bc      0x00093c         	BC	_00473_DS_
                                           ;	.line	66; main.c	lcd_write_str("  ");
000928   0e00     movlw   0x00             	MOVLW	UPPER(___str_1)
00092a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00092c   0e0c     movlw   0x0c             	MOVLW	HIGH(___str_1)
00092e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000930   0ec0     movlw   0xc0             	MOVLW	LOW(___str_1)
000932   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000934   ec22     call    0x001244, 0x0    	CALL	_lcd_write_str
000936   f009
000938   0e03     movlw   0x03             	MOVLW	0x03
00093a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00473_DS_:
                                           ;	.line	68; main.c	if((adcval > 99) && (adcval < 1000)) { 
00093c   0e00     movlw   0x00             	MOVLW	0x00
00093e   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
000940   e102     bnz     0x000946         	BNZ	_00510_DS_
000942   0e64     movlw   0x64             	MOVLW	0x64
000944   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00510_DS_:
000946   e310     bnc     0x000968         	BNC	_00476_DS_
000948   0e03     movlw   0x03             	MOVLW	0x03
00094a   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
00094c   e102     bnz     0x000952         	BNZ	_00511_DS_
00094e   0ee8     movlw   0xe8             	MOVLW	0xe8
000950   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00511_DS_:
000952   e20a     bc      0x000968         	BC	_00476_DS_
                                           ;	.line	69; main.c	lcd_write_str(" ");
000954   0e00     movlw   0x00             	MOVLW	UPPER(___str_2)
000956   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000958   0e0c     movlw   0x0c             	MOVLW	HIGH(___str_2)
00095a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00095c   0ec4     movlw   0xc4             	MOVLW	LOW(___str_2)
00095e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000960   ec22     call    0x001244, 0x0    	CALL	_lcd_write_str
000962   f009
000964   0e03     movlw   0x03             	MOVLW	0x03
000966   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00476_DS_:
                                           ;	.line	72; main.c	lcd_write_str(s);
000968   0e80     movlw   0x80             	MOVLW	0x80
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
00096a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00096c   0e0f     movlw   0x0f             	MOVLW	HIGH(_s)
00096e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000970   0e20     movlw   0x20             	MOVLW	LOW(_s)
000972   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000974   ec22     call    0x001244, 0x0    	CALL	_lcd_write_str
000976   f009
000978   0e03     movlw   0x03             	MOVLW	0x03
00097a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	73; main.c	_delay_ms(1000);
00097c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00097e   0ee8     movlw   0xe8             	MOVLW	0xe8
000980   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000982   ec88     call    0x001310, 0x0    	CALL	__delay_ms
000984   f009
000986   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000988   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00098a   d791     bra     0x0008ae         	BRA	_00479_DS_
00098c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___startup	code
                                           __startup:
                                           	;	Initialize the stack pointer
000eb2   ee11     lfsr    0x1, 0x1ff       	lfsr	1, _stack_end
000eb4   f0ff
000eb6   ee21     lfsr    0x2, 0x1ff       	lfsr	2, _stack_end
000eb8   f0ff
                                           	;	1st silicon does not do this on POR
000eba   6af8     clrf    0xf8, 0x0        	clrf	_TBLPTRU, 0
                                           	;	Initialize the flash memory access configuration.
                                           	;	This is harmless for non-flash devices, so we do it on all parts.
000ebc   8ea6     bsf     0xa6, 0x7, 0x0   	bsf	0xa6, 7, 0 ; EECON1.EEPGD = 1, TBLPTR accesses program memory
000ebe   9ca6     bcf     0xa6, 0x6, 0x0   	bcf	0xa6, 6, 0 ; EECON1.CFGS = 0, TBLPTR accesses program memory
                                           	;	TBLPTR = &cinit
000ec0   0ec4     movlw   0xc4             	movlw	low(_cinit)
000ec2   6ef6     movwf   0xf6, 0x0        	movwf	_TBLPTRL, 0
000ec4   0e16     movlw   0x16             	movlw	high(_cinit)
000ec6   6ef7     movwf   0xf7, 0x0        	movwf	_TBLPTRH, 0
000ec8   0e00     movlw   0x00             	movlw	upper(_cinit)
000eca   6ef8     movwf   0xf8, 0x0        	movwf	_TBLPTRU, 0
                                           	;	0x05 = cinit.num_init
000ecc   0009     tblrd*+                  	tblrd*+
000ece   cff5     movff   0xff5, 0x005     	movff	_TABLAT, 0x05
000ed0   f005
000ed2   0009     tblrd*+                  	tblrd*+
000ed4   cff5     movff   0xff5, 0x006     	movff	_TABLAT, (0x05 + 1)
000ed6   f006
                                           	;	while (0x05)
000ed8   d034     bra     0x000f42         	bra	entry_loop_dec
                                           entry_loop:
                                           	;	Count down so we only have to look up the data in _cinit once.
                                           	;	At this point we know that TBLPTR points to the top of the current
                                           	;	entry in _cinit, so we can just start reading the from, to, and
                                           	;	size values.
                                           	;	Read the source address low.
                                           	;	0x00 = 0x07 ->from;
000eda   0009     tblrd*+                  	tblrd*+
000edc   cff5     movff   0xff5, 0x000     	movff	_TABLAT, 0x00
000ede   f000
                                           	;	source address high
000ee0   0009     tblrd*+                  	tblrd*+
000ee2   cff5     movff   0xff5, 0x001     	movff	_TABLAT, (0x00 + 1)
000ee4   f001
                                           	;	source address upper
000ee6   0009     tblrd*+                  	tblrd*+
000ee8   cff5     movff   0xff5, 0x002     	movff	_TABLAT, (0x00 + 2)
000eea   f002
                                           	;	Skip 0 byte since it is stored as 0 32bit int.
000eec   0009     tblrd*+                  	tblrd*+
                                           	;	Read the destination address directly into FSR0
                                           	;	destination address low.
                                           	;	FSR0 = (unsigned short)0x07 ->to;
000eee   0009     tblrd*+                  	tblrd*+
000ef0   cff5     movff   0xff5, 0xfe9     	movff	_TABLAT, _FSR0L
000ef2   ffe9
                                           	;	destination address high
000ef4   0009     tblrd*+                  	tblrd*+
000ef6   cff5     movff   0xff5, 0xfea     	movff	_TABLAT, _FSR0H
000ef8   ffea
                                           	;	Skip two bytes since it is stored as 0 32bit int.
000efa   0009     tblrd*+                  	tblrd*+
000efc   0009     tblrd*+                  	tblrd*+
                                           	;	Read the size of data to transfer to destination address.
                                           	;	0x03 = (unsigned short)0x07 ->size;
000efe   0009     tblrd*+                  	tblrd*+
000f00   cff5     movff   0xff5, 0x003     	movff	_TABLAT, 0x03
000f02   f003
000f04   0009     tblrd*+                  	tblrd*+
000f06   cff5     movff   0xff5, 0x004     	movff	_TABLAT, (0x03 + 1)
000f08   f004
                                           	;	Skip two bytes since it is stored as 0 32bit int.
000f0a   0009     tblrd*+                  	tblrd*+
000f0c   0009     tblrd*+                  	tblrd*+
                                           	;	0x00 = 0x07 ->from;
                                           	;	FSR0 = (unsigned short)0x07 ->to;
                                           	;	0x03 = (unsigned short)0x07 ->size;
                                           	;	The table pointer now points to the next entry. Save it
                                           	;	off since we will be using the table pointer to do the copying
                                           	;	for the entry.
                                           	;	0x07 = TBLPTR
000f0e   cff6     movff   0xff6, 0x007     	movff	_TBLPTRL, 0x07
000f10   f007
000f12   cff7     movff   0xff7, 0x008     	movff	_TBLPTRH, (0x07 + 1)
000f14   f008
000f16   cff8     movff   0xff8, 0x009     	movff	_TBLPTRU, (0x07 + 2)
000f18   f009
                                           	;	Now assign the source address to the table pointer.
                                           	;	TBLPTR = 0x00
000f1a   c000     movff   0x000, 0xff6     	movff	0x00, _TBLPTRL
000f1c   fff6
000f1e   c001     movff   0x001, 0xff7     	movff	(0x00 + 1), _TBLPTRH
000f20   fff7
000f22   c002     movff   0x002, 0xff8     	movff	(0x00 + 2), _TBLPTRU
000f24   fff8
000f26   d003     bra     0x000f2e         	bra	copy_loop_dec
                                           copy_loop:
000f28   0009     tblrd*+                  	tblrd*+
000f2a   cff5     movff   0xff5, 0xfee     	movff	_TABLAT, _POSTINC0
000f2c   ffee
                                           copy_loop_dec:
                                           	;	while (--0x03);
                                           	;	Decrement and test the byte counter.
                                           	;	The cycle ends when the value of counter reaches the -1.
000f2e   0603     decf    0x03, 0x1, 0x0   	decf	0x03, f, 0
000f30   e2fb     bc      0x000f28         	bc	copy_loop
000f32   0604     decf    0x04, 0x1, 0x0   	decf	(0x03 + 1), f, 0
000f34   e2f9     bc      0x000f28         	bc	copy_loop
                                           	;	Restore the table pointer for the next entry.
                                           	;	TBLPTR = 0x07
000f36   c007     movff   0x007, 0xff6     	movff	0x07, _TBLPTRL
000f38   fff6
000f3a   c008     movff   0x008, 0xff7     	movff	(0x07 + 1), _TBLPTRH
000f3c   fff7
000f3e   c009     movff   0x009, 0xff8     	movff	(0x07 + 2), _TBLPTRU
000f40   fff8
                                           entry_loop_dec:
                                           	;	while (--0x05);
                                           	;	Decrement and test the entry counter.
                                           	;	The cycle ends when the value of counter reaches the -1.
000f42   0605     decf    0x05, 0x1, 0x0   	decf	0x05, f, 0
000f44   e2ca     bc      0x000eda         	bc	entry_loop
000f46   0606     decf    0x06, 0x1, 0x0   	decf	(0x05 + 1), f, 0
000f48   e2c8     bc      0x000eda         	bc	entry_loop
                                           	
                                           ;	.line	249; ../my_sdcc_lib/crt0i.c	main ();
000f4a   ec19     call    0x000832, 0x0    	CALL	_main
000f4c   f004
                                           lockup:
                                           	;	Returning from main will lock up.
000f4e   d7ff     bra     0x000f4e         	bra	lockup
                                           	
                                           ; ; Starting pCode block
                                           S_main__adc_close	code
                                           _adc_close:
                                           ;	.line	224; ../my_sdcc_lib/rosso_sdcc_adc.h	ADCON0bits.ADON = 0;
0016d2   90c2     bcf     0xc2, 0x0, 0x0   	BCF	_ADCON0bits, 0
                                           ;	.line	225; ../my_sdcc_lib/rosso_sdcc_adc.h	PIE1bits.ADIE = 0;
0016d4   9c9d     bcf     0x9d, 0x6, 0x0   	BCF	_PIE1bits, 6
0016d6   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__adc_read	code
                                           _adc_read:
                                           ;	.line	217; ../my_sdcc_lib/rosso_sdcc_adc.h	uint16_t adc_read(void)
0013f8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0013fa   ffe5
0013fc   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0013fe   ffe5
001400   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001402   ffe5
001404   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001406   ffe5
                                           ;	.line	219; ../my_sdcc_lib/rosso_sdcc_adc.h	return (((uint16_t)ADRESH)<<8)|(ADRESL);
001408   cfc4     movff   0xfc4, 0x000     	MOVFF	_ADRESH, r0x00
00140a   f000
00140c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00140e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001410   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001412   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001414   cfc3     movff   0xfc3, 0x000     	MOVFF	_ADRESL, r0x00
001416   f000
001418   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00141a   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
00141c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00141e   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
001420   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
001422   fff3
001424   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001426   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001428   f003
00142a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00142c   f002
00142e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001430   f001
001432   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001434   f000
001436   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__adc_setchconv	code
                                           _adc_setchconv:
                                           ;	.line	210; ../my_sdcc_lib/rosso_sdcc_adc.h	void adc_setchconv(unsigned char channel)
00156e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001570   ffe5
001572   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001574   ffd9
001576   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001578   ffe5
00157a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00157c   ffe5
00157e   0e02     movlw   0x02             	MOVLW	0x02
001580   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001582   f000
                                           ;	.line	212; ../my_sdcc_lib/rosso_sdcc_adc.h	ADCON0 = (ADCON0 & 0b10000011)|
001584   0e83     movlw   0x83             	MOVLW	0x83
001586   14c2     andwf   0xc2, 0x0, 0x0   	ANDWF	_ADCON0, W
001588   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ;	.line	213; ../my_sdcc_lib/rosso_sdcc_adc.h	((channel) & 0b01111100);
00158a   0e7c     movlw   0x7c             	MOVLW	0x7c
00158c   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
00158e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001590   1001     iorwf   0x01, 0x0, 0x0   	IORWF	r0x01, W
001592   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0
                                           ;	.line	214; ../my_sdcc_lib/rosso_sdcc_adc.h	ADCON0bits.GO = 1;
001594   82c2     bsf     0xc2, 0x1, 0x0   	BSF	_ADCON0bits, 1
001596   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001598   f001
00159a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00159c   f000
00159e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0015a0   ffd9
0015a2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__adc_busy	code
                                           _adc_busy:
                                           ;	.line	205; ../my_sdcc_lib/rosso_sdcc_adc.h	uint8_t adc_busy(void)
0016a2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0016a4   ffe5
                                           ;	.line	207; ../my_sdcc_lib/rosso_sdcc_adc.h	return(ADCON0bits.GO);
0016a6   6a00     clrf    0x00, 0x0        	CLRF	r0x00
0016a8   b2c2     btfsc   0xc2, 0x1, 0x0   	BTFSC	_ADCON0bits, 1
0016aa   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
0016ac   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0016ae   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0016b0   f000
0016b2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__adc_conv	code
                                           _adc_conv:
                                           ;	.line	202; ../my_sdcc_lib/rosso_sdcc_adc.h	ADCON0bits.GO = 1;
0016dc   82c2     bsf     0xc2, 0x1, 0x0   	BSF	_ADCON0bits, 1
0016de   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__adc_setch	code
                                           _adc_setch:
                                           ;	.line	194; ../my_sdcc_lib/rosso_sdcc_adc.h	void adc_setch(uint8_t channel)
0015a4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0015a6   ffe5
0015a8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0015aa   ffd9
0015ac   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0015ae   ffe5
0015b0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0015b2   ffe5
0015b4   0e02     movlw   0x02             	MOVLW	0x02
0015b6   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0015b8   f000
                                           ;	.line	196; ../my_sdcc_lib/rosso_sdcc_adc.h	ADCON0 = (ADCON0 & 0b10000011)|
0015ba   0e83     movlw   0x83             	MOVLW	0x83
0015bc   14c2     andwf   0xc2, 0x0, 0x0   	ANDWF	_ADCON0, W
0015be   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ;	.line	197; ../my_sdcc_lib/rosso_sdcc_adc.h	((channel) & 0b01111100);
0015c0   0e7c     movlw   0x7c             	MOVLW	0x7c
0015c2   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
0015c4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0015c6   1001     iorwf   0x01, 0x0, 0x0   	IORWF	r0x01, W
0015c8   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0
0015ca   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0015cc   f001
0015ce   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0015d0   f000
0015d2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0015d4   ffd9
0015d6   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__adc_init	code
                                           _adc_init:
                                           ;	.line	171; ../my_sdcc_lib/rosso_sdcc_adc.h	void adc_init( uint8_t config, uint8_t config2, uint8_t config3) {
001074   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001076   ffe5
001078   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00107a   ffd9
00107c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00107e   ffe5
001080   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001082   ffe5
001084   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001086   ffe5
001088   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00108a   ffe5
00108c   0e02     movlw   0x02             	MOVLW	0x02
00108e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001090   f000
001092   0e03     movlw   0x03             	MOVLW	0x03
001094   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001096   f001
001098   0e04     movlw   0x04             	MOVLW	0x04
00109a   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
00109c   f002
                                           ;	.line	172; ../my_sdcc_lib/rosso_sdcc_adc.h	ADCON0 = 0;
00109e   6ac2     clrf    0xc2, 0x0        	CLRF	_ADCON0
                                           ;	.line	173; ../my_sdcc_lib/rosso_sdcc_adc.h	ADCON1 = 0;
0010a0   6ac1     clrf    0xc1, 0x0        	CLRF	_ADCON1
                                           ;	.line	174; ../my_sdcc_lib/rosso_sdcc_adc.h	ADCON2 = 0;
0010a2   6ac0     clrf    0xc0, 0x0        	CLRF	_ADCON2
                                           ;	.line	176; ../my_sdcc_lib/rosso_sdcc_adc.h	ADCON0 = (config2) & 0b01111100;	// GET CHANNELS 
0010a4   0e7c     movlw   0x7c             	MOVLW	0x7c
0010a6   1401     andwf   0x01, 0x0, 0x0   	ANDWF	r0x01, W
0010a8   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0
                                           ;	.line	178; ../my_sdcc_lib/rosso_sdcc_adc.h	ADCON1 = config3; // Vref+/- & Trigger & Negetive channel select
0010aa   c002     movff   0x002, 0xfc1     	MOVFF	r0x02, _ADCON1
0010ac   ffc1
                                           ;	.line	180; ../my_sdcc_lib/rosso_sdcc_adc.h	ADCON2 = (config & 0b10000000)	|	// RESULT
0010ae   0e80     movlw   0x80             	MOVLW	0x80
0010b0   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
0010b2   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           ;	.line	181; ../my_sdcc_lib/rosso_sdcc_adc.h	((config >> 4) & 0b00000111) |	// CONV CLK
0010b4   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0010b6   0b0f     andlw   0x0f             	ANDLW	0x0f
0010b8   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0010ba   0e07     movlw   0x07             	MOVLW	0x07
0010bc   1603     andwf   0x03, 0x1, 0x0   	ANDWF	r0x03, F
0010be   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0010c0   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
                                           ;	.line	182; ../my_sdcc_lib/rosso_sdcc_adc.h	((config << 2) & 0b00111000);	// ACQ TIME
0010c2   4400     rlncf   0x00, 0x0, 0x0   	RLNCF	r0x00, W
0010c4   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0010c6   0bfc     andlw   0xfc             	ANDLW	0xfc
0010c8   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0010ca   0e38     movlw   0x38             	MOVLW	0x38
0010cc   1403     andwf   0x03, 0x0, 0x0   	ANDWF	r0x03, W
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
0010ce   1002     iorwf   0x02, 0x0, 0x0   	IORWF	r0x02, W
0010d0   6ec0     movwf   0xc0, 0x0        	MOVWF	_ADCON2
                                           ;	.line	184; ../my_sdcc_lib/rosso_sdcc_adc.h	if( config2 & 0b10000000 )			// ADC INT.
0010d2   ae01     btfss   0x01, 0x7, 0x0   	BTFSS	r0x01, 7
0010d4   d003     bra     0x0010dc         	BRA	_00411_DS_
                                           ;	.line	186; ../my_sdcc_lib/rosso_sdcc_adc.h	PIR1bits.ADIF = 0;
0010d6   9c9e     bcf     0x9e, 0x6, 0x0   	BCF	_PIR1bits, 6
                                           ;	.line	187; ../my_sdcc_lib/rosso_sdcc_adc.h	PIE1bits.ADIE = 1;
0010d8   8c9d     bsf     0x9d, 0x6, 0x0   	BSF	_PIE1bits, 6
                                           ;	.line	188; ../my_sdcc_lib/rosso_sdcc_adc.h	INTCONbits.PEIE = 1;
0010da   8cf2     bsf     0xf2, 0x6, 0x0   	BSF	_INTCONbits, 6
                                           _00411_DS_:
                                           ;	.line	190; ../my_sdcc_lib/rosso_sdcc_adc.h	ADCON0bits.ADON = 1;
0010dc   80c2     bsf     0xc2, 0x0, 0x0   	BSF	_ADCON0bits, 0
0010de   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0010e0   f003
0010e2   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0010e4   f002
0010e6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0010e8   f001
0010ea   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0010ec   f000
0010ee   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0010f0   ffd9
0010f2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_init	code
                                           _lcd_init:
                                           ;	.line	220; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_init(CHIP chipset) {
00032a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00032c   ffe5
00032e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000330   ffd9
000332   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000334   ffe5
000336   0e02     movlw   0x02             	MOVLW	0x02
000338   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00033a   f000
                                           ;	.line	239; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS_DIR = 0;
00033c   9296     bcf     0x96, 0x1, 0x0   	BCF	_TRISEbits, 1
                                           ;	.line	240; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_EN_DIR = 0;
00033e   9496     bcf     0x96, 0x2, 0x0   	BCF	_TRISEbits, 2
                                           ;	.line	241; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D4_DIR = 0;
000340   9893     bcf     0x93, 0x4, 0x0   	BCF	_TRISBbits, 4
                                           ;	.line	242; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D5_DIR = 0;
000342   9a93     bcf     0x93, 0x5, 0x0   	BCF	_TRISBbits, 5
                                           ;	.line	243; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D6_DIR = 0;
000344   9c93     bcf     0x93, 0x6, 0x0   	BCF	_TRISBbits, 6
                                           ;	.line	244; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D7_DIR = 0;
000346   9e93     bcf     0x93, 0x7, 0x0   	BCF	_TRISBbits, 7
                                           ;	.line	246; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS = 0; // set to control char mode
000348   928d     bcf     0x8d, 0x1, 0x0   	BCF	_LATEbits, 1
                                           ;	.line	247; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (chipset == LCD_HD44780) {
00034a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00034c   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
00034e   d09a     bra     0x000484         	BRA	_00394_DS_
                                           ;	.line	248; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_25ms(); // power-up delay (> 15 ms)
000350   0e28     movlw   0x28             	MOVLW	0x28
000352   ec7d     call    0x000cfa, 0x0    	CALL	_delay10ktcy
000354   f006
                                           ;	.line	249; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011); // function set
000356   0e03     movlw   0x03             	MOVLW	0x03
000358   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00035a   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
00035c   f007
00035e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	250; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_5ms(); // > 4.1 milliseconds
000360   0e50     movlw   0x50             	MOVLW	0x50
000362   ec6a     call    0x000cd4, 0x0    	CALL	_delay1ktcy
000364   f006
                                           ;	.line	251; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011); // function set
000366   0e03     movlw   0x03             	MOVLW	0x03
000368   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00036a   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
00036c   f007
00036e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	252; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_100us(); // > 100 us
000370   0ea0     movlw   0xa0             	MOVLW	0xa0
000372   eca9     call    0x000d52, 0x0    	CALL	_delay10tcy
000374   f006
                                           ;	.line	253; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011); // function set
000376   0e03     movlw   0x03             	MOVLW	0x03
000378   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00037a   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
00037c   f007
00037e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	254; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
000380   0e38     movlw   0x38             	MOVLW	0x38
000382   eca9     call    0x000d52, 0x0    	CALL	_delay10tcy
000384   f006
000386   0000     nop                      	nop	
000388   0000     nop                      	nop	
00038a   0000     nop                      	nop	
00038c   0000     nop                      	nop	
00038e   0000     nop                      	nop	
000390   0000     nop                      	nop	
000392   0000     nop                      	nop	
000394   0000     nop                      	nop	
000396   0000     nop                      	nop	
000398   0000     nop                      	nop	
00039a   0000     nop                      	nop	
00039c   0000     nop                      	nop	
00039e   0000     nop                      	nop	
0003a0   0000     nop                      	nop	
0003a2   0000     nop                      	nop	
0003a4   0000     nop                      	nop	
0003a6   0000     nop                      	nop	
0003a8   0000     nop                      	nop	
0003aa   0000     nop                      	nop	
0003ac   0000     nop                      	nop	
0003ae   0000     nop                      	nop	
0003b0   0000     nop                      	nop	
0003b2   0000     nop                      	nop	
0003b4   0000     nop                      	nop	
0003b6   0000     nop                      	nop	
0003b8   0000     nop                      	nop	
0003ba   0000     nop                      	nop	
0003bc   0000     nop                      	nop	
0003be   0000     nop                      	nop	
0003c0   0000     nop                      	nop	
0003c2   0000     nop                      	nop	
0003c4   0000     nop                      	nop	
0003c6   0000     nop                      	nop	
0003c8   0000     nop                      	nop	
0003ca   0000     nop                      	nop	
0003cc   0000     nop                      	nop	
0003ce   0000     nop                      	nop	
0003d0   0000     nop                      	nop	
0003d2   0000     nop                      	nop	
0003d4   0000     nop                      	nop	
0003d6   0000     nop                      	nop	
0003d8   0000     nop                      	nop	
0003da   0000     nop                      	nop	
0003dc   0000     nop                      	nop	
0003de   0000     nop                      	nop	
0003e0   0000     nop                      	nop	
0003e2   0000     nop                      	nop	
0003e4   0000     nop                      	nop	
                                           ;	.line	256; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000010); // select 4-bits mode
0003e6   0e02     movlw   0x02             	MOVLW	0x02
0003e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003ea   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
0003ec   f007
0003ee   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	257; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
0003f0   0e38     movlw   0x38             	MOVLW	0x38
0003f2   eca9     call    0x000d52, 0x0    	CALL	_delay10tcy
0003f4   f006
0003f6   0000     nop                      	nop	
0003f8   0000     nop                      	nop	
0003fa   0000     nop                      	nop	
0003fc   0000     nop                      	nop	
0003fe   0000     nop                      	nop	
000400   0000     nop                      	nop	
000402   0000     nop                      	nop	
000404   0000     nop                      	nop	
000406   0000     nop                      	nop	
000408   0000     nop                      	nop	
00040a   0000     nop                      	nop	
00040c   0000     nop                      	nop	
00040e   0000     nop                      	nop	
000410   0000     nop                      	nop	
000412   0000     nop                      	nop	
000414   0000     nop                      	nop	
000416   0000     nop                      	nop	
000418   0000     nop                      	nop	
00041a   0000     nop                      	nop	
00041c   0000     nop                      	nop	
00041e   0000     nop                      	nop	
000420   0000     nop                      	nop	
000422   0000     nop                      	nop	
000424   0000     nop                      	nop	
000426   0000     nop                      	nop	
000428   0000     nop                      	nop	
00042a   0000     nop                      	nop	
00042c   0000     nop                      	nop	
00042e   0000     nop                      	nop	
000430   0000     nop                      	nop	
000432   0000     nop                      	nop	
000434   0000     nop                      	nop	
000436   0000     nop                      	nop	
000438   0000     nop                      	nop	
00043a   0000     nop                      	nop	
00043c   0000     nop                      	nop	
00043e   0000     nop                      	nop	
000440   0000     nop                      	nop	
000442   0000     nop                      	nop	
000444   0000     nop                      	nop	
000446   0000     nop                      	nop	
000448   0000     nop                      	nop	
00044a   0000     nop                      	nop	
00044c   0000     nop                      	nop	
00044e   0000     nop                      	nop	
000450   0000     nop                      	nop	
000452   0000     nop                      	nop	
000454   0000     nop                      	nop	
                                           ;	.line	259; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00101000); // 2 lines, 5x8 dots font
000456   0e28     movlw   0x28             	MOVLW	0x28
000458   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00045a   ecec     call    0x0015d8, 0x0    	CALL	__lcd_write_command
00045c   f00a
00045e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	260; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00011100); // cursor (not data) move right
000460   0e1c     movlw   0x1c             	MOVLW	0x1c
000462   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000464   ecec     call    0x0015d8, 0x0    	CALL	__lcd_write_command
000466   f00a
000468   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	261; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00001100); // display on, cursor off, no blink
00046a   0e0c     movlw   0x0c             	MOVLW	0x0c
00046c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00046e   ecec     call    0x0015d8, 0x0    	CALL	__lcd_write_command
000470   f00a
000472   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	262; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00000110); // cursor shift right, no data shift
000474   0e06     movlw   0x06             	MOVLW	0x06
000476   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000478   ecec     call    0x0015d8, 0x0    	CALL	__lcd_write_command
00047a   f00a
00047c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	264; ../my_sdcc_lib/rosso_sdcc_lcd4.h	lcd_clear_screen(); // clear display
00047e   ec34     call    0x001668, 0x0    	CALL	_lcd_clear_screen
000480   f00b
000482   d0f6     bra     0x000670         	BRA	_00396_DS_
                                           _00394_DS_:
                                           ;	.line	265; ../my_sdcc_lib/rosso_sdcc_lcd4.h	} else if (chipset == LCD_ST7066U) {
000484   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000486   0a01     xorlw   0x01             	XORLW	0x01
000488   e001     bz      0x00048c         	BZ	_00405_DS_
00048a   d0f2     bra     0x000670         	BRA	_00396_DS_
                                           _00405_DS_:
                                           ;	.line	266; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011);
00048c   0e03     movlw   0x03             	MOVLW	0x03
00048e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000490   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
000492   f007
000494   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	267; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
000496   0e40     movlw   0x40             	MOVLW	0x40
000498   eca9     call    0x000d52, 0x0    	CALL	_delay10tcy
00049a   f006
                                           ;	.line	268; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000010);
00049c   0e02     movlw   0x02             	MOVLW	0x02
00049e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004a0   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
0004a2   f007
0004a4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	269; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00001100);
0004a6   0e0c     movlw   0x0c             	MOVLW	0x0c
0004a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004aa   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
0004ac   f007
0004ae   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	270; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
0004b0   0e40     movlw   0x40             	MOVLW	0x40
0004b2   eca9     call    0x000d52, 0x0    	CALL	_delay10tcy
0004b4   f006
                                           ;	.line	271; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000010);
0004b6   0e02     movlw   0x02             	MOVLW	0x02
0004b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004ba   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
0004bc   f007
0004be   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	272; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00001100);
0004c0   0e0c     movlw   0x0c             	MOVLW	0x0c
0004c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004c4   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
0004c6   f007
0004c8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	273; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
0004ca   0e38     movlw   0x38             	MOVLW	0x38
0004cc   eca9     call    0x000d52, 0x0    	CALL	_delay10tcy
0004ce   f006
0004d0   0000     nop                      	nop	
0004d2   0000     nop                      	nop	
0004d4   0000     nop                      	nop	
0004d6   0000     nop                      	nop	
0004d8   0000     nop                      	nop	
0004da   0000     nop                      	nop	
0004dc   0000     nop                      	nop	
0004de   0000     nop                      	nop	
0004e0   0000     nop                      	nop	
0004e2   0000     nop                      	nop	
0004e4   0000     nop                      	nop	
0004e6   0000     nop                      	nop	
0004e8   0000     nop                      	nop	
0004ea   0000     nop                      	nop	
0004ec   0000     nop                      	nop	
0004ee   0000     nop                      	nop	
0004f0   0000     nop                      	nop	
0004f2   0000     nop                      	nop	
0004f4   0000     nop                      	nop	
0004f6   0000     nop                      	nop	
0004f8   0000     nop                      	nop	
0004fa   0000     nop                      	nop	
0004fc   0000     nop                      	nop	
0004fe   0000     nop                      	nop	
000500   0000     nop                      	nop	
000502   0000     nop                      	nop	
000504   0000     nop                      	nop	
000506   0000     nop                      	nop	
000508   0000     nop                      	nop	
00050a   0000     nop                      	nop	
00050c   0000     nop                      	nop	
00050e   0000     nop                      	nop	
000510   0000     nop                      	nop	
000512   0000     nop                      	nop	
000514   0000     nop                      	nop	
000516   0000     nop                      	nop	
000518   0000     nop                      	nop	
00051a   0000     nop                      	nop	
00051c   0000     nop                      	nop	
00051e   0000     nop                      	nop	
000520   0000     nop                      	nop	
000522   0000     nop                      	nop	
000524   0000     nop                      	nop	
000526   0000     nop                      	nop	
000528   0000     nop                      	nop	
00052a   0000     nop                      	nop	
00052c   0000     nop                      	nop	
00052e   0000     nop                      	nop	
                                           ;	.line	275; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // display on / off
000530   0e00     movlw   0x00             	MOVLW	0x00
000532   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000534   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
000536   f007
000538   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	276; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00001100);
00053a   0e0c     movlw   0x0c             	MOVLW	0x0c
00053c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00053e   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
000540   f007
000542   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	277; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
000544   0e38     movlw   0x38             	MOVLW	0x38
000546   eca9     call    0x000d52, 0x0    	CALL	_delay10tcy
000548   f006
00054a   0000     nop                      	nop	
00054c   0000     nop                      	nop	
00054e   0000     nop                      	nop	
000550   0000     nop                      	nop	
000552   0000     nop                      	nop	
000554   0000     nop                      	nop	
000556   0000     nop                      	nop	
000558   0000     nop                      	nop	
00055a   0000     nop                      	nop	
00055c   0000     nop                      	nop	
00055e   0000     nop                      	nop	
000560   0000     nop                      	nop	
000562   0000     nop                      	nop	
000564   0000     nop                      	nop	
000566   0000     nop                      	nop	
000568   0000     nop                      	nop	
00056a   0000     nop                      	nop	
00056c   0000     nop                      	nop	
00056e   0000     nop                      	nop	
000570   0000     nop                      	nop	
000572   0000     nop                      	nop	
000574   0000     nop                      	nop	
000576   0000     nop                      	nop	
000578   0000     nop                      	nop	
00057a   0000     nop                      	nop	
00057c   0000     nop                      	nop	
00057e   0000     nop                      	nop	
000580   0000     nop                      	nop	
000582   0000     nop                      	nop	
000584   0000     nop                      	nop	
000586   0000     nop                      	nop	
000588   0000     nop                      	nop	
00058a   0000     nop                      	nop	
00058c   0000     nop                      	nop	
00058e   0000     nop                      	nop	
000590   0000     nop                      	nop	
000592   0000     nop                      	nop	
000594   0000     nop                      	nop	
000596   0000     nop                      	nop	
000598   0000     nop                      	nop	
00059a   0000     nop                      	nop	
00059c   0000     nop                      	nop	
00059e   0000     nop                      	nop	
0005a0   0000     nop                      	nop	
0005a2   0000     nop                      	nop	
0005a4   0000     nop                      	nop	
0005a6   0000     nop                      	nop	
0005a8   0000     nop                      	nop	
                                           ;	.line	279; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // display clear
0005aa   0e00     movlw   0x00             	MOVLW	0x00
0005ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005ae   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
0005b0   f007
0005b2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	280; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000001);
0005b4   0e01     movlw   0x01             	MOVLW	0x01
0005b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005b8   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
0005ba   f007
0005bc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	281; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
0005be   0ea0     movlw   0xa0             	MOVLW	0xa0
0005c0   ec96     call    0x000d2c, 0x0    	CALL	_delay100tcy
0005c2   f006
                                           ;	.line	282; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
0005c4   0e50     movlw   0x50             	MOVLW	0x50
0005c6   ec96     call    0x000d2c, 0x0    	CALL	_delay100tcy
0005c8   f006
                                           ;	.line	283; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
0005ca   0e40     movlw   0x40             	MOVLW	0x40
0005cc   eca9     call    0x000d52, 0x0    	CALL	_delay10tcy
0005ce   f006
                                           ;	.line	284; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // entry mode set
0005d0   0e00     movlw   0x00             	MOVLW	0x00
0005d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005d4   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
0005d6   f007
0005d8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	285; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000110);
0005da   0e06     movlw   0x06             	MOVLW	0x06
0005dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005de   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
0005e0   f007
0005e2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	286; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
0005e4   0e38     movlw   0x38             	MOVLW	0x38
0005e6   eca9     call    0x000d52, 0x0    	CALL	_delay10tcy
0005e8   f006
0005ea   0000     nop                      	nop	
0005ec   0000     nop                      	nop	
0005ee   0000     nop                      	nop	
0005f0   0000     nop                      	nop	
0005f2   0000     nop                      	nop	
0005f4   0000     nop                      	nop	
0005f6   0000     nop                      	nop	
0005f8   0000     nop                      	nop	
0005fa   0000     nop                      	nop	
0005fc   0000     nop                      	nop	
0005fe   0000     nop                      	nop	
000600   0000     nop                      	nop	
000602   0000     nop                      	nop	
000604   0000     nop                      	nop	
000606   0000     nop                      	nop	
000608   0000     nop                      	nop	
00060a   0000     nop                      	nop	
00060c   0000     nop                      	nop	
00060e   0000     nop                      	nop	
000610   0000     nop                      	nop	
000612   0000     nop                      	nop	
000614   0000     nop                      	nop	
000616   0000     nop                      	nop	
000618   0000     nop                      	nop	
00061a   0000     nop                      	nop	
00061c   0000     nop                      	nop	
00061e   0000     nop                      	nop	
000620   0000     nop                      	nop	
000622   0000     nop                      	nop	
000624   0000     nop                      	nop	
000626   0000     nop                      	nop	
000628   0000     nop                      	nop	
00062a   0000     nop                      	nop	
00062c   0000     nop                      	nop	
00062e   0000     nop                      	nop	
000630   0000     nop                      	nop	
000632   0000     nop                      	nop	
000634   0000     nop                      	nop	
000636   0000     nop                      	nop	
000638   0000     nop                      	nop	
00063a   0000     nop                      	nop	
00063c   0000     nop                      	nop	
00063e   0000     nop                      	nop	
000640   0000     nop                      	nop	
000642   0000     nop                      	nop	
000644   0000     nop                      	nop	
000646   0000     nop                      	nop	
000648   0000     nop                      	nop	
                                           ;	.line	288; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // display clear
00064a   0e00     movlw   0x00             	MOVLW	0x00
00064c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00064e   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
000650   f007
000652   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	289; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000001);
000654   0e01     movlw   0x01             	MOVLW	0x01
000656   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000658   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
00065a   f007
00065c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	290; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
00065e   0ea0     movlw   0xa0             	MOVLW	0xa0
000660   ec96     call    0x000d2c, 0x0    	CALL	_delay100tcy
000662   f006
                                           ;	.line	291; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
000664   0e50     movlw   0x50             	MOVLW	0x50
000666   ec96     call    0x000d2c, 0x0    	CALL	_delay100tcy
000668   f006
                                           ;	.line	292; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
00066a   0e40     movlw   0x40             	MOVLW	0x40
00066c   eca9     call    0x000d52, 0x0    	CALL	_delay10tcy
00066e   f006
                                           _00396_DS_:
000670   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000672   f000
000674   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000676   ffd9
000678   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_progress	code
                                           _lcd_progress:
                                           ;	.line	212; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_progress(uint8_t line, uint8_t amount, uint8_t pattern) {
000d6a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000d6c   ffe5
000d6e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000d70   ffd9
000d72   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000d74   ffe5
000d76   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000d78   ffe5
000d7a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000d7c   ffe5
000d7e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
000d80   ffe5
000d82   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
000d84   ffe5
000d86   0e02     movlw   0x02             	MOVLW	0x02
000d88   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000d8a   f000
000d8c   0e03     movlw   0x03             	MOVLW	0x03
000d8e   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
000d90   f001
000d92   0e04     movlw   0x04             	MOVLW	0x04
000d94   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
000d96   f002
                                           ;	.line	214; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_POS = _lcd_line2index(line);
000d98   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000d9a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d9c   ecb5     call    0x00136a, 0x0    	CALL	__lcd_line2index
000d9e   f009
000da0   010f     movlb   0xf              	BANKSEL	_LCD_POS
000da2   6f2a     movwf   0x2a, 0x1        	MOVWF	_LCD_POS, B
000da4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	215; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
000da6   ec5a     call    0x0016b4, 0x0    	CALL	__lcd_restore_cursor
000da8   f00b
                                           ;	.line	216; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < amount; i++) lcd_write_char(pattern);
000daa   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00364_DS_:
000dac   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000dae   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
000db0   e207     bc      0x000dc0         	BC	_00361_DS_
000db2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000db4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000db6   ec82     call    0x000304, 0x0    	CALL	_lcd_write_char
000db8   f001
000dba   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000dbc   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
000dbe   d7f6     bra     0x000dac         	BRA	_00364_DS_
                                           _00361_DS_:
                                           ;	.line	217; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < LCD_NR_CHARS - amount; i++) lcd_write_char(' ');
000dc0   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00367_DS_:
000dc2   c001     movff   0x001, 0x002     	MOVFF	r0x01, r0x02
000dc4   f002
000dc6   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000dc8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000dca   0810     sublw   0x10             	SUBLW	0x10
000dcc   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000dce   0e00     movlw   0x00             	MOVLW	0x00
000dd0   5603     subfwb  0x03, 0x1, 0x0   	SUBFWB	r0x03, F
000dd2   c000     movff   0x000, 0x004     	MOVFF	r0x00, r0x04
000dd4   f004
000dd6   0f80     addlw   0x80             	ADDLW	0x80
000dd8   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
000dda   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000ddc   0f80     addlw   0x80             	ADDLW	0x80
000dde   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
000de0   e102     bnz     0x000de6         	BNZ	_00386_DS_
000de2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000de4   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
                                           _00386_DS_:
000de6   e207     bc      0x000df6         	BC	_00369_DS_
000de8   0e20     movlw   0x20             	MOVLW	0x20
000dea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000dec   ec82     call    0x000304, 0x0    	CALL	_lcd_write_char
000dee   f001
000df0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000df2   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
000df4   d7e6     bra     0x000dc2         	BRA	_00367_DS_
                                           _00369_DS_:
000df6   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
000df8   f004
000dfa   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
000dfc   f003
000dfe   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
000e00   f002
000e02   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000e04   f001
000e06   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000e08   f000
000e0a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000e0c   ffd9
000e0e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_clear_line	code
                                           _lcd_clear_line:
                                           ;	.line	201; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_clear_line(uint8_t line) {
0013b2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0013b4   ffe5
0013b6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0013b8   ffd9
0013ba   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0013bc   ffe5
0013be   0e02     movlw   0x02             	MOVLW	0x02
0013c0   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0013c2   f000
                                           ;	.line	204; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_POS = _lcd_line2index(line);
0013c4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0013c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013c8   ecb5     call    0x00136a, 0x0    	CALL	__lcd_line2index
0013ca   f009
0013cc   010f     movlb   0xf              	BANKSEL	_LCD_POS
0013ce   6f2a     movwf   0x2a, 0x1        	MOVWF	_LCD_POS, B
0013d0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	205; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
0013d2   ec5a     call    0x0016b4, 0x0    	CALL	__lcd_restore_cursor
0013d4   f00b
                                           ;	.line	207; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < LCD_NR_CHARS; i++) lcd_write_char(' ');
0013d6   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00345_DS_:
0013d8   0e20     movlw   0x20             	MOVLW	0x20
0013da   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013dc   ec82     call    0x000304, 0x0    	CALL	_lcd_write_char
0013de   f001
0013e0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0013e2   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
0013e4   0e10     movlw   0x10             	MOVLW	0x10
0013e6   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
0013e8   e3f7     bnc     0x0013d8         	BNC	_00345_DS_
                                           ;	.line	209; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
0013ea   ec5a     call    0x0016b4, 0x0    	CALL	__lcd_restore_cursor
0013ec   f00b
0013ee   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0013f0   f000
0013f2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0013f4   ffd9
0013f6   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_home	code
                                           _lcd_home:
                                           ;	.line	195; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(LCD_RETURN_HOME);
00164a   0e02     movlw   0x02             	MOVLW	0x02
00164c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00164e   ecec     call    0x0015d8, 0x0    	CALL	__lcd_write_command
001650   f00a
001652   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	196; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
001654   0ea0     movlw   0xa0             	MOVLW	0xa0
001656   ec96     call    0x000d2c, 0x0    	CALL	_delay100tcy
001658   f006
                                           ;	.line	197; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
00165a   0e50     movlw   0x50             	MOVLW	0x50
00165c   ec96     call    0x000d2c, 0x0    	CALL	_delay100tcy
00165e   f006
                                           ;	.line	198; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_300us();
001660   0e30     movlw   0x30             	MOVLW	0x30
001662   ec96     call    0x000d2c, 0x0    	CALL	_delay100tcy
001664   f006
001666   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_blink_display	code
                                           _lcd_cursor_blink_display:
                                           ;	.line	185; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_blink_display(bit_t cursor, bit_t blink, bit_t display) {
0012ac   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0012ae   ffe5
0012b0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0012b2   ffd9
0012b4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0012b6   ffe5
0012b8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0012ba   ffe5
0012bc   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0012be   ffe5
0012c0   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0012c2   ffe5
0012c4   0e02     movlw   0x02             	MOVLW	0x02
0012c6   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0012c8   f000
0012ca   0e03     movlw   0x03             	MOVLW	0x03
0012cc   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0012ce   f001
0012d0   0e04     movlw   0x04             	MOVLW	0x04
0012d2   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0012d4   f002
                                           ;	.line	187; ../my_sdcc_lib/rosso_sdcc_lcd4.h	reg = LCD_DISPLAY_ONOFF;
0012d6   0e08     movlw   0x08             	MOVLW	0x08
0012d8   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
                                           ;	.line	188; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (display) reg = reg + 4;
0012da   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0012dc   e002     bz      0x0012e2         	BZ	_00329_DS_
0012de   0e0c     movlw   0x0c             	MOVLW	0x0c
0012e0   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
                                           _00329_DS_:
                                           ;	.line	189; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (cursor) reg = reg + 2;
0012e2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0012e4   e002     bz      0x0012ea         	BZ	_00331_DS_
0012e6   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
0012e8   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
                                           _00331_DS_:
                                           ;	.line	190; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (blink) reg = reg + 1;
0012ea   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0012ec   e001     bz      0x0012f0         	BZ	_00333_DS_
0012ee   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
                                           _00333_DS_:
                                           ;	.line	191; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(reg);
0012f0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0012f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012f4   ecec     call    0x0015d8, 0x0    	CALL	__lcd_write_command
0012f6   f00a
0012f8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0012fa   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0012fc   f003
0012fe   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001300   f002
001302   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001304   f001
001306   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001308   f000
00130a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00130c   ffd9
00130e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_clear_screen	code
                                           _lcd_clear_screen:
                                           ;	.line	179; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(LCD_CLEAR_DISPLAY);
001668   0e01     movlw   0x01             	MOVLW	0x01
00166a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00166c   ecec     call    0x0015d8, 0x0    	CALL	__lcd_write_command
00166e   f00a
001670   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	180; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
001672   0ea0     movlw   0xa0             	MOVLW	0xa0
001674   ec96     call    0x000d2c, 0x0    	CALL	_delay100tcy
001676   f006
                                           ;	.line	181; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
001678   0e50     movlw   0x50             	MOVLW	0x50
00167a   ec96     call    0x000d2c, 0x0    	CALL	_delay100tcy
00167c   f006
                                           ;	.line	182; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_300us();
00167e   0e30     movlw   0x30             	MOVLW	0x30
001680   ec96     call    0x000d2c, 0x0    	CALL	_delay100tcy
001682   f006
001684   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_shift_right	code
                                           _lcd_cursor_shift_right:
                                           ;	.line	171; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_shift_right(uint8_t nr) {
001438   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00143a   ffe5
00143c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00143e   ffd9
001440   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001442   ffe5
001444   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001446   ffe5
001448   0e02     movlw   0x02             	MOVLW	0x02
00144a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00144c   f000
                                           ;	.line	173; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
00144e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001450   e00b     bz      0x001468         	BZ	_00306_DS_
                                           ;	.line	174; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_CURSOR_SHIFT_R_VAL);
001452   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00304_DS_:
001454   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001456   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001458   e207     bc      0x001468         	BC	_00306_DS_
00145a   0e14     movlw   0x14             	MOVLW	0x14
00145c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00145e   ecec     call    0x0015d8, 0x0    	CALL	__lcd_write_command
001460   f00a
001462   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001464   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001466   d7f6     bra     0x001454         	BRA	_00304_DS_
                                           _00306_DS_:
001468   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00146a   f001
00146c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00146e   f000
001470   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001472   ffd9
001474   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_shift_left	code
                                           _lcd_cursor_shift_left:
                                           ;	.line	164; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_shift_left(uint8_t nr) {
001476   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001478   ffe5
00147a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00147c   ffd9
00147e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001480   ffe5
001482   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001484   ffe5
001486   0e02     movlw   0x02             	MOVLW	0x02
001488   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00148a   f000
                                           ;	.line	166; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
00148c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00148e   e00b     bz      0x0014a6         	BZ	_00283_DS_
                                           ;	.line	167; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_CURSOR_SHIFT_L_VAL);
001490   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00281_DS_:
001492   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001494   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001496   e207     bc      0x0014a6         	BC	_00283_DS_
001498   0e10     movlw   0x10             	MOVLW	0x10
00149a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00149c   ecec     call    0x0015d8, 0x0    	CALL	__lcd_write_command
00149e   f00a
0014a0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0014a2   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0014a4   d7f6     bra     0x001492         	BRA	_00281_DS_
                                           _00283_DS_:
0014a6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0014a8   f001
0014aa   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0014ac   f000
0014ae   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0014b0   ffd9
0014b2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_shift_right	code
                                           _lcd_shift_right:
                                           ;	.line	157; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_shift_right(uint8_t nr) {
0014b4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0014b6   ffe5
0014b8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0014ba   ffd9
0014bc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0014be   ffe5
0014c0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0014c2   ffe5
0014c4   0e02     movlw   0x02             	MOVLW	0x02
0014c6   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0014c8   f000
                                           ;	.line	159; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
0014ca   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0014cc   e00b     bz      0x0014e4         	BZ	_00260_DS_
                                           ;	.line	160; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_DISPLAY_SHIFT_RIGHT);
0014ce   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00258_DS_:
0014d0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0014d2   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
0014d4   e207     bc      0x0014e4         	BC	_00260_DS_
0014d6   0e1c     movlw   0x1c             	MOVLW	0x1c
0014d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014da   ecec     call    0x0015d8, 0x0    	CALL	__lcd_write_command
0014dc   f00a
0014de   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0014e0   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0014e2   d7f6     bra     0x0014d0         	BRA	_00258_DS_
                                           _00260_DS_:
0014e4   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0014e6   f001
0014e8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0014ea   f000
0014ec   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0014ee   ffd9
0014f0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_shift_left	code
                                           _lcd_shift_left:
                                           ;	.line	150; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_shift_left(uint8_t nr) {
0014f2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0014f4   ffe5
0014f6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0014f8   ffd9
0014fa   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0014fc   ffe5
0014fe   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001500   ffe5
001502   0e02     movlw   0x02             	MOVLW	0x02
001504   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001506   f000
                                           ;	.line	152; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
001508   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00150a   e00b     bz      0x001522         	BZ	_00237_DS_
                                           ;	.line	153; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_DISPLAY_SHIFT_LEFT);
00150c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00235_DS_:
00150e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001510   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001512   e207     bc      0x001522         	BC	_00237_DS_
001514   0e18     movlw   0x18             	MOVLW	0x18
001516   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001518   ecec     call    0x0015d8, 0x0    	CALL	__lcd_write_command
00151a   f00a
00151c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00151e   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001520   d7f6     bra     0x00150e         	BRA	_00235_DS_
                                           _00237_DS_:
001522   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001524   f001
001526   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001528   f000
00152a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00152c   ffd9
00152e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_position	code
                                           _lcd_cursor_position:
                                           ;	.line	145; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_position(uint8_t line, uint8_t pos) {
001530   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001532   ffe5
001534   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001536   ffd9
001538   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00153a   ffe5
00153c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00153e   ffe5
001540   0e02     movlw   0x02             	MOVLW	0x02
001542   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001544   f000
001546   0e03     movlw   0x03             	MOVLW	0x03
001548   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00154a   f001
                                           ;	.line	146; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_POS = pos + _lcd_line2index(line);
00154c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00154e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001550   ecb5     call    0x00136a, 0x0    	CALL	__lcd_line2index
001552   f009
001554   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001556   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
001558   010f     movlb   0xf              	BANKSEL	_LCD_POS
00155a   6f2a     movwf   0x2a, 0x1        	MOVWF	_LCD_POS, B
                                           ;	.line	147; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
00155c   ec5a     call    0x0016b4, 0x0    	CALL	__lcd_restore_cursor
00155e   f00b
001560   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001562   f001
001564   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001566   f000
001568   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00156a   ffd9
00156c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_write_strF	code
                                           _lcd_write_strF:
                                           ;	.line	138; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_write_strF(const uint8_t *data){
0011dc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0011de   ffe5
0011e0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0011e2   ffd9
0011e4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0011e6   ffe5
0011e8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0011ea   ffe5
0011ec   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0011ee   ffe5
0011f0   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0011f2   ffe5
0011f4   0e02     movlw   0x02             	MOVLW	0x02
0011f6   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0011f8   f000
0011fa   0e03     movlw   0x03             	MOVLW	0x03
0011fc   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0011fe   f001
001200   0e04     movlw   0x04             	MOVLW	0x04
001202   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
001204   f002
                                           _00209_DS_:
                                           ;	.line	139; ../my_sdcc_lib/rosso_sdcc_lcd4.h	while(*data){
001206   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001208   ffe9
00120a   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
00120c   fff3
00120e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001210   ec14     call    0x001628, 0x0    	CALL	__gptrget1
001212   f00b
001214   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001216   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001218   e00a     bz      0x00122e         	BZ	_00212_DS_
                                           ;	.line	140; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_data(*data);
00121a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00121c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00121e   ec00     call    0x001600, 0x0    	CALL	__lcd_write_data
001220   f00b
001222   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	141; ../my_sdcc_lib/rosso_sdcc_lcd4.h	*data++;
001224   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
001226   e3ef     bnc     0x001206         	BNC	_00209_DS_
001228   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
00122a   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
                                           _00221_DS_:
00122c   d7ec     bra     0x001206         	BRA	_00209_DS_
                                           _00212_DS_:
00122e   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001230   f003
001232   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001234   f002
001236   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001238   f001
00123a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00123c   f000
00123e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001240   ffd9
001242   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_write_str	code
                                           _lcd_write_str:
                                           ;	.line	131; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_write_str(uint8_t *data){
001244   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001246   ffe5
001248   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00124a   ffd9
00124c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00124e   ffe5
001250   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001252   ffe5
001254   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001256   ffe5
001258   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00125a   ffe5
00125c   0e02     movlw   0x02             	MOVLW	0x02
00125e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001260   f000
001262   0e03     movlw   0x03             	MOVLW	0x03
001264   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001266   f001
001268   0e04     movlw   0x04             	MOVLW	0x04
00126a   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
00126c   f002
                                           _00192_DS_:
                                           ;	.line	132; ../my_sdcc_lib/rosso_sdcc_lcd4.h	while(*data){
00126e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001270   ffe9
001272   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
001274   fff3
001276   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001278   ec14     call    0x001628, 0x0    	CALL	__gptrget1
00127a   f00b
00127c   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00127e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001280   e00a     bz      0x001296         	BZ	_00195_DS_
                                           ;	.line	133; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_data(*data);
001282   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001284   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001286   ec00     call    0x001600, 0x0    	CALL	__lcd_write_data
001288   f00b
00128a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	134; ../my_sdcc_lib/rosso_sdcc_lcd4.h	*data++;
00128c   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
00128e   e3ef     bnc     0x00126e         	BNC	_00192_DS_
001290   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
001292   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
                                           _00204_DS_:
001294   d7ec     bra     0x00126e         	BRA	_00192_DS_
                                           _00195_DS_:
001296   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001298   f003
00129a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00129c   f002
00129e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0012a0   f001
0012a2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0012a4   f000
0012a6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0012a8   ffd9
0012aa   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_write_char	code
                                           _lcd_write_char:
                                           ;	.line	127; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_write_char(uint8_t data) {
000304   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000306   ffe5
000308   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00030a   ffd9
00030c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00030e   ffe5
000310   0e02     movlw   0x02             	MOVLW	0x02
000312   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000314   f000
                                           ;	.line	128; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_data(data);
000316   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000318   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00031a   ec00     call    0x001600, 0x0    	CALL	__lcd_write_data
00031c   f00b
00031e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000320   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000322   f000
000324   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000326   ffd9
000328   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_restore_cursor	code
                                           __lcd_restore_cursor:
                                           ;	.line	124; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(LCD_SET_DDRAM_ADDRESS | LCD_POS);
0016b4   0e80     movlw   0x80             	MOVLW	0x80
0016b6   010f     movlb   0xf              	BANKSEL	_LCD_POS
0016b8   112a     iorwf   0x2a, 0x0, 0x1   	IORWF	_LCD_POS, W, B
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
0016ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0016bc   ecec     call    0x0015d8, 0x0    	CALL	__lcd_write_command
0016be   f00a
0016c0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0016c2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_line2index	code
                                           __lcd_line2index:
                                           ;	.line	112; ../my_sdcc_lib/rosso_sdcc_lcd4.h	uint8_t _lcd_line2index(uint8_t line) {
00136a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00136c   ffe5
00136e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001370   ffd9
001372   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001374   ffe5
001376   0e02     movlw   0x02             	MOVLW	0x02
001378   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00137a   f000
                                           ;	.line	114; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (line < LCD_NR_LINES) {
00137c   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
00137e   e213     bc      0x0013a6         	BC	_00153_DS_
                                           ;	.line	115; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (line == 0) return 0x00;
001380   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001382   e102     bnz     0x001388         	BNZ	_00150_DS_
001384   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001386   d010     bra     0x0013a8         	BRA	_00154_DS_
                                           _00150_DS_:
                                           ;	.line	116; ../my_sdcc_lib/rosso_sdcc_lcd4.h	else if (line == 1) return 0x40;
001388   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00138a   0a01     xorlw   0x01             	XORLW	0x01
00138c   e102     bnz     0x001392         	BNZ	_00147_DS_
00138e   0e40     movlw   0x40             	MOVLW	0x40
001390   d00b     bra     0x0013a8         	BRA	_00154_DS_
                                           _00147_DS_:
                                           ;	.line	117; ../my_sdcc_lib/rosso_sdcc_lcd4.h	else if (line == 2) return 0x00 + LCD_NR_CHARS;
001392   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001394   0a02     xorlw   0x02             	XORLW	0x02
001396   e102     bnz     0x00139c         	BNZ	_00144_DS_
001398   0e10     movlw   0x10             	MOVLW	0x10
00139a   d006     bra     0x0013a8         	BRA	_00154_DS_
                                           _00144_DS_:
                                           ;	.line	118; ../my_sdcc_lib/rosso_sdcc_lcd4.h	else if (line == 3) return 0x40 + LCD_NR_CHARS;
00139c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00139e   0a03     xorlw   0x03             	XORLW	0x03
0013a0   e102     bnz     0x0013a6         	BNZ	_00153_DS_
0013a2   0e50     movlw   0x50             	MOVLW	0x50
0013a4   d001     bra     0x0013a8         	BRA	_00154_DS_
                                           _00153_DS_:
                                           ;	.line	120; ../my_sdcc_lib/rosso_sdcc_lcd4.h	return 0x00;
0013a6   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
                                           _00154_DS_:
0013a8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0013aa   f000
0013ac   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0013ae   ffd9
0013b0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_write_command	code
                                           __lcd_write_command:
                                           ;	.line	107; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void _lcd_write_command(uint8_t value) {
0015d8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0015da   ffe5
0015dc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0015de   ffd9
0015e0   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0015e2   ffe5
0015e4   0e02     movlw   0x02             	MOVLW	0x02
0015e6   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0015e8   f000
                                           ;	.line	108; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS = 0; // select command mode
0015ea   928d     bcf     0x8d, 0x1, 0x0   	BCF	_LATEbits, 1
                                           ;	.line	109; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write(value); // write byte
0015ec   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0015ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015f0   ec08     call    0x000e10, 0x0    	CALL	___lcd_write
0015f2   f007
0015f4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0015f6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0015f8   f000
0015fa   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0015fc   ffd9
0015fe   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_write_data	code
                                           __lcd_write_data:
                                           ;	.line	102; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void _lcd_write_data(uint8_t value) {
001600   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001602   ffe5
001604   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001606   ffd9
001608   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00160a   ffe5
00160c   0e02     movlw   0x02             	MOVLW	0x02
00160e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001610   f000
                                           ;	.line	103; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS = 1; // select data mode
001612   828d     bsf     0x8d, 0x1, 0x0   	BSF	_LATEbits, 1
                                           ;	.line	104; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write(value); // write byte
001614   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001616   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001618   ec08     call    0x000e10, 0x0    	CALL	___lcd_write
00161a   f007
00161c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00161e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001620   f000
001622   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001624   ffd9
001626   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main____lcd_write	code
                                           ___lcd_write:
                                           ;	.line	95; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void __lcd_write(uint8_t value) {
000e10   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000e12   ffe5
000e14   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000e16   ffd9
000e18   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000e1a   ffe5
000e1c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000e1e   ffe5
000e20   0e02     movlw   0x02             	MOVLW	0x02
000e22   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000e24   f000
                                           ;	.line	96; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(value >> 4); // write high nibble
000e26   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
000e28   0b0f     andlw   0x0f             	ANDLW	0x0f
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x01, W
000e2a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000e2c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e2e   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
000e30   f007
000e32   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	97; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(value); // write low nibble
000e34   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000e36   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e38   eca8     call    0x000f50, 0x0    	CALL	___lcd_write_nibble
000e3a   f007
000e3c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	98; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
000e3e   0e38     movlw   0x38             	MOVLW	0x38
000e40   eca9     call    0x000d52, 0x0    	CALL	_delay10tcy
000e42   f006
000e44   0000     nop                      	nop	
000e46   0000     nop                      	nop	
000e48   0000     nop                      	nop	
000e4a   0000     nop                      	nop	
000e4c   0000     nop                      	nop	
000e4e   0000     nop                      	nop	
000e50   0000     nop                      	nop	
000e52   0000     nop                      	nop	
000e54   0000     nop                      	nop	
000e56   0000     nop                      	nop	
000e58   0000     nop                      	nop	
000e5a   0000     nop                      	nop	
000e5c   0000     nop                      	nop	
000e5e   0000     nop                      	nop	
000e60   0000     nop                      	nop	
000e62   0000     nop                      	nop	
000e64   0000     nop                      	nop	
000e66   0000     nop                      	nop	
000e68   0000     nop                      	nop	
000e6a   0000     nop                      	nop	
000e6c   0000     nop                      	nop	
000e6e   0000     nop                      	nop	
000e70   0000     nop                      	nop	
000e72   0000     nop                      	nop	
000e74   0000     nop                      	nop	
000e76   0000     nop                      	nop	
000e78   0000     nop                      	nop	
000e7a   0000     nop                      	nop	
000e7c   0000     nop                      	nop	
000e7e   0000     nop                      	nop	
000e80   0000     nop                      	nop	
000e82   0000     nop                      	nop	
000e84   0000     nop                      	nop	
000e86   0000     nop                      	nop	
000e88   0000     nop                      	nop	
000e8a   0000     nop                      	nop	
000e8c   0000     nop                      	nop	
000e8e   0000     nop                      	nop	
000e90   0000     nop                      	nop	
000e92   0000     nop                      	nop	
000e94   0000     nop                      	nop	
000e96   0000     nop                      	nop	
000e98   0000     nop                      	nop	
000e9a   0000     nop                      	nop	
000e9c   0000     nop                      	nop	
000e9e   0000     nop                      	nop	
000ea0   0000     nop                      	nop	
000ea2   0000     nop                      	nop	
000ea4   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000ea6   f001
000ea8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000eaa   f000
000eac   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000eae   ffd9
000eb0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main____lcd_write_nibble	code
                                           ___lcd_write_nibble:
                                           ;	.line	83; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void __lcd_write_nibble(uint8_t value) {
000f50   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000f52   ffe5
000f54   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000f56   ffd9
000f58   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000f5a   ffe5
000f5c   0e02     movlw   0x02             	MOVLW	0x02
000f5e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000f60   f000
                                           ;	.line	85; ../my_sdcc_lib/rosso_sdcc_lcd4.h	nibble.val = value;
000f62   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000f64   010f     movlb   0xf              	BANKSEL	___lcd_write_nibble_nibble_1_29
000f66   6f29     movwf   0x29, 0x1        	MOVWF	___lcd_write_nibble_nibble_1_29, B
                                           ;	.line	86; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D4 = nibble.bits.b0;
000f68   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
000f6a   b129     btfsc   0x29, 0x0, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_29, 0, B
000f6c   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
000f6e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000f70   0b01     andlw   0x01             	ANDLW	0x01
000f72   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000f74   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000f76   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
000f78   0bef     andlw   0xef             	ANDLW	0xef
000f7a   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000f7c   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	87; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D5 = nibble.bits.b1;
000f7e   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
000f80   b329     btfsc   0x29, 0x1, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_29, 1, B
000f82   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
000f84   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000f86   0b01     andlw   0x01             	ANDLW	0x01
000f88   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000f8a   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000f8c   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000f8e   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
000f90   0bdf     andlw   0xdf             	ANDLW	0xdf
000f92   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000f94   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	88; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D6 = nibble.bits.b2;
000f96   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
000f98   b529     btfsc   0x29, 0x2, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_29, 2, B
000f9a   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
000f9c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000f9e   0b01     andlw   0x01             	ANDLW	0x01
000fa0   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000fa2   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000fa4   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000fa6   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
000fa8   0bbf     andlw   0xbf             	ANDLW	0xbf
000faa   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000fac   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	89; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D7 = nibble.bits.b3;
000fae   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
000fb0   b729     btfsc   0x29, 0x3, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_29, 3, B
000fb2   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
000fb4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000fb6   0b01     andlw   0x01             	ANDLW	0x01
000fb8   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000fba   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000fbc   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
000fbe   0b7f     andlw   0x7f             	ANDLW	0x7f
000fc0   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000fc2   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	90; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_EN = 1;
000fc4   848d     bsf     0x8d, 0x2, 0x0   	BSF	_LATEbits, 2
000fc6   0000     nop                      	nop	
000fc8   0000     nop                      	nop	
000fca   0000     nop                      	nop	
000fcc   0000     nop                      	nop	
000fce   0000     nop                      	nop	
000fd0   0000     nop                      	nop	
000fd2   0000     nop                      	nop	
000fd4   0000     nop                      	nop	
                                           ;	.line	92; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_EN = 0;
000fd6   948d     bcf     0x8d, 0x2, 0x0   	BCF	_LATEbits, 2
000fd8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000fda   f000
000fdc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000fde   ffd9
000fe0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___delay_ms	code
                                           __delay_ms:
                                           ;	.line	175; ../my_sdcc_lib/rosso_sdcc.h	void _delay_ms(uint16_t x){
001310   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001312   ffe5
001314   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001316   ffd9
001318   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00131a   ffe5
00131c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00131e   ffe5
001320   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001322   ffe5
001324   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001326   ffe5
001328   0e02     movlw   0x02             	MOVLW	0x02
00132a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00132c   f000
00132e   0e03     movlw   0x03             	MOVLW	0x03
001330   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001332   f001
                                           _00113_DS_:
                                           ;	.line	177; ../my_sdcc_lib/rosso_sdcc.h	delay_1ms();
001334   0ea0     movlw   0xa0             	MOVLW	0xa0
001336   ec96     call    0x000d2c, 0x0    	CALL	_delay100tcy
001338   f006
                                           ;	.line	178; ../my_sdcc_lib/rosso_sdcc.h	}while(--x);
00133a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00133c   0fff     addlw   0xff             	ADDLW	0xff
00133e   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001340   0eff     movlw   0xff             	MOVLW	0xff
001342   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001344   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001346   c002     movff   0x002, 0x000     	MOVFF	r0x02, r0x00
001348   f000
00134a   c003     movff   0x003, 0x001     	MOVFF	r0x03, r0x01
00134c   f001
00134e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001350   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
001352   e1f0     bnz     0x001334         	BNZ	_00113_DS_
001354   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001356   f003
001358   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00135a   f002
00135c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00135e   f001
001360   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001362   f000
001364   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001366   ffd9
001368   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___delay_us	code
                                           __delay_us:
                                           ;	.line	169; ../my_sdcc_lib/rosso_sdcc.h	void _delay_us(uint16_t x){
0010f4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0010f6   ffe5
0010f8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0010fa   ffd9
0010fc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0010fe   ffe5
001100   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001102   ffe5
001104   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001106   ffe5
001108   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00110a   ffe5
00110c   0e02     movlw   0x02             	MOVLW	0x02
00110e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001110   f000
001112   0e03     movlw   0x03             	MOVLW	0x03
001114   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001116   f001
                                           _00105_DS_:
001118   0000     nop                      	nop	
00111a   0000     nop                      	nop	
00111c   0000     nop                      	nop	
00111e   0000     nop                      	nop	
001120   0000     nop                      	nop	
001122   0000     nop                      	nop	
001124   0000     nop                      	nop	
001126   0000     nop                      	nop	
001128   0000     nop                      	nop	
00112a   0000     nop                      	nop	
00112c   0000     nop                      	nop	
00112e   0000     nop                      	nop	
001130   0000     nop                      	nop	
001132   0000     nop                      	nop	
001134   0000     nop                      	nop	
001136   0000     nop                      	nop	
                                           ;	.line	172; ../my_sdcc_lib/rosso_sdcc.h	}while(--x);
001138   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00113a   0fff     addlw   0xff             	ADDLW	0xff
00113c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00113e   0eff     movlw   0xff             	MOVLW	0xff
001140   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001142   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001144   c002     movff   0x002, 0x000     	MOVFF	r0x02, r0x00
001146   f000
001148   c003     movff   0x003, 0x001     	MOVFF	r0x03, r0x01
00114a   f001
00114c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00114e   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
001150   e1e3     bnz     0x001118         	BNZ	_00105_DS_
001152   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001154   f003
001156   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001158   f002
00115a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00115c   f001
00115e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001160   f000
001162   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001164   ffd9
001166   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block for Ival
                                           	code
                                           _sf:
000cae   6e41     movwf   0x41, 0x0        	DB	0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x52, 0x41, 0x30, 0x3a, 0x00
000cb0   6c61     negf    0x61, 0x0        
000cb2   676f     tstfsz  0x6f, 0x1        
000cb4   5220     movf    0x20, 0x1, 0x0   
000cb6   3041     rrcf    0x41, 0x0, 0x0   
000cb8   003a     dw      0x003a           
000cba   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           ___str_0:
000cbc   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x00
000cbe   0020     dw      0x0020           
                                           ; ; Starting pCode block
                                           ___str_1:
000cc0   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x00
000cc2   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_2:
000cc4   0020     dw      0x0020           	DB	0x20, 0x00
                                           ; ; Starting pCode block
                                           __str_3:
000cc6   6e41     movwf   0x41, 0x0        	DB	0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x52, 0x41, 0x30, 0x3a, 0x00
000cc8   6c61     negf    0x61, 0x0        
000cca   676f     tstfsz  0x6f, 0x1        
000ccc   5220     movf    0x20, 0x1, 0x0   
000cce   3041     rrcf    0x41, 0x0, 0x0   
000cd0   003a     dw      0x003a           
000cd2   0000     nop                      	DB	0x00


                                           ; Statistics:
                                           ; code size:	 3390 (0x0d3e) bytes ( 2.59%)
                                           ;           	 1695 (0x069f) words
                                           ; udata size:	    7 (0x0007) bytes ( 0.19%)
                                           ; access size:	    5 (0x0005) bytes


                                           	end
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
