gplink-1.4.3 #1207 (May 12 2016)
Copyright (c) 1998-2016 gputils project
Listing File Generated: 5-16-2016  08:26:37
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.5.6 #9596 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	___uflags
                                           	global	__entry
                                           	global	__startup
                                           	global	_main
                                           	global	_RTC_seconds
                                           	global	_RTC_minutes
                                           	global	_RTC_hours
                                           	global	_RTC_day
                                           	global	_RTC_month
                                           	global	_RTC_century
                                           	global	_RTC_year
                                           	global	_RTC_dayofweek
                                           	global	_RTC_leapyear
                                           	global	_LCD_POS
                                           	global	_s
                                           	global	__delay_us
                                           	global	__delay_ms
                                           	global	_dectobcd
                                           	global	_bcdtodec
                                           	global	_nibble2hex
                                           	global	_byte2dec
                                           	global	_word2dec
                                           	global	_double2dec
                                           	global	_double2hex
                                           	global	_word2hex
                                           	global	_byte2hex
                                           	global	_i2c_init
                                           	global	_i2c_start
                                           	global	_i2c_restart
                                           	global	_i2c_stop
                                           	global	_i2c_write
                                           	global	_i2c_read
                                           	global	_pcf8583_getyear
                                           	global	_pcf8583_setyear
                                           	global	_pcf8583_set_datetime
                                           	global	_pcf8583_get_datetime
                                           	global	_pcf8583_read_reg
                                           	global	_pcf8583_en_dis_alarm
                                           	global	_pcf8583_set_alarm_weekdays
                                           	global	_pcf8583_set_alarm_time
                                           	global	_pcf8583_stop_alarm
                                           	global	___lcd_write_nibble
                                           	global	___lcd_write
                                           	global	__lcd_write_data
                                           	global	__lcd_write_command
                                           	global	__lcd_line2index
                                           	global	__lcd_restore_cursor
                                           	global	_lcd_write_char
                                           	global	_lcd_write_str
                                           	global	_lcd_write_strF
                                           	global	_lcd_cursor_position
                                           	global	_lcd_shift_left
                                           	global	_lcd_shift_right
                                           	global	_lcd_cursor_shift_left
                                           	global	_lcd_cursor_shift_right
                                           	global	_lcd_clear_screen
                                           	global	_lcd_cursor_blink_display
                                           	global	_lcd_home
                                           	global	_lcd_clear_line
                                           	global	_lcd_progress
                                           	global	_lcd_init

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__divuchar
                                           	extern	__moduchar
                                           	extern	__gptrput1
                                           	extern	__gptrget1
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_stack_end
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_delay10tcy
                                           	extern	_delay100tcy
                                           	extern	_delay1ktcy
                                           	extern	_delay10ktcy
                                           	extern	__moduint
                                           	extern	__divuint
                                           	extern	__modulong
                                           	extern	__divulong
                                           	extern	_cinit

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           	idata
                                           ___uflags	db	0x00


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           r0x17	res	1
                                           r0x18	res	1
                                           r0x19	res	1
                                           r0x1a	res	1
                                           r0x1b	res	1

                                           udata_main_0	udata
                                           _pcf8583_en_dis_alarm_cfg_1_74	res	1

                                           udata_main_1	udata
                                           _pcf8583_en_dis_alarm_alarmcfg_1_74	res	1

                                           udata_main_2	udata
                                           _pcf8583_set_alarm_weekdays_wd_1_78	res	1

                                           udata_main_3	udata
                                           _pcf8583_stop_alarm_cfg_1_82	res	1

                                           udata_main_4	udata
                                           ___lcd_write_nibble_nibble_1_84	res	1

                                           udata_main_5	udata
                                           _LCD_POS	res	1

                                           udata_main_6	udata
                                           _RTC_seconds	res	1

                                           udata_main_7	udata
                                           _RTC_minutes	res	1

                                           udata_main_8	udata
                                           _RTC_hours	res	1

                                           udata_main_9	udata
                                           _RTC_day	res	1

                                           udata_main_10	udata
                                           _RTC_month	res	1

                                           udata_main_11	udata
                                           _RTC_century	res	1

                                           udata_main_12	udata
                                           _RTC_year	res	1

                                           udata_main_13	udata
                                           _RTC_dayofweek	res	1

                                           udata_main_14	udata
                                           _RTC_leapyear	res	1

                                           udata_main_15	udata
                                           _s	res	4

                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_main___entry	code	0X000300
                                           __entry:
000300   efc0     goto    0x004380         	goto	__startup
000302   f021
                                           	
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	23; main.c	uint8_t  current_sec = 0, old_sec = 0;
00295a   6a00     clrf    0x00, 0x0        	CLRF	r0x00
00295c   010f     movlb   0xf              	BANKSEL	_ANSELA
                                           ;	.line	24; main.c	AllDigital();
00295e   6b38     clrf    0x38, 0x1        	CLRF	_ANSELA, B
002960   010f     movlb   0xf              	BANKSEL	_ANSELB
002962   6b39     clrf    0x39, 0x1        	CLRF	_ANSELB, B
002964   010f     movlb   0xf              	BANKSEL	_ANSELC
002966   6b3a     clrf    0x3a, 0x1        	CLRF	_ANSELC, B
002968   010f     movlb   0xf              	BANKSEL	_ANSELD
00296a   6b3b     clrf    0x3b, 0x1        	CLRF	_ANSELD, B
00296c   010f     movlb   0xf              	BANKSEL	_ANSELE
00296e   6b3c     clrf    0x3c, 0x1        	CLRF	_ANSELE, B
002970   6ac2     clrf    0xc2, 0x0        	CLRF	_ADCON0
002972   6ac1     clrf    0xc1, 0x0        	CLRF	_ADCON1
002974   6ac0     clrf    0xc0, 0x0        	CLRF	_ADCON2
002976   6a79     clrf    0x79, 0x0        	CLRF	_CM1CON0
002978   6a78     clrf    0x78, 0x0        	CLRF	_CM2CON0
00297a   6a77     clrf    0x77, 0x0        	CLRF	_CM2CON1
                                           ;	.line	26; main.c	OnBoardLED_dir = OUTPUT; 
00297c   9494     bcf     0x94, 0x2, 0x0   	BCF	_TRISCbits, 2
                                           ;	.line	27; main.c	OnBoardButton_dir = INPUT; 
00297e   8892     bsf     0x92, 0x4, 0x0   	BSF	_TRISAbits, 4
                                           ;	.line	28; main.c	OnBoardLED = OFF;
002980   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	31; main.c	i2c_init(I2C_100KHZ);
002982   0e9f     movlw   0x9f             	MOVLW	0x9f
002984   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002986   ec65     call    0x004cca, 0x0    	CALL	_i2c_init
002988   f026
00298a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	32; main.c	lcd_init(LCD_HD44780);
00298c   0e00     movlw   0x00             	MOVLW	0x00
00298e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002990   ec0a     call    0x003014, 0x0    	CALL	_lcd_init
002992   f018
002994   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002996   010f     movlb   0xf              	BANKSEL	_RTC_seconds
                                           ;	.line	35; main.c	RTC_seconds = 0; // 0 to 59
002998   6b0b     clrf    0x0b, 0x1        	CLRF	_RTC_seconds, B
                                           ;	.line	36; main.c	RTC_minutes = 5; // 0 to 59
00299a   0e05     movlw   0x05             	MOVLW	0x05
00299c   010f     movlb   0xf              	BANKSEL	_RTC_minutes
00299e   6f0c     movwf   0x0c, 0x1        	MOVWF	_RTC_minutes, B
                                           ;	.line	37; main.c	RTC_hours = 17; // 0 to 23
0029a0   0e11     movlw   0x11             	MOVLW	0x11
0029a2   010f     movlb   0xf              	BANKSEL	_RTC_hours
0029a4   6f0d     movwf   0x0d, 0x1        	MOVWF	_RTC_hours, B
                                           ;	.line	38; main.c	RTC_day = 13; // 1 to 31
0029a6   0e0d     movlw   0x0d             	MOVLW	0x0d
0029a8   010f     movlb   0xf              	BANKSEL	_RTC_day
0029aa   6f0e     movwf   0x0e, 0x1        	MOVWF	_RTC_day, B
                                           ;	.line	39; main.c	RTC_month = 5; // 1 to 12
0029ac   0e05     movlw   0x05             	MOVLW	0x05
0029ae   010f     movlb   0xf              	BANKSEL	_RTC_month
0029b0   6f0f     movwf   0x0f, 0x1        	MOVWF	_RTC_month, B
                                           ;	.line	40; main.c	RTC_century = 20; //
0029b2   0e14     movlw   0x14             	MOVLW	0x14
0029b4   010f     movlb   0xf              	BANKSEL	_RTC_century
0029b6   6f10     movwf   0x10, 0x1        	MOVWF	_RTC_century, B
                                           ;	.line	41; main.c	RTC_year = 14; // 0 to 99
0029b8   0e0e     movlw   0x0e             	MOVLW	0x0e
0029ba   010f     movlb   0xf              	BANKSEL	_RTC_year
0029bc   6f11     movwf   0x11, 0x1        	MOVWF	_RTC_year, B
                                           ; #	MOVLW	0x02
                                           ; #	MOVWF	_RTC_dayofweek, B
                                           ; #	MOVLW	0x02
                                           ;	.line	42; main.c	RTC_dayofweek = 2; // 0 to 6 (Sun, Mon, etc..)
0029be   0e02     movlw   0x02             	MOVLW	0x02
0029c0   010f     movlb   0xf              	BANKSEL	_RTC_dayofweek
                                           ;	.line	43; main.c	RTC_leapyear = 2; // 0 to 3 (o - is leapyear and 1,2,3 not)
0029c2   6f12     movwf   0x12, 0x1        	MOVWF	_RTC_dayofweek, B
0029c4   010f     movlb   0xf              	BANKSEL	_RTC_leapyear
0029c6   6f13     movwf   0x13, 0x1        	MOVWF	_RTC_leapyear, B
                                           ;	.line	47; main.c	pcf8583_set_datetime(RTC_hours, RTC_minutes, RTC_seconds, RTC_dayofweek, RTC_day, RTC_month, RTC_leapyear, RTC_century, RTC_year);
0029c8   0e0e     movlw   0x0e             	MOVLW	0x0e
0029ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029cc   0e14     movlw   0x14             	MOVLW	0x14
0029ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029d0   0e02     movlw   0x02             	MOVLW	0x02
0029d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029d4   0e05     movlw   0x05             	MOVLW	0x05
0029d6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029d8   0e0d     movlw   0x0d             	MOVLW	0x0d
0029da   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029dc   0e02     movlw   0x02             	MOVLW	0x02
0029de   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029e0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0029e2   0e05     movlw   0x05             	MOVLW	0x05
0029e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029e6   0e11     movlw   0x11             	MOVLW	0x11
0029e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029ea   ec06     call    0x00380c, 0x0    	CALL	_pcf8583_set_datetime
0029ec   f01c
0029ee   0e09     movlw   0x09             	MOVLW	0x09
0029f0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00767_DS_:
                                           ;	.line	53; main.c	OnBoardLED = !OnBoardLED; // blink seconds
0029f2   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0029f4   b48b     btfsc   0x8b, 0x2, 0x0   	BTFSC	_LATCbits, 2
0029f6   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0029f8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0029fa   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0029fc   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
0029fe   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
002a00   6a01     clrf    0x01, 0x0        	CLRF	r0x01
002a02   3601     rlcf    0x01, 0x1, 0x0   	RLCF	r0x01, F
002a04   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002a06   0b01     andlw   0x01             	ANDLW	0x01
002a08   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
002a0a   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
002a0c   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
002a0e   508b     movf    0x8b, 0x0, 0x0   	MOVF	_LATCbits, W
002a10   0bfb     andlw   0xfb             	ANDLW	0xfb
002a12   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
002a14   6e8b     movwf   0x8b, 0x0        	MOVWF	_LATCbits
                                           ;	.line	54; main.c	pcf8583_get_datetime(&RTC_hours, &RTC_minutes, &RTC_seconds, &RTC_dayofweek, &RTC_day, &RTC_month, &RTC_leapyear, &RTC_century, &RTC_year);
002a16   0e80     movlw   0x80             	MOVLW	0x80
                                           ; #	MOVWF	r0x1b
                                           ; #	MOVF	r0x1b, W
002a18   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a1a   0e0f     movlw   0x0f             	MOVLW	HIGH(_RTC_year)
002a1c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a1e   0e11     movlw   0x11             	MOVLW	LOW(_RTC_year)
002a20   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a22   0e80     movlw   0x80             	MOVLW	0x80
002a24   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a26   0e0f     movlw   0x0f             	MOVLW	HIGH(_RTC_century)
002a28   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a2a   0e10     movlw   0x10             	MOVLW	LOW(_RTC_century)
002a2c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a2e   0e80     movlw   0x80             	MOVLW	0x80
002a30   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a32   0e0f     movlw   0x0f             	MOVLW	HIGH(_RTC_leapyear)
002a34   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a36   0e13     movlw   0x13             	MOVLW	LOW(_RTC_leapyear)
002a38   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a3a   0e80     movlw   0x80             	MOVLW	0x80
002a3c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a3e   0e0f     movlw   0x0f             	MOVLW	HIGH(_RTC_month)
002a40   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a42   0e0f     movlw   0x0f             	MOVLW	LOW(_RTC_month)
002a44   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a46   0e80     movlw   0x80             	MOVLW	0x80
002a48   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a4a   0e0f     movlw   0x0f             	MOVLW	HIGH(_RTC_day)
002a4c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a4e   0e0e     movlw   0x0e             	MOVLW	LOW(_RTC_day)
002a50   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a52   0e80     movlw   0x80             	MOVLW	0x80
002a54   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a56   0e0f     movlw   0x0f             	MOVLW	HIGH(_RTC_dayofweek)
002a58   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a5a   0e12     movlw   0x12             	MOVLW	LOW(_RTC_dayofweek)
002a5c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a5e   0e80     movlw   0x80             	MOVLW	0x80
002a60   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a62   0e0f     movlw   0x0f             	MOVLW	HIGH(_RTC_seconds)
002a64   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a66   0e0b     movlw   0x0b             	MOVLW	LOW(_RTC_seconds)
002a68   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a6a   0e80     movlw   0x80             	MOVLW	0x80
002a6c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a6e   0e0f     movlw   0x0f             	MOVLW	HIGH(_RTC_minutes)
002a70   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a72   0e0c     movlw   0x0c             	MOVLW	LOW(_RTC_minutes)
002a74   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a76   0e80     movlw   0x80             	MOVLW	0x80
002a78   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a7a   0e0f     movlw   0x0f             	MOVLW	HIGH(_RTC_hours)
002a7c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a7e   0e0d     movlw   0x0d             	MOVLW	LOW(_RTC_hours)
002a80   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a82   ec5e     call    0x002cbc, 0x0    	CALL	_pcf8583_get_datetime
002a84   f016
002a86   0e1b     movlw   0x1b             	MOVLW	0x1b
002a88   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	55; main.c	current_sec = RTC_seconds;
002a8a   cf0b     movff   0xf0b, 0x001     	MOVFF	_RTC_seconds, r0x01
002a8c   f001
                                           ;	.line	56; main.c	if(current_sec != old_sec){
002a8e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002a90   1800     xorwf   0x00, 0x0, 0x0   	XORWF	r0x00, W
002a92   e101     bnz     0x002a96         	BNZ	_00793_DS_
002a94   d105     bra     0x002ca0         	BRA	_00765_DS_
                                           _00793_DS_:
                                           ;	.line	57; main.c	old_sec = current_sec;
002a96   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
002a98   f000
                                           ;	.line	59; main.c	lcd_cursor_position(0, 0);
002a9a   0e00     movlw   0x00             	MOVLW	0x00
002a9c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002a9e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002aa0   ecd3     call    0x004ba6, 0x0    	CALL	_lcd_cursor_position
002aa2   f025
002aa4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002aa6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	60; main.c	byte2dec(RTC_hours, s);
002aa8   0e80     movlw   0x80             	MOVLW	0x80
                                           ; #	MOVWF	r0x03
                                           ; #	MOVF	r0x03, W
002aaa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002aac   0e0f     movlw   0x0f             	MOVLW	HIGH(_s)
002aae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ab0   0e00     movlw   0x00             	MOVLW	LOW(_s)
002ab2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ab4   010f     movlb   0xf              	BANKSEL	_RTC_hours
002ab6   510d     movf    0x0d, 0x0, 0x1   	MOVF	_RTC_hours, W, B
002ab8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002aba   ecb2     call    0x003364, 0x0    	CALL	_byte2dec
002abc   f019
002abe   0e04     movlw   0x04             	MOVLW	0x04
002ac0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	61; main.c	if(s[1] == ' ') _lcd_write_data('0');
002ac2   cf01     movff   0xf01, 0x001     	MOVFF	(_s + 1), r0x01
002ac4   f001
002ac6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002ac8   0a20     xorlw   0x20             	XORLW	0x20
002aca   e106     bnz     0x002ad8         	BNZ	_00750_DS_
002acc   0e30     movlw   0x30             	MOVLW	0x30
002ace   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ad0   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002ad2   f026
002ad4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002ad6   d005     bra     0x002ae2         	BRA	_00751_DS_
                                           _00750_DS_:
                                           ;	.line	62; main.c	else _lcd_write_data(s[1]);
002ad8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002ada   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002adc   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002ade   f026
002ae0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00751_DS_:
002ae2   010f     movlb   0xf              	BANKSEL	(_s + 2)
                                           ;	.line	63; main.c	_lcd_write_data(s[2]);
002ae4   5102     movf    0x02, 0x0, 0x1   	MOVF	(_s + 2), W, B
002ae6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ae8   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002aea   f026
002aec   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	64; main.c	_lcd_write_data(':');
002aee   0e3a     movlw   0x3a             	MOVLW	0x3a
002af0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002af2   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002af4   f026
002af6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	65; main.c	byte2dec(RTC_minutes, s);
002af8   0e80     movlw   0x80             	MOVLW	0x80
                                           ; #	MOVWF	r0x03
                                           ; #	MOVF	r0x03, W
002afa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002afc   0e0f     movlw   0x0f             	MOVLW	HIGH(_s)
002afe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b00   0e00     movlw   0x00             	MOVLW	LOW(_s)
002b02   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b04   010f     movlb   0xf              	BANKSEL	_RTC_minutes
002b06   510c     movf    0x0c, 0x0, 0x1   	MOVF	_RTC_minutes, W, B
002b08   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b0a   ecb2     call    0x003364, 0x0    	CALL	_byte2dec
002b0c   f019
002b0e   0e04     movlw   0x04             	MOVLW	0x04
002b10   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	66; main.c	if(s[1] == ' ') _lcd_write_data('0');
002b12   cf01     movff   0xf01, 0x001     	MOVFF	(_s + 1), r0x01
002b14   f001
002b16   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002b18   0a20     xorlw   0x20             	XORLW	0x20
002b1a   e106     bnz     0x002b28         	BNZ	_00753_DS_
002b1c   0e30     movlw   0x30             	MOVLW	0x30
002b1e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b20   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002b22   f026
002b24   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002b26   d005     bra     0x002b32         	BRA	_00754_DS_
                                           _00753_DS_:
                                           ;	.line	67; main.c	else _lcd_write_data(s[1]);
002b28   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002b2a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b2c   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002b2e   f026
002b30   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00754_DS_:
002b32   010f     movlb   0xf              	BANKSEL	(_s + 2)
                                           ;	.line	68; main.c	_lcd_write_data(s[2]);
002b34   5102     movf    0x02, 0x0, 0x1   	MOVF	(_s + 2), W, B
002b36   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b38   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002b3a   f026
002b3c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	69; main.c	_lcd_write_data(':');
002b3e   0e3a     movlw   0x3a             	MOVLW	0x3a
002b40   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b42   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002b44   f026
002b46   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	70; main.c	byte2dec(RTC_seconds, s);
002b48   0e80     movlw   0x80             	MOVLW	0x80
                                           ; #	MOVWF	r0x03
                                           ; #	MOVF	r0x03, W
002b4a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b4c   0e0f     movlw   0x0f             	MOVLW	HIGH(_s)
002b4e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b50   0e00     movlw   0x00             	MOVLW	LOW(_s)
002b52   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b54   010f     movlb   0xf              	BANKSEL	_RTC_seconds
002b56   510b     movf    0x0b, 0x0, 0x1   	MOVF	_RTC_seconds, W, B
002b58   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b5a   ecb2     call    0x003364, 0x0    	CALL	_byte2dec
002b5c   f019
002b5e   0e04     movlw   0x04             	MOVLW	0x04
002b60   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	71; main.c	if(s[1] == ' ') _lcd_write_data('0');
002b62   cf01     movff   0xf01, 0x001     	MOVFF	(_s + 1), r0x01
002b64   f001
002b66   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002b68   0a20     xorlw   0x20             	XORLW	0x20
002b6a   e106     bnz     0x002b78         	BNZ	_00756_DS_
002b6c   0e30     movlw   0x30             	MOVLW	0x30
002b6e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b70   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002b72   f026
002b74   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002b76   d005     bra     0x002b82         	BRA	_00757_DS_
                                           _00756_DS_:
                                           ;	.line	72; main.c	else _lcd_write_data(s[1]);
002b78   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002b7a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b7c   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002b7e   f026
002b80   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00757_DS_:
002b82   010f     movlb   0xf              	BANKSEL	(_s + 2)
                                           ;	.line	73; main.c	_lcd_write_data(s[2]);
002b84   5102     movf    0x02, 0x0, 0x1   	MOVF	(_s + 2), W, B
002b86   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b88   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002b8a   f026
002b8c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	75; main.c	lcd_cursor_position(1, 0);
002b8e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002b90   0e01     movlw   0x01             	MOVLW	0x01
002b92   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b94   ecd3     call    0x004ba6, 0x0    	CALL	_lcd_cursor_position
002b96   f025
002b98   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002b9a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	76; main.c	byte2dec(RTC_day, s);
002b9c   0e80     movlw   0x80             	MOVLW	0x80
                                           ; #	MOVWF	r0x03
                                           ; #	MOVF	r0x03, W
002b9e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ba0   0e0f     movlw   0x0f             	MOVLW	HIGH(_s)
002ba2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ba4   0e00     movlw   0x00             	MOVLW	LOW(_s)
002ba6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ba8   010f     movlb   0xf              	BANKSEL	_RTC_day
002baa   510e     movf    0x0e, 0x0, 0x1   	MOVF	_RTC_day, W, B
002bac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bae   ecb2     call    0x003364, 0x0    	CALL	_byte2dec
002bb0   f019
002bb2   0e04     movlw   0x04             	MOVLW	0x04
002bb4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	77; main.c	if(s[1] == ' ') _lcd_write_data('0');
002bb6   cf01     movff   0xf01, 0x001     	MOVFF	(_s + 1), r0x01
002bb8   f001
002bba   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002bbc   0a20     xorlw   0x20             	XORLW	0x20
002bbe   e106     bnz     0x002bcc         	BNZ	_00759_DS_
002bc0   0e30     movlw   0x30             	MOVLW	0x30
002bc2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bc4   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002bc6   f026
002bc8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002bca   d005     bra     0x002bd6         	BRA	_00760_DS_
                                           _00759_DS_:
                                           ;	.line	78; main.c	else _lcd_write_data(s[1]);
002bcc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002bce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bd0   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002bd2   f026
002bd4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00760_DS_:
002bd6   010f     movlb   0xf              	BANKSEL	(_s + 2)
                                           ;	.line	79; main.c	_lcd_write_data(s[2]);
002bd8   5102     movf    0x02, 0x0, 0x1   	MOVF	(_s + 2), W, B
002bda   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bdc   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002bde   f026
002be0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	80; main.c	_lcd_write_data('/');
002be2   0e2f     movlw   0x2f             	MOVLW	0x2f
002be4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002be6   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002be8   f026
002bea   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	81; main.c	byte2dec(RTC_month, s);
002bec   0e80     movlw   0x80             	MOVLW	0x80
                                           ; #	MOVWF	r0x03
                                           ; #	MOVF	r0x03, W
002bee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bf0   0e0f     movlw   0x0f             	MOVLW	HIGH(_s)
002bf2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bf4   0e00     movlw   0x00             	MOVLW	LOW(_s)
002bf6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bf8   010f     movlb   0xf              	BANKSEL	_RTC_month
002bfa   510f     movf    0x0f, 0x0, 0x1   	MOVF	_RTC_month, W, B
002bfc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bfe   ecb2     call    0x003364, 0x0    	CALL	_byte2dec
002c00   f019
002c02   0e04     movlw   0x04             	MOVLW	0x04
002c04   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	82; main.c	if(s[1] == ' ') _lcd_write_data('0');
002c06   cf01     movff   0xf01, 0x001     	MOVFF	(_s + 1), r0x01
002c08   f001
002c0a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002c0c   0a20     xorlw   0x20             	XORLW	0x20
002c0e   e106     bnz     0x002c1c         	BNZ	_00762_DS_
002c10   0e30     movlw   0x30             	MOVLW	0x30
002c12   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c14   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002c16   f026
002c18   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002c1a   d005     bra     0x002c26         	BRA	_00763_DS_
                                           _00762_DS_:
                                           ;	.line	83; main.c	else _lcd_write_data(s[1]);
002c1c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002c1e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c20   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002c22   f026
002c24   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00763_DS_:
002c26   010f     movlb   0xf              	BANKSEL	(_s + 2)
                                           ;	.line	84; main.c	_lcd_write_data(s[2]);
002c28   5102     movf    0x02, 0x0, 0x1   	MOVF	(_s + 2), W, B
002c2a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c2c   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002c2e   f026
002c30   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	85; main.c	_lcd_write_data('/');
002c32   0e2f     movlw   0x2f             	MOVLW	0x2f
002c34   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c36   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002c38   f026
002c3a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	86; main.c	byte2dec(RTC_century, s);
002c3c   0e80     movlw   0x80             	MOVLW	0x80
                                           ; #	MOVWF	r0x03
                                           ; #	MOVF	r0x03, W
002c3e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c40   0e0f     movlw   0x0f             	MOVLW	HIGH(_s)
002c42   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c44   0e00     movlw   0x00             	MOVLW	LOW(_s)
002c46   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c48   010f     movlb   0xf              	BANKSEL	_RTC_century
002c4a   5110     movf    0x10, 0x0, 0x1   	MOVF	_RTC_century, W, B
002c4c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c4e   ecb2     call    0x003364, 0x0    	CALL	_byte2dec
002c50   f019
002c52   0e04     movlw   0x04             	MOVLW	0x04
002c54   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002c56   010f     movlb   0xf              	BANKSEL	(_s + 1)
                                           ;	.line	87; main.c	_lcd_write_data(s[1]);
002c58   5101     movf    0x01, 0x0, 0x1   	MOVF	(_s + 1), W, B
002c5a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c5c   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002c5e   f026
002c60   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002c62   010f     movlb   0xf              	BANKSEL	(_s + 2)
                                           ;	.line	88; main.c	_lcd_write_data(s[2]);
002c64   5102     movf    0x02, 0x0, 0x1   	MOVF	(_s + 2), W, B
002c66   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c68   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002c6a   f026
002c6c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	89; main.c	byte2dec(RTC_year, s);
002c6e   0e80     movlw   0x80             	MOVLW	0x80
                                           ; #	MOVWF	r0x03
                                           ; #	MOVF	r0x03, W
002c70   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c72   0e0f     movlw   0x0f             	MOVLW	HIGH(_s)
002c74   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c76   0e00     movlw   0x00             	MOVLW	LOW(_s)
002c78   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c7a   010f     movlb   0xf              	BANKSEL	_RTC_year
002c7c   5111     movf    0x11, 0x0, 0x1   	MOVF	_RTC_year, W, B
002c7e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c80   ecb2     call    0x003364, 0x0    	CALL	_byte2dec
002c82   f019
002c84   0e04     movlw   0x04             	MOVLW	0x04
002c86   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002c88   010f     movlb   0xf              	BANKSEL	(_s + 1)
                                           ;	.line	90; main.c	_lcd_write_data(s[1]);
002c8a   5101     movf    0x01, 0x0, 0x1   	MOVF	(_s + 1), W, B
002c8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c8e   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002c90   f026
002c92   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002c94   010f     movlb   0xf              	BANKSEL	(_s + 2)
                                           ;	.line	91; main.c	_lcd_write_data(s[2]);
002c96   5102     movf    0x02, 0x0, 0x1   	MOVF	(_s + 2), W, B
002c98   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c9a   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
002c9c   f026
002c9e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00765_DS_:
                                           ;	.line	93; main.c	delay_150ms();
002ca0   0ef0     movlw   0xf0             	MOVLW	0xf0
002ca2   ec70     call    0x0044e0, 0x0    	CALL	_delay10ktcy
002ca4   f022
                                           ;	.line	94; main.c	delay_150ms();
002ca6   0ef0     movlw   0xf0             	MOVLW	0xf0
002ca8   ec70     call    0x0044e0, 0x0    	CALL	_delay10ktcy
002caa   f022
                                           ;	.line	95; main.c	delay_100ms();
002cac   0ea0     movlw   0xa0             	MOVLW	0xa0
002cae   ec70     call    0x0044e0, 0x0    	CALL	_delay10ktcy
002cb0   f022
                                           ;	.line	96; main.c	delay_100ms();
002cb2   0ea0     movlw   0xa0             	MOVLW	0xa0
002cb4   ec70     call    0x0044e0, 0x0    	CALL	_delay10ktcy
002cb6   f022
002cb8   d69c     bra     0x0029f2         	BRA	_00767_DS_
002cba   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___startup	code
                                           __startup:
                                           	;	Initialize the stack pointer
004380   ee11     lfsr    0x1, 0x1ff       	lfsr	1, _stack_end
004382   f0ff
004384   ee21     lfsr    0x2, 0x1ff       	lfsr	2, _stack_end
004386   f0ff
                                           	;	1st silicon does not do this on POR
004388   6af8     clrf    0xf8, 0x0        	clrf	_TBLPTRU, 0
                                           	;	Initialize the flash memory access configuration.
                                           	;	This is harmless for non-flash devices, so we do it on all parts.
00438a   8ea6     bsf     0xa6, 0x7, 0x0   	bsf	0xa6, 7, 0 ; EECON1.EEPGD = 1, TBLPTR accesses program memory
00438c   9ca6     bcf     0xa6, 0x6, 0x0   	bcf	0xa6, 6, 0 ; EECON1.CFGS = 0, TBLPTR accesses program memory
                                           	;	TBLPTR = &cinit
00438e   0e66     movlw   0x66             	movlw	low(_cinit)
004390   6ef6     movwf   0xf6, 0x0        	movwf	_TBLPTRL, 0
004392   0e4e     movlw   0x4e             	movlw	high(_cinit)
004394   6ef7     movwf   0xf7, 0x0        	movwf	_TBLPTRH, 0
004396   0e00     movlw   0x00             	movlw	upper(_cinit)
004398   6ef8     movwf   0xf8, 0x0        	movwf	_TBLPTRU, 0
                                           	;	0x05 = cinit.num_init
00439a   0009     tblrd*+                  	tblrd*+
00439c   cff5     movff   0xff5, 0x005     	movff	_TABLAT, 0x05
00439e   f005
0043a0   0009     tblrd*+                  	tblrd*+
0043a2   cff5     movff   0xff5, 0x006     	movff	_TABLAT, (0x05 + 1)
0043a4   f006
                                           	;	while (0x05)
0043a6   d034     bra     0x004410         	bra	entry_loop_dec
                                           entry_loop:
                                           	;	Count down so we only have to look up the data in _cinit once.
                                           	;	At this point we know that TBLPTR points to the top of the current
                                           	;	entry in _cinit, so we can just start reading the from, to, and
                                           	;	size values.
                                           	;	Read the source address low.
                                           	;	0x00 = 0x07 ->from;
0043a8   0009     tblrd*+                  	tblrd*+
0043aa   cff5     movff   0xff5, 0x000     	movff	_TABLAT, 0x00
0043ac   f000
                                           	;	source address high
0043ae   0009     tblrd*+                  	tblrd*+
0043b0   cff5     movff   0xff5, 0x001     	movff	_TABLAT, (0x00 + 1)
0043b2   f001
                                           	;	source address upper
0043b4   0009     tblrd*+                  	tblrd*+
0043b6   cff5     movff   0xff5, 0x002     	movff	_TABLAT, (0x00 + 2)
0043b8   f002
                                           	;	Skip 0 byte since it is stored as 0 32bit int.
0043ba   0009     tblrd*+                  	tblrd*+
                                           	;	Read the destination address directly into FSR0
                                           	;	destination address low.
                                           	;	FSR0 = (unsigned short)0x07 ->to;
0043bc   0009     tblrd*+                  	tblrd*+
0043be   cff5     movff   0xff5, 0xfe9     	movff	_TABLAT, _FSR0L
0043c0   ffe9
                                           	;	destination address high
0043c2   0009     tblrd*+                  	tblrd*+
0043c4   cff5     movff   0xff5, 0xfea     	movff	_TABLAT, _FSR0H
0043c6   ffea
                                           	;	Skip two bytes since it is stored as 0 32bit int.
0043c8   0009     tblrd*+                  	tblrd*+
0043ca   0009     tblrd*+                  	tblrd*+
                                           	;	Read the size of data to transfer to destination address.
                                           	;	0x03 = (unsigned short)0x07 ->size;
0043cc   0009     tblrd*+                  	tblrd*+
0043ce   cff5     movff   0xff5, 0x003     	movff	_TABLAT, 0x03
0043d0   f003
0043d2   0009     tblrd*+                  	tblrd*+
0043d4   cff5     movff   0xff5, 0x004     	movff	_TABLAT, (0x03 + 1)
0043d6   f004
                                           	;	Skip two bytes since it is stored as 0 32bit int.
0043d8   0009     tblrd*+                  	tblrd*+
0043da   0009     tblrd*+                  	tblrd*+
                                           	;	0x00 = 0x07 ->from;
                                           	;	FSR0 = (unsigned short)0x07 ->to;
                                           	;	0x03 = (unsigned short)0x07 ->size;
                                           	;	The table pointer now points to the next entry. Save it
                                           	;	off since we will be using the table pointer to do the copying
                                           	;	for the entry.
                                           	;	0x07 = TBLPTR
0043dc   cff6     movff   0xff6, 0x007     	movff	_TBLPTRL, 0x07
0043de   f007
0043e0   cff7     movff   0xff7, 0x008     	movff	_TBLPTRH, (0x07 + 1)
0043e2   f008
0043e4   cff8     movff   0xff8, 0x009     	movff	_TBLPTRU, (0x07 + 2)
0043e6   f009
                                           	;	Now assign the source address to the table pointer.
                                           	;	TBLPTR = 0x00
0043e8   c000     movff   0x000, 0xff6     	movff	0x00, _TBLPTRL
0043ea   fff6
0043ec   c001     movff   0x001, 0xff7     	movff	(0x00 + 1), _TBLPTRH
0043ee   fff7
0043f0   c002     movff   0x002, 0xff8     	movff	(0x00 + 2), _TBLPTRU
0043f2   fff8
0043f4   d003     bra     0x0043fc         	bra	copy_loop_dec
                                           copy_loop:
0043f6   0009     tblrd*+                  	tblrd*+
0043f8   cff5     movff   0xff5, 0xfee     	movff	_TABLAT, _POSTINC0
0043fa   ffee
                                           copy_loop_dec:
                                           	;	while (--0x03);
                                           	;	Decrement and test the byte counter.
                                           	;	The cycle ends when the value of counter reaches the -1.
0043fc   0603     decf    0x03, 0x1, 0x0   	decf	0x03, f, 0
0043fe   e2fb     bc      0x0043f6         	bc	copy_loop
004400   0604     decf    0x04, 0x1, 0x0   	decf	(0x03 + 1), f, 0
004402   e2f9     bc      0x0043f6         	bc	copy_loop
                                           	;	Restore the table pointer for the next entry.
                                           	;	TBLPTR = 0x07
004404   c007     movff   0x007, 0xff6     	movff	0x07, _TBLPTRL
004406   fff6
004408   c008     movff   0x008, 0xff7     	movff	(0x07 + 1), _TBLPTRH
00440a   fff7
00440c   c009     movff   0x009, 0xff8     	movff	(0x07 + 2), _TBLPTRU
00440e   fff8
                                           entry_loop_dec:
                                           	;	while (--0x05);
                                           	;	Decrement and test the entry counter.
                                           	;	The cycle ends when the value of counter reaches the -1.
004410   0605     decf    0x05, 0x1, 0x0   	decf	0x05, f, 0
004412   e2ca     bc      0x0043a8         	bc	entry_loop
004414   0606     decf    0x06, 0x1, 0x0   	decf	(0x05 + 1), f, 0
004416   e2c8     bc      0x0043a8         	bc	entry_loop
                                           	
                                           ;	.line	249; ../my_sdcc_lib/crt0i.c	main ();
004418   ecad     call    0x00295a, 0x0    	CALL	_main
00441a   f014
                                           lockup:
                                           	;	Returning from main will lock up.
00441c   d7ff     bra     0x00441c         	bra	lockup
                                           	
                                           ; ; Starting pCode block
                                           S_main__lcd_init	code
                                           _lcd_init:
                                           ;	.line	225; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_init(CHIP chipset) {
003014   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003016   ffe5
003018   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00301a   ffd9
00301c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00301e   ffe5
003020   0e02     movlw   0x02             	MOVLW	0x02
003022   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003024   f000
                                           ;	.line	244; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS_DIR = 0;
003026   9296     bcf     0x96, 0x1, 0x0   	BCF	_TRISEbits, 1
                                           ;	.line	245; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_EN_DIR = 0;
003028   9496     bcf     0x96, 0x2, 0x0   	BCF	_TRISEbits, 2
                                           ;	.line	246; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D4_DIR = 0;
00302a   9893     bcf     0x93, 0x4, 0x0   	BCF	_TRISBbits, 4
                                           ;	.line	247; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D5_DIR = 0;
00302c   9a93     bcf     0x93, 0x5, 0x0   	BCF	_TRISBbits, 5
                                           ;	.line	248; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D6_DIR = 0;
00302e   9c93     bcf     0x93, 0x6, 0x0   	BCF	_TRISBbits, 6
                                           ;	.line	249; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D7_DIR = 0;
003030   9e93     bcf     0x93, 0x7, 0x0   	BCF	_TRISBbits, 7
                                           ;	.line	251; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS = 0; // set to control char mode
003032   928d     bcf     0x8d, 0x1, 0x0   	BCF	_LATEbits, 1
                                           ;	.line	252; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (chipset == LCD_HD44780) {
003034   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003036   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
003038   d09a     bra     0x00316e         	BRA	_00723_DS_
                                           ;	.line	253; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_25ms(); // power-up delay (> 15 ms)
00303a   0e28     movlw   0x28             	MOVLW	0x28
00303c   ec70     call    0x0044e0, 0x0    	CALL	_delay10ktcy
00303e   f022
                                           ;	.line	254; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011); // function set
003040   0e03     movlw   0x03             	MOVLW	0x03
003042   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003044   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
003046   f022
003048   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	255; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_5ms(); // > 4.1 milliseconds
00304a   0e50     movlw   0x50             	MOVLW	0x50
00304c   ec5d     call    0x0044ba, 0x0    	CALL	_delay1ktcy
00304e   f022
                                           ;	.line	256; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011); // function set
003050   0e03     movlw   0x03             	MOVLW	0x03
003052   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003054   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
003056   f022
003058   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	257; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_100us(); // > 100 us
00305a   0ea0     movlw   0xa0             	MOVLW	0xa0
00305c   ec9c     call    0x004538, 0x0    	CALL	_delay10tcy
00305e   f022
                                           ;	.line	258; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011); // function set
003060   0e03     movlw   0x03             	MOVLW	0x03
003062   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003064   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
003066   f022
003068   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	259; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
00306a   0e38     movlw   0x38             	MOVLW	0x38
00306c   ec9c     call    0x004538, 0x0    	CALL	_delay10tcy
00306e   f022
003070   0000     nop                      	nop	
003072   0000     nop                      	nop	
003074   0000     nop                      	nop	
003076   0000     nop                      	nop	
003078   0000     nop                      	nop	
00307a   0000     nop                      	nop	
00307c   0000     nop                      	nop	
00307e   0000     nop                      	nop	
003080   0000     nop                      	nop	
003082   0000     nop                      	nop	
003084   0000     nop                      	nop	
003086   0000     nop                      	nop	
003088   0000     nop                      	nop	
00308a   0000     nop                      	nop	
00308c   0000     nop                      	nop	
00308e   0000     nop                      	nop	
003090   0000     nop                      	nop	
003092   0000     nop                      	nop	
003094   0000     nop                      	nop	
003096   0000     nop                      	nop	
003098   0000     nop                      	nop	
00309a   0000     nop                      	nop	
00309c   0000     nop                      	nop	
00309e   0000     nop                      	nop	
0030a0   0000     nop                      	nop	
0030a2   0000     nop                      	nop	
0030a4   0000     nop                      	nop	
0030a6   0000     nop                      	nop	
0030a8   0000     nop                      	nop	
0030aa   0000     nop                      	nop	
0030ac   0000     nop                      	nop	
0030ae   0000     nop                      	nop	
0030b0   0000     nop                      	nop	
0030b2   0000     nop                      	nop	
0030b4   0000     nop                      	nop	
0030b6   0000     nop                      	nop	
0030b8   0000     nop                      	nop	
0030ba   0000     nop                      	nop	
0030bc   0000     nop                      	nop	
0030be   0000     nop                      	nop	
0030c0   0000     nop                      	nop	
0030c2   0000     nop                      	nop	
0030c4   0000     nop                      	nop	
0030c6   0000     nop                      	nop	
0030c8   0000     nop                      	nop	
0030ca   0000     nop                      	nop	
0030cc   0000     nop                      	nop	
0030ce   0000     nop                      	nop	
                                           ;	.line	261; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000010); // select 4-bits mode
0030d0   0e02     movlw   0x02             	MOVLW	0x02
0030d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0030d4   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
0030d6   f022
0030d8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	262; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
0030da   0e38     movlw   0x38             	MOVLW	0x38
0030dc   ec9c     call    0x004538, 0x0    	CALL	_delay10tcy
0030de   f022
0030e0   0000     nop                      	nop	
0030e2   0000     nop                      	nop	
0030e4   0000     nop                      	nop	
0030e6   0000     nop                      	nop	
0030e8   0000     nop                      	nop	
0030ea   0000     nop                      	nop	
0030ec   0000     nop                      	nop	
0030ee   0000     nop                      	nop	
0030f0   0000     nop                      	nop	
0030f2   0000     nop                      	nop	
0030f4   0000     nop                      	nop	
0030f6   0000     nop                      	nop	
0030f8   0000     nop                      	nop	
0030fa   0000     nop                      	nop	
0030fc   0000     nop                      	nop	
0030fe   0000     nop                      	nop	
003100   0000     nop                      	nop	
003102   0000     nop                      	nop	
003104   0000     nop                      	nop	
003106   0000     nop                      	nop	
003108   0000     nop                      	nop	
00310a   0000     nop                      	nop	
00310c   0000     nop                      	nop	
00310e   0000     nop                      	nop	
003110   0000     nop                      	nop	
003112   0000     nop                      	nop	
003114   0000     nop                      	nop	
003116   0000     nop                      	nop	
003118   0000     nop                      	nop	
00311a   0000     nop                      	nop	
00311c   0000     nop                      	nop	
00311e   0000     nop                      	nop	
003120   0000     nop                      	nop	
003122   0000     nop                      	nop	
003124   0000     nop                      	nop	
003126   0000     nop                      	nop	
003128   0000     nop                      	nop	
00312a   0000     nop                      	nop	
00312c   0000     nop                      	nop	
00312e   0000     nop                      	nop	
003130   0000     nop                      	nop	
003132   0000     nop                      	nop	
003134   0000     nop                      	nop	
003136   0000     nop                      	nop	
003138   0000     nop                      	nop	
00313a   0000     nop                      	nop	
00313c   0000     nop                      	nop	
00313e   0000     nop                      	nop	
                                           ;	.line	264; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00101000); // 2 lines, 5x8 dots font
003140   0e28     movlw   0x28             	MOVLW	0x28
003142   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003144   ec7c     call    0x004cf8, 0x0    	CALL	__lcd_write_command
003146   f026
003148   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	265; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00011100); // cursor (not data) move right
00314a   0e1c     movlw   0x1c             	MOVLW	0x1c
00314c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00314e   ec7c     call    0x004cf8, 0x0    	CALL	__lcd_write_command
003150   f026
003152   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	266; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00001100); // display on, cursor off, no blink
003154   0e0c     movlw   0x0c             	MOVLW	0x0c
003156   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003158   ec7c     call    0x004cf8, 0x0    	CALL	__lcd_write_command
00315a   f026
00315c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	267; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00000110); // cursor shift right, no data shift
00315e   0e06     movlw   0x06             	MOVLW	0x06
003160   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003162   ec7c     call    0x004cf8, 0x0    	CALL	__lcd_write_command
003164   f026
003166   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	269; ../my_sdcc_lib/rosso_sdcc_lcd4.h	lcd_clear_screen(); // clear display
003168   ecd6     call    0x004dac, 0x0    	CALL	_lcd_clear_screen
00316a   f026
00316c   d0f6     bra     0x00335a         	BRA	_00725_DS_
                                           _00723_DS_:
                                           ;	.line	270; ../my_sdcc_lib/rosso_sdcc_lcd4.h	} else if (chipset == LCD_ST7066U) {
00316e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003170   0a01     xorlw   0x01             	XORLW	0x01
003172   e001     bz      0x003176         	BZ	_00734_DS_
003174   d0f2     bra     0x00335a         	BRA	_00725_DS_
                                           _00734_DS_:
                                           ;	.line	271; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011);
003176   0e03     movlw   0x03             	MOVLW	0x03
003178   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00317a   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
00317c   f022
00317e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	272; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
003180   0e40     movlw   0x40             	MOVLW	0x40
003182   ec9c     call    0x004538, 0x0    	CALL	_delay10tcy
003184   f022
                                           ;	.line	273; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000010);
003186   0e02     movlw   0x02             	MOVLW	0x02
003188   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00318a   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
00318c   f022
00318e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	274; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00001100);
003190   0e0c     movlw   0x0c             	MOVLW	0x0c
003192   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003194   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
003196   f022
003198   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	275; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
00319a   0e40     movlw   0x40             	MOVLW	0x40
00319c   ec9c     call    0x004538, 0x0    	CALL	_delay10tcy
00319e   f022
                                           ;	.line	276; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000010);
0031a0   0e02     movlw   0x02             	MOVLW	0x02
0031a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0031a4   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
0031a6   f022
0031a8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	277; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00001100);
0031aa   0e0c     movlw   0x0c             	MOVLW	0x0c
0031ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0031ae   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
0031b0   f022
0031b2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	278; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
0031b4   0e38     movlw   0x38             	MOVLW	0x38
0031b6   ec9c     call    0x004538, 0x0    	CALL	_delay10tcy
0031b8   f022
0031ba   0000     nop                      	nop	
0031bc   0000     nop                      	nop	
0031be   0000     nop                      	nop	
0031c0   0000     nop                      	nop	
0031c2   0000     nop                      	nop	
0031c4   0000     nop                      	nop	
0031c6   0000     nop                      	nop	
0031c8   0000     nop                      	nop	
0031ca   0000     nop                      	nop	
0031cc   0000     nop                      	nop	
0031ce   0000     nop                      	nop	
0031d0   0000     nop                      	nop	
0031d2   0000     nop                      	nop	
0031d4   0000     nop                      	nop	
0031d6   0000     nop                      	nop	
0031d8   0000     nop                      	nop	
0031da   0000     nop                      	nop	
0031dc   0000     nop                      	nop	
0031de   0000     nop                      	nop	
0031e0   0000     nop                      	nop	
0031e2   0000     nop                      	nop	
0031e4   0000     nop                      	nop	
0031e6   0000     nop                      	nop	
0031e8   0000     nop                      	nop	
0031ea   0000     nop                      	nop	
0031ec   0000     nop                      	nop	
0031ee   0000     nop                      	nop	
0031f0   0000     nop                      	nop	
0031f2   0000     nop                      	nop	
0031f4   0000     nop                      	nop	
0031f6   0000     nop                      	nop	
0031f8   0000     nop                      	nop	
0031fa   0000     nop                      	nop	
0031fc   0000     nop                      	nop	
0031fe   0000     nop                      	nop	
003200   0000     nop                      	nop	
003202   0000     nop                      	nop	
003204   0000     nop                      	nop	
003206   0000     nop                      	nop	
003208   0000     nop                      	nop	
00320a   0000     nop                      	nop	
00320c   0000     nop                      	nop	
00320e   0000     nop                      	nop	
003210   0000     nop                      	nop	
003212   0000     nop                      	nop	
003214   0000     nop                      	nop	
003216   0000     nop                      	nop	
003218   0000     nop                      	nop	
                                           ;	.line	280; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // display on / off
00321a   0e00     movlw   0x00             	MOVLW	0x00
00321c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00321e   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
003220   f022
003222   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	281; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00001100);
003224   0e0c     movlw   0x0c             	MOVLW	0x0c
003226   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003228   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
00322a   f022
00322c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	282; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
00322e   0e38     movlw   0x38             	MOVLW	0x38
003230   ec9c     call    0x004538, 0x0    	CALL	_delay10tcy
003232   f022
003234   0000     nop                      	nop	
003236   0000     nop                      	nop	
003238   0000     nop                      	nop	
00323a   0000     nop                      	nop	
00323c   0000     nop                      	nop	
00323e   0000     nop                      	nop	
003240   0000     nop                      	nop	
003242   0000     nop                      	nop	
003244   0000     nop                      	nop	
003246   0000     nop                      	nop	
003248   0000     nop                      	nop	
00324a   0000     nop                      	nop	
00324c   0000     nop                      	nop	
00324e   0000     nop                      	nop	
003250   0000     nop                      	nop	
003252   0000     nop                      	nop	
003254   0000     nop                      	nop	
003256   0000     nop                      	nop	
003258   0000     nop                      	nop	
00325a   0000     nop                      	nop	
00325c   0000     nop                      	nop	
00325e   0000     nop                      	nop	
003260   0000     nop                      	nop	
003262   0000     nop                      	nop	
003264   0000     nop                      	nop	
003266   0000     nop                      	nop	
003268   0000     nop                      	nop	
00326a   0000     nop                      	nop	
00326c   0000     nop                      	nop	
00326e   0000     nop                      	nop	
003270   0000     nop                      	nop	
003272   0000     nop                      	nop	
003274   0000     nop                      	nop	
003276   0000     nop                      	nop	
003278   0000     nop                      	nop	
00327a   0000     nop                      	nop	
00327c   0000     nop                      	nop	
00327e   0000     nop                      	nop	
003280   0000     nop                      	nop	
003282   0000     nop                      	nop	
003284   0000     nop                      	nop	
003286   0000     nop                      	nop	
003288   0000     nop                      	nop	
00328a   0000     nop                      	nop	
00328c   0000     nop                      	nop	
00328e   0000     nop                      	nop	
003290   0000     nop                      	nop	
003292   0000     nop                      	nop	
                                           ;	.line	284; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // display clear
003294   0e00     movlw   0x00             	MOVLW	0x00
003296   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003298   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
00329a   f022
00329c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	285; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000001);
00329e   0e01     movlw   0x01             	MOVLW	0x01
0032a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032a2   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
0032a4   f022
0032a6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	286; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
0032a8   0ea0     movlw   0xa0             	MOVLW	0xa0
0032aa   ec89     call    0x004512, 0x0    	CALL	_delay100tcy
0032ac   f022
                                           ;	.line	287; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
0032ae   0e50     movlw   0x50             	MOVLW	0x50
0032b0   ec89     call    0x004512, 0x0    	CALL	_delay100tcy
0032b2   f022
                                           ;	.line	288; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
0032b4   0e40     movlw   0x40             	MOVLW	0x40
0032b6   ec9c     call    0x004538, 0x0    	CALL	_delay10tcy
0032b8   f022
                                           ;	.line	289; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // entry mode set
0032ba   0e00     movlw   0x00             	MOVLW	0x00
0032bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032be   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
0032c0   f022
0032c2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	290; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000110);
0032c4   0e06     movlw   0x06             	MOVLW	0x06
0032c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032c8   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
0032ca   f022
0032cc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	291; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
0032ce   0e38     movlw   0x38             	MOVLW	0x38
0032d0   ec9c     call    0x004538, 0x0    	CALL	_delay10tcy
0032d2   f022
0032d4   0000     nop                      	nop	
0032d6   0000     nop                      	nop	
0032d8   0000     nop                      	nop	
0032da   0000     nop                      	nop	
0032dc   0000     nop                      	nop	
0032de   0000     nop                      	nop	
0032e0   0000     nop                      	nop	
0032e2   0000     nop                      	nop	
0032e4   0000     nop                      	nop	
0032e6   0000     nop                      	nop	
0032e8   0000     nop                      	nop	
0032ea   0000     nop                      	nop	
0032ec   0000     nop                      	nop	
0032ee   0000     nop                      	nop	
0032f0   0000     nop                      	nop	
0032f2   0000     nop                      	nop	
0032f4   0000     nop                      	nop	
0032f6   0000     nop                      	nop	
0032f8   0000     nop                      	nop	
0032fa   0000     nop                      	nop	
0032fc   0000     nop                      	nop	
0032fe   0000     nop                      	nop	
003300   0000     nop                      	nop	
003302   0000     nop                      	nop	
003304   0000     nop                      	nop	
003306   0000     nop                      	nop	
003308   0000     nop                      	nop	
00330a   0000     nop                      	nop	
00330c   0000     nop                      	nop	
00330e   0000     nop                      	nop	
003310   0000     nop                      	nop	
003312   0000     nop                      	nop	
003314   0000     nop                      	nop	
003316   0000     nop                      	nop	
003318   0000     nop                      	nop	
00331a   0000     nop                      	nop	
00331c   0000     nop                      	nop	
00331e   0000     nop                      	nop	
003320   0000     nop                      	nop	
003322   0000     nop                      	nop	
003324   0000     nop                      	nop	
003326   0000     nop                      	nop	
003328   0000     nop                      	nop	
00332a   0000     nop                      	nop	
00332c   0000     nop                      	nop	
00332e   0000     nop                      	nop	
003330   0000     nop                      	nop	
003332   0000     nop                      	nop	
                                           ;	.line	293; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // display clear
003334   0e00     movlw   0x00             	MOVLW	0x00
003336   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003338   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
00333a   f022
00333c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	294; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000001);
00333e   0e01     movlw   0x01             	MOVLW	0x01
003340   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003342   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
003344   f022
003346   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	295; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
003348   0ea0     movlw   0xa0             	MOVLW	0xa0
00334a   ec89     call    0x004512, 0x0    	CALL	_delay100tcy
00334c   f022
                                           ;	.line	296; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
00334e   0e50     movlw   0x50             	MOVLW	0x50
003350   ec89     call    0x004512, 0x0    	CALL	_delay100tcy
003352   f022
                                           ;	.line	297; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
003354   0e40     movlw   0x40             	MOVLW	0x40
003356   ec9c     call    0x004538, 0x0    	CALL	_delay10tcy
003358   f022
                                           _00725_DS_:
00335a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00335c   f000
00335e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003360   ffd9
003362   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_progress	code
                                           _lcd_progress:
                                           ;	.line	217; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_progress(uint8_t line, uint8_t amount, uint8_t pattern) {
004238   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00423a   ffe5
00423c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00423e   ffd9
004240   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004242   ffe5
004244   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004246   ffe5
004248   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00424a   ffe5
00424c   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00424e   ffe5
004250   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
004252   ffe5
004254   0e02     movlw   0x02             	MOVLW	0x02
004256   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004258   f000
00425a   0e03     movlw   0x03             	MOVLW	0x03
00425c   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00425e   f001
004260   0e04     movlw   0x04             	MOVLW	0x04
004262   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
004264   f002
                                           ;	.line	219; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_POS = _lcd_line2index(line);
004266   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004268   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00426a   ec10     call    0x004a20, 0x0    	CALL	__lcd_line2index
00426c   f025
00426e   010f     movlb   0xf              	BANKSEL	_LCD_POS
004270   6f0a     movwf   0x0a, 0x1        	MOVWF	_LCD_POS, B
004272   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	220; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
004274   ec2b     call    0x004e56, 0x0    	CALL	__lcd_restore_cursor
004276   f027
                                           ;	.line	221; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < amount; i++) lcd_write_char(pattern);
004278   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00693_DS_:
00427a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00427c   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
00427e   e207     bc      0x00428e         	BC	_00690_DS_
004280   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
004282   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004284   ec82     call    0x000304, 0x0    	CALL	_lcd_write_char
004286   f001
004288   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00428a   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
00428c   d7f6     bra     0x00427a         	BRA	_00693_DS_
                                           _00690_DS_:
                                           ;	.line	222; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < LCD_NR_CHARS - amount; i++) lcd_write_char(' ');
00428e   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00696_DS_:
004290   c001     movff   0x001, 0x002     	MOVFF	r0x01, r0x02
004292   f002
004294   6a03     clrf    0x03, 0x0        	CLRF	r0x03
004296   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
004298   0810     sublw   0x10             	SUBLW	0x10
00429a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00429c   0e00     movlw   0x00             	MOVLW	0x00
00429e   5603     subfwb  0x03, 0x1, 0x0   	SUBFWB	r0x03, F
0042a0   c000     movff   0x000, 0x004     	MOVFF	r0x00, r0x04
0042a2   f004
0042a4   0f80     addlw   0x80             	ADDLW	0x80
0042a6   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
0042a8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0042aa   0f80     addlw   0x80             	ADDLW	0x80
0042ac   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
0042ae   e102     bnz     0x0042b4         	BNZ	_00715_DS_
0042b0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0042b2   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
                                           _00715_DS_:
0042b4   e207     bc      0x0042c4         	BC	_00698_DS_
0042b6   0e20     movlw   0x20             	MOVLW	0x20
0042b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0042ba   ec82     call    0x000304, 0x0    	CALL	_lcd_write_char
0042bc   f001
0042be   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0042c0   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
0042c2   d7e6     bra     0x004290         	BRA	_00696_DS_
                                           _00698_DS_:
0042c4   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0042c6   f004
0042c8   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0042ca   f003
0042cc   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0042ce   f002
0042d0   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0042d2   f001
0042d4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0042d6   f000
0042d8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0042da   ffd9
0042dc   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_clear_line	code
                                           _lcd_clear_line:
                                           ;	.line	206; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_clear_line(uint8_t line) {
004a68   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004a6a   ffe5
004a6c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004a6e   ffd9
004a70   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004a72   ffe5
004a74   0e02     movlw   0x02             	MOVLW	0x02
004a76   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004a78   f000
                                           ;	.line	209; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_POS = _lcd_line2index(line);
004a7a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004a7c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004a7e   ec10     call    0x004a20, 0x0    	CALL	__lcd_line2index
004a80   f025
004a82   010f     movlb   0xf              	BANKSEL	_LCD_POS
004a84   6f0a     movwf   0x0a, 0x1        	MOVWF	_LCD_POS, B
004a86   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	210; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
004a88   ec2b     call    0x004e56, 0x0    	CALL	__lcd_restore_cursor
004a8a   f027
                                           ;	.line	212; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < LCD_NR_CHARS; i++) lcd_write_char(' ');
004a8c   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00674_DS_:
004a8e   0e20     movlw   0x20             	MOVLW	0x20
004a90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004a92   ec82     call    0x000304, 0x0    	CALL	_lcd_write_char
004a94   f001
004a96   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004a98   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
004a9a   0e10     movlw   0x10             	MOVLW	0x10
004a9c   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
004a9e   e3f7     bnc     0x004a8e         	BNC	_00674_DS_
                                           ;	.line	214; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
004aa0   ec2b     call    0x004e56, 0x0    	CALL	__lcd_restore_cursor
004aa2   f027
004aa4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004aa6   f000
004aa8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004aaa   ffd9
004aac   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_home	code
                                           _lcd_home:
                                           ;	.line	200; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(LCD_RETURN_HOME);
004d8e   0e02     movlw   0x02             	MOVLW	0x02
004d90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004d92   ec7c     call    0x004cf8, 0x0    	CALL	__lcd_write_command
004d94   f026
004d96   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	201; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
004d98   0ea0     movlw   0xa0             	MOVLW	0xa0
004d9a   ec89     call    0x004512, 0x0    	CALL	_delay100tcy
004d9c   f022
                                           ;	.line	202; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
004d9e   0e50     movlw   0x50             	MOVLW	0x50
004da0   ec89     call    0x004512, 0x0    	CALL	_delay100tcy
004da2   f022
                                           ;	.line	203; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_300us();
004da4   0e30     movlw   0x30             	MOVLW	0x30
004da6   ec89     call    0x004512, 0x0    	CALL	_delay100tcy
004da8   f022
004daa   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_blink_display	code
                                           _lcd_cursor_blink_display:
                                           ;	.line	190; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_blink_display(bit_t cursor, bit_t blink, bit_t display) {
00480c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00480e   ffe5
004810   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004812   ffd9
004814   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004816   ffe5
004818   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00481a   ffe5
00481c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00481e   ffe5
004820   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
004822   ffe5
004824   0e02     movlw   0x02             	MOVLW	0x02
004826   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004828   f000
00482a   0e03     movlw   0x03             	MOVLW	0x03
00482c   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00482e   f001
004830   0e04     movlw   0x04             	MOVLW	0x04
004832   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
004834   f002
                                           ;	.line	192; ../my_sdcc_lib/rosso_sdcc_lcd4.h	reg = LCD_DISPLAY_ONOFF;
004836   0e08     movlw   0x08             	MOVLW	0x08
004838   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
                                           ;	.line	193; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (display) reg = reg + 4;
00483a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00483c   e002     bz      0x004842         	BZ	_00658_DS_
00483e   0e0c     movlw   0x0c             	MOVLW	0x0c
004840   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
                                           _00658_DS_:
                                           ;	.line	194; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (cursor) reg = reg + 2;
004842   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004844   e002     bz      0x00484a         	BZ	_00660_DS_
004846   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
004848   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
                                           _00660_DS_:
                                           ;	.line	195; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (blink) reg = reg + 1;
00484a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00484c   e001     bz      0x004850         	BZ	_00662_DS_
00484e   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
                                           _00662_DS_:
                                           ;	.line	196; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(reg);
004850   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
004852   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004854   ec7c     call    0x004cf8, 0x0    	CALL	__lcd_write_command
004856   f026
004858   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00485a   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00485c   f003
00485e   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
004860   f002
004862   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004864   f001
004866   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004868   f000
00486a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00486c   ffd9
00486e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_clear_screen	code
                                           _lcd_clear_screen:
                                           ;	.line	184; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(LCD_CLEAR_DISPLAY);
004dac   0e01     movlw   0x01             	MOVLW	0x01
004dae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004db0   ec7c     call    0x004cf8, 0x0    	CALL	__lcd_write_command
004db2   f026
004db4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	185; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
004db6   0ea0     movlw   0xa0             	MOVLW	0xa0
004db8   ec89     call    0x004512, 0x0    	CALL	_delay100tcy
004dba   f022
                                           ;	.line	186; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
004dbc   0e50     movlw   0x50             	MOVLW	0x50
004dbe   ec89     call    0x004512, 0x0    	CALL	_delay100tcy
004dc0   f022
                                           ;	.line	187; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_300us();
004dc2   0e30     movlw   0x30             	MOVLW	0x30
004dc4   ec89     call    0x004512, 0x0    	CALL	_delay100tcy
004dc6   f022
004dc8   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_shift_right	code
                                           _lcd_cursor_shift_right:
                                           ;	.line	176; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_shift_right(uint8_t nr) {
004aae   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004ab0   ffe5
004ab2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004ab4   ffd9
004ab6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004ab8   ffe5
004aba   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004abc   ffe5
004abe   0e02     movlw   0x02             	MOVLW	0x02
004ac0   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004ac2   f000
                                           ;	.line	178; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
004ac4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004ac6   e00b     bz      0x004ade         	BZ	_00635_DS_
                                           ;	.line	179; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_CURSOR_SHIFT_R_VAL);
004ac8   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00633_DS_:
004aca   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004acc   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
004ace   e207     bc      0x004ade         	BC	_00635_DS_
004ad0   0e14     movlw   0x14             	MOVLW	0x14
004ad2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004ad4   ec7c     call    0x004cf8, 0x0    	CALL	__lcd_write_command
004ad6   f026
004ad8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004ada   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
004adc   d7f6     bra     0x004aca         	BRA	_00633_DS_
                                           _00635_DS_:
004ade   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004ae0   f001
004ae2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004ae4   f000
004ae6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004ae8   ffd9
004aea   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_shift_left	code
                                           _lcd_cursor_shift_left:
                                           ;	.line	169; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_shift_left(uint8_t nr) {
004aec   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004aee   ffe5
004af0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004af2   ffd9
004af4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004af6   ffe5
004af8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004afa   ffe5
004afc   0e02     movlw   0x02             	MOVLW	0x02
004afe   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004b00   f000
                                           ;	.line	171; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
004b02   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004b04   e00b     bz      0x004b1c         	BZ	_00612_DS_
                                           ;	.line	172; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_CURSOR_SHIFT_L_VAL);
004b06   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00610_DS_:
004b08   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004b0a   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
004b0c   e207     bc      0x004b1c         	BC	_00612_DS_
004b0e   0e10     movlw   0x10             	MOVLW	0x10
004b10   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004b12   ec7c     call    0x004cf8, 0x0    	CALL	__lcd_write_command
004b14   f026
004b16   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004b18   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
004b1a   d7f6     bra     0x004b08         	BRA	_00610_DS_
                                           _00612_DS_:
004b1c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004b1e   f001
004b20   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004b22   f000
004b24   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004b26   ffd9
004b28   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_shift_right	code
                                           _lcd_shift_right:
                                           ;	.line	162; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_shift_right(uint8_t nr) {
004b2a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004b2c   ffe5
004b2e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004b30   ffd9
004b32   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004b34   ffe5
004b36   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004b38   ffe5
004b3a   0e02     movlw   0x02             	MOVLW	0x02
004b3c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004b3e   f000
                                           ;	.line	164; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
004b40   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004b42   e00b     bz      0x004b5a         	BZ	_00589_DS_
                                           ;	.line	165; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_DISPLAY_SHIFT_RIGHT);
004b44   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00587_DS_:
004b46   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004b48   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
004b4a   e207     bc      0x004b5a         	BC	_00589_DS_
004b4c   0e1c     movlw   0x1c             	MOVLW	0x1c
004b4e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004b50   ec7c     call    0x004cf8, 0x0    	CALL	__lcd_write_command
004b52   f026
004b54   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004b56   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
004b58   d7f6     bra     0x004b46         	BRA	_00587_DS_
                                           _00589_DS_:
004b5a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004b5c   f001
004b5e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004b60   f000
004b62   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004b64   ffd9
004b66   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_shift_left	code
                                           _lcd_shift_left:
                                           ;	.line	155; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_shift_left(uint8_t nr) {
004b68   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004b6a   ffe5
004b6c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004b6e   ffd9
004b70   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004b72   ffe5
004b74   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004b76   ffe5
004b78   0e02     movlw   0x02             	MOVLW	0x02
004b7a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004b7c   f000
                                           ;	.line	157; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
004b7e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004b80   e00b     bz      0x004b98         	BZ	_00566_DS_
                                           ;	.line	158; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_DISPLAY_SHIFT_LEFT);
004b82   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00564_DS_:
004b84   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004b86   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
004b88   e207     bc      0x004b98         	BC	_00566_DS_
004b8a   0e18     movlw   0x18             	MOVLW	0x18
004b8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004b8e   ec7c     call    0x004cf8, 0x0    	CALL	__lcd_write_command
004b90   f026
004b92   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004b94   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
004b96   d7f6     bra     0x004b84         	BRA	_00564_DS_
                                           _00566_DS_:
004b98   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004b9a   f001
004b9c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004b9e   f000
004ba0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004ba2   ffd9
004ba4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_position	code
                                           _lcd_cursor_position:
                                           ;	.line	150; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_position(uint8_t line, uint8_t pos) {
004ba6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004ba8   ffe5
004baa   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004bac   ffd9
004bae   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004bb0   ffe5
004bb2   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004bb4   ffe5
004bb6   0e02     movlw   0x02             	MOVLW	0x02
004bb8   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004bba   f000
004bbc   0e03     movlw   0x03             	MOVLW	0x03
004bbe   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
004bc0   f001
                                           ;	.line	151; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_POS = pos + _lcd_line2index(line);
004bc2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004bc4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004bc6   ec10     call    0x004a20, 0x0    	CALL	__lcd_line2index
004bc8   f025
004bca   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004bcc   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
004bce   010f     movlb   0xf              	BANKSEL	_LCD_POS
004bd0   6f0a     movwf   0x0a, 0x1        	MOVWF	_LCD_POS, B
                                           ;	.line	152; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
004bd2   ec2b     call    0x004e56, 0x0    	CALL	__lcd_restore_cursor
004bd4   f027
004bd6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004bd8   f001
004bda   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004bdc   f000
004bde   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004be0   ffd9
004be2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_write_strF	code
                                           _lcd_write_strF:
                                           ;	.line	143; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_write_strF(const uint8_t *data){
00473c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00473e   ffe5
004740   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004742   ffd9
004744   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004746   ffe5
004748   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00474a   ffe5
00474c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00474e   ffe5
004750   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
004752   ffe5
004754   0e02     movlw   0x02             	MOVLW	0x02
004756   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004758   f000
00475a   0e03     movlw   0x03             	MOVLW	0x03
00475c   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00475e   f001
004760   0e04     movlw   0x04             	MOVLW	0x04
004762   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
004764   f002
                                           _00538_DS_:
                                           ;	.line	144; ../my_sdcc_lib/rosso_sdcc_lcd4.h	while(*data){
004766   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
004768   ffe9
00476a   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
00476c   fff3
00476e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
004770   ecb6     call    0x004d6c, 0x0    	CALL	__gptrget1
004772   f026
004774   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
004776   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
004778   e00a     bz      0x00478e         	BZ	_00541_DS_
                                           ;	.line	145; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_data(*data);
00477a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00477c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00477e   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
004780   f026
004782   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	146; ../my_sdcc_lib/rosso_sdcc_lcd4.h	*data++;
004784   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
004786   e3ef     bnc     0x004766         	BNC	_00538_DS_
004788   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
00478a   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
                                           _00550_DS_:
00478c   d7ec     bra     0x004766         	BRA	_00538_DS_
                                           _00541_DS_:
00478e   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
004790   f003
004792   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
004794   f002
004796   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004798   f001
00479a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00479c   f000
00479e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0047a0   ffd9
0047a2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_write_str	code
                                           _lcd_write_str:
                                           ;	.line	136; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_write_str(uint8_t *data){
0047a4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0047a6   ffe5
0047a8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0047aa   ffd9
0047ac   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0047ae   ffe5
0047b0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0047b2   ffe5
0047b4   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0047b6   ffe5
0047b8   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0047ba   ffe5
0047bc   0e02     movlw   0x02             	MOVLW	0x02
0047be   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0047c0   f000
0047c2   0e03     movlw   0x03             	MOVLW	0x03
0047c4   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0047c6   f001
0047c8   0e04     movlw   0x04             	MOVLW	0x04
0047ca   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0047cc   f002
                                           _00521_DS_:
                                           ;	.line	137; ../my_sdcc_lib/rosso_sdcc_lcd4.h	while(*data){
0047ce   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0047d0   ffe9
0047d2   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0047d4   fff3
0047d6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0047d8   ecb6     call    0x004d6c, 0x0    	CALL	__gptrget1
0047da   f026
0047dc   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0047de   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0047e0   e00a     bz      0x0047f6         	BZ	_00524_DS_
                                           ;	.line	138; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_data(*data);
0047e2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0047e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0047e6   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
0047e8   f026
0047ea   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	139; ../my_sdcc_lib/rosso_sdcc_lcd4.h	*data++;
0047ec   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
0047ee   e3ef     bnc     0x0047ce         	BNC	_00521_DS_
0047f0   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
0047f2   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
                                           _00533_DS_:
0047f4   d7ec     bra     0x0047ce         	BRA	_00521_DS_
                                           _00524_DS_:
0047f6   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0047f8   f003
0047fa   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0047fc   f002
0047fe   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004800   f001
004802   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004804   f000
004806   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004808   ffd9
00480a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_write_char	code
                                           _lcd_write_char:
                                           ;	.line	132; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_write_char(uint8_t data) {
000304   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000306   ffe5
000308   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00030a   ffd9
00030c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00030e   ffe5
000310   0e02     movlw   0x02             	MOVLW	0x02
000312   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000314   f000
                                           ;	.line	133; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_data(data);
000316   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000318   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00031a   ec90     call    0x004d20, 0x0    	CALL	__lcd_write_data
00031c   f026
00031e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000320   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000322   f000
000324   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000326   ffd9
000328   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_restore_cursor	code
                                           __lcd_restore_cursor:
                                           ;	.line	129; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(LCD_SET_DDRAM_ADDRESS | LCD_POS);
004e56   0e80     movlw   0x80             	MOVLW	0x80
004e58   010f     movlb   0xf              	BANKSEL	_LCD_POS
004e5a   110a     iorwf   0x0a, 0x0, 0x1   	IORWF	_LCD_POS, W, B
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
004e5c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004e5e   ec7c     call    0x004cf8, 0x0    	CALL	__lcd_write_command
004e60   f026
004e62   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004e64   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_line2index	code
                                           __lcd_line2index:
                                           ;	.line	117; ../my_sdcc_lib/rosso_sdcc_lcd4.h	uint8_t _lcd_line2index(uint8_t line) {
004a20   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004a22   ffe5
004a24   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004a26   ffd9
004a28   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004a2a   ffe5
004a2c   0e02     movlw   0x02             	MOVLW	0x02
004a2e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004a30   f000
                                           ;	.line	119; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (line < LCD_NR_LINES) {
004a32   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
004a34   e213     bc      0x004a5c         	BC	_00482_DS_
                                           ;	.line	120; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (line == 0) return 0x00;
004a36   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004a38   e102     bnz     0x004a3e         	BNZ	_00479_DS_
004a3a   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
004a3c   d010     bra     0x004a5e         	BRA	_00483_DS_
                                           _00479_DS_:
                                           ;	.line	121; ../my_sdcc_lib/rosso_sdcc_lcd4.h	else if (line == 1) return 0x40;
004a3e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004a40   0a01     xorlw   0x01             	XORLW	0x01
004a42   e102     bnz     0x004a48         	BNZ	_00476_DS_
004a44   0e40     movlw   0x40             	MOVLW	0x40
004a46   d00b     bra     0x004a5e         	BRA	_00483_DS_
                                           _00476_DS_:
                                           ;	.line	122; ../my_sdcc_lib/rosso_sdcc_lcd4.h	else if (line == 2) return 0x00 + LCD_NR_CHARS;
004a48   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004a4a   0a02     xorlw   0x02             	XORLW	0x02
004a4c   e102     bnz     0x004a52         	BNZ	_00473_DS_
004a4e   0e10     movlw   0x10             	MOVLW	0x10
004a50   d006     bra     0x004a5e         	BRA	_00483_DS_
                                           _00473_DS_:
                                           ;	.line	123; ../my_sdcc_lib/rosso_sdcc_lcd4.h	else if (line == 3) return 0x40 + LCD_NR_CHARS;
004a52   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004a54   0a03     xorlw   0x03             	XORLW	0x03
004a56   e102     bnz     0x004a5c         	BNZ	_00482_DS_
004a58   0e50     movlw   0x50             	MOVLW	0x50
004a5a   d001     bra     0x004a5e         	BRA	_00483_DS_
                                           _00482_DS_:
                                           ;	.line	125; ../my_sdcc_lib/rosso_sdcc_lcd4.h	return 0x00;
004a5c   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
                                           _00483_DS_:
004a5e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004a60   f000
004a62   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004a64   ffd9
004a66   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_write_command	code
                                           __lcd_write_command:
                                           ;	.line	112; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void _lcd_write_command(uint8_t value) {
004cf8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004cfa   ffe5
004cfc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004cfe   ffd9
004d00   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004d02   ffe5
004d04   0e02     movlw   0x02             	MOVLW	0x02
004d06   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004d08   f000
                                           ;	.line	113; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS = 0; // select command mode
004d0a   928d     bcf     0x8d, 0x1, 0x0   	BCF	_LATEbits, 1
                                           ;	.line	114; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write(value); // write byte
004d0c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004d0e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004d10   ec6f     call    0x0042de, 0x0    	CALL	___lcd_write
004d12   f021
004d14   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004d16   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004d18   f000
004d1a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004d1c   ffd9
004d1e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_write_data	code
                                           __lcd_write_data:
                                           ;	.line	107; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void _lcd_write_data(uint8_t value) {
004d20   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004d22   ffe5
004d24   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004d26   ffd9
004d28   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004d2a   ffe5
004d2c   0e02     movlw   0x02             	MOVLW	0x02
004d2e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004d30   f000
                                           ;	.line	108; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS = 1; // select data mode
004d32   828d     bsf     0x8d, 0x1, 0x0   	BSF	_LATEbits, 1
                                           ;	.line	109; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write(value); // write byte
004d34   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004d36   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004d38   ec6f     call    0x0042de, 0x0    	CALL	___lcd_write
004d3a   f021
004d3c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004d3e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004d40   f000
004d42   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004d44   ffd9
004d46   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main____lcd_write	code
                                           ___lcd_write:
                                           ;	.line	100; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void __lcd_write(uint8_t value) {
0042de   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0042e0   ffe5
0042e2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0042e4   ffd9
0042e6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0042e8   ffe5
0042ea   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0042ec   ffe5
0042ee   0e02     movlw   0x02             	MOVLW	0x02
0042f0   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0042f2   f000
                                           ;	.line	101; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(value >> 4); // write high nibble
0042f4   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0042f6   0b0f     andlw   0x0f             	ANDLW	0x0f
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x01, W
0042f8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0042fa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0042fc   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
0042fe   f022
004300   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	102; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(value); // write low nibble
004302   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004304   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004306   eca8     call    0x004550, 0x0    	CALL	___lcd_write_nibble
004308   f022
00430a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	103; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
00430c   0e38     movlw   0x38             	MOVLW	0x38
00430e   ec9c     call    0x004538, 0x0    	CALL	_delay10tcy
004310   f022
004312   0000     nop                      	nop	
004314   0000     nop                      	nop	
004316   0000     nop                      	nop	
004318   0000     nop                      	nop	
00431a   0000     nop                      	nop	
00431c   0000     nop                      	nop	
00431e   0000     nop                      	nop	
004320   0000     nop                      	nop	
004322   0000     nop                      	nop	
004324   0000     nop                      	nop	
004326   0000     nop                      	nop	
004328   0000     nop                      	nop	
00432a   0000     nop                      	nop	
00432c   0000     nop                      	nop	
00432e   0000     nop                      	nop	
004330   0000     nop                      	nop	
004332   0000     nop                      	nop	
004334   0000     nop                      	nop	
004336   0000     nop                      	nop	
004338   0000     nop                      	nop	
00433a   0000     nop                      	nop	
00433c   0000     nop                      	nop	
00433e   0000     nop                      	nop	
004340   0000     nop                      	nop	
004342   0000     nop                      	nop	
004344   0000     nop                      	nop	
004346   0000     nop                      	nop	
004348   0000     nop                      	nop	
00434a   0000     nop                      	nop	
00434c   0000     nop                      	nop	
00434e   0000     nop                      	nop	
004350   0000     nop                      	nop	
004352   0000     nop                      	nop	
004354   0000     nop                      	nop	
004356   0000     nop                      	nop	
004358   0000     nop                      	nop	
00435a   0000     nop                      	nop	
00435c   0000     nop                      	nop	
00435e   0000     nop                      	nop	
004360   0000     nop                      	nop	
004362   0000     nop                      	nop	
004364   0000     nop                      	nop	
004366   0000     nop                      	nop	
004368   0000     nop                      	nop	
00436a   0000     nop                      	nop	
00436c   0000     nop                      	nop	
00436e   0000     nop                      	nop	
004370   0000     nop                      	nop	
004372   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004374   f001
004376   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004378   f000
00437a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00437c   ffd9
00437e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main____lcd_write_nibble	code
                                           ___lcd_write_nibble:
                                           ;	.line	88; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void __lcd_write_nibble(uint8_t value) {
004550   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004552   ffe5
004554   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004556   ffd9
004558   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00455a   ffe5
00455c   0e02     movlw   0x02             	MOVLW	0x02
00455e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004560   f000
                                           ;	.line	90; ../my_sdcc_lib/rosso_sdcc_lcd4.h	nibble.val = value;
004562   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004564   010f     movlb   0xf              	BANKSEL	___lcd_write_nibble_nibble_1_84
004566   6f09     movwf   0x09, 0x1        	MOVWF	___lcd_write_nibble_nibble_1_84, B
                                           ;	.line	91; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D4 = nibble.bits.b0;
004568   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
00456a   b109     btfsc   0x09, 0x0, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_84, 0, B
00456c   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
00456e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004570   0b01     andlw   0x01             	ANDLW	0x01
004572   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
004574   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
004576   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
004578   0bef     andlw   0xef             	ANDLW	0xef
00457a   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
00457c   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	92; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D5 = nibble.bits.b1;
00457e   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
004580   b309     btfsc   0x09, 0x1, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_84, 1, B
004582   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
004584   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004586   0b01     andlw   0x01             	ANDLW	0x01
004588   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
00458a   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
00458c   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
00458e   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
004590   0bdf     andlw   0xdf             	ANDLW	0xdf
004592   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
004594   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	93; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D6 = nibble.bits.b2;
004596   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
004598   b509     btfsc   0x09, 0x2, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_84, 2, B
00459a   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
00459c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00459e   0b01     andlw   0x01             	ANDLW	0x01
0045a0   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
0045a2   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
0045a4   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
0045a6   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
0045a8   0bbf     andlw   0xbf             	ANDLW	0xbf
0045aa   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
0045ac   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	94; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D7 = nibble.bits.b3;
0045ae   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
0045b0   b709     btfsc   0x09, 0x3, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_84, 3, B
0045b2   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
0045b4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0045b6   0b01     andlw   0x01             	ANDLW	0x01
0045b8   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
0045ba   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
0045bc   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
0045be   0b7f     andlw   0x7f             	ANDLW	0x7f
0045c0   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
0045c2   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	95; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_EN = 1;
0045c4   848d     bsf     0x8d, 0x2, 0x0   	BSF	_LATEbits, 2
0045c6   0000     nop                      	nop	
0045c8   0000     nop                      	nop	
0045ca   0000     nop                      	nop	
0045cc   0000     nop                      	nop	
0045ce   0000     nop                      	nop	
0045d0   0000     nop                      	nop	
0045d2   0000     nop                      	nop	
0045d4   0000     nop                      	nop	
                                           ;	.line	97; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_EN = 0;
0045d6   948d     bcf     0x8d, 0x2, 0x0   	BCF	_LATEbits, 2
0045d8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0045da   f000
0045dc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0045de   ffd9
0045e0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__pcf8583_stop_alarm	code
                                           _pcf8583_stop_alarm:
                                           ;	.line	368; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	cfg.val = pcf8583_read_reg(PCF8583_CTRL_STATUS_REG);
004c22   0e00     movlw   0x00             	MOVLW	0x00
004c24   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
004c26   ecbe     call    0x00497c, 0x0    	CALL	_pcf8583_read_reg
004c28   f024
004c2a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004c2c   010f     movlb   0xf              	BANKSEL	_pcf8583_stop_alarm_cfg_1_82
004c2e   6f08     movwf   0x08, 0x1        	MOVWF	_pcf8583_stop_alarm_cfg_1_82, B
                                           ;	.line	369; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	cfg.bits.b0 = 0; // clears timer alarm flag
004c30   9108     bcf     0x08, 0x0, 0x1   	BCF	_pcf8583_stop_alarm_cfg_1_82, 0, B
                                           ;	.line	370; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	cfg.bits.b1 = 0; // clears clock alarm flag
004c32   9308     bcf     0x08, 0x1, 0x1   	BCF	_pcf8583_stop_alarm_cfg_1_82, 1, B
                                           ;	.line	373; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_start();
004c34   ec0b     call    0x004e16, 0x0    	CALL	_i2c_start
004c36   f027
                                           ;	.line	374; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_W_ADDR);
004c38   0ea2     movlw   0xa2             	MOVLW	0xa2
004c3a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004c3c   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
004c3e   f026
004c40   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	375; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_CTRL_STATUS_REG);
004c42   0e00     movlw   0x00             	MOVLW	0x00
004c44   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
004c46   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
004c48   f026
004c4a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004c4c   010f     movlb   0xf              	BANKSEL	_pcf8583_stop_alarm_cfg_1_82
                                           ;	.line	376; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(cfg.val);
004c4e   5108     movf    0x08, 0x0, 0x1   	MOVF	_pcf8583_stop_alarm_cfg_1_82, W, B
004c50   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004c52   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
004c54   f026
004c56   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	377; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_stop();
004c58   ecf3     call    0x004de6, 0x0    	CALL	_i2c_stop
004c5a   f026
004c5c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__pcf8583_set_alarm_time	code
                                           _pcf8583_set_alarm_time:
                                           ;	.line	341; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	void pcf8583_set_alarm_time(uint8_t hours, uint8_t minutes, uint8_t seconds) {
00441e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004420   ffe5
004422   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004424   ffd9
004426   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004428   ffe5
00442a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00442c   ffe5
00442e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
004430   ffe5
004432   0e02     movlw   0x02             	MOVLW	0x02
004434   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004436   f000
004438   0e03     movlw   0x03             	MOVLW	0x03
00443a   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00443c   f001
00443e   0e04     movlw   0x04             	MOVLW	0x04
004440   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
004442   f002
                                           ;	.line	345; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_start();
004444   ec0b     call    0x004e16, 0x0    	CALL	_i2c_start
004446   f027
                                           ;	.line	346; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_W_ADDR);
004448   0ea2     movlw   0xa2             	MOVLW	0xa2
00444a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00444c   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
00444e   f026
004450   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	347; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_ALARM_100S_REG);
004452   0e09     movlw   0x09             	MOVLW	0x09
004454   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004456   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
004458   f026
00445a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	348; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(dectobcd(0));
00445c   0e00     movlw   0x00             	MOVLW	0x00
00445e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
004460   ec38     call    0x004870, 0x0    	CALL	_dectobcd
004462   f024
004464   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004466   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004468   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
00446a   f026
00446c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	349; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(dectobcd(seconds));
00446e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
004470   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004472   ec38     call    0x004870, 0x0    	CALL	_dectobcd
004474   f024
004476   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004478   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00447a   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
00447c   f026
00447e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	350; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(dectobcd(minutes));
004480   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
004482   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004484   ec38     call    0x004870, 0x0    	CALL	_dectobcd
004486   f024
004488   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00448a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00448c   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
00448e   f026
004490   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	351; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(dectobcd(hours));
004492   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004494   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004496   ec38     call    0x004870, 0x0    	CALL	_dectobcd
004498   f024
00449a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00449c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00449e   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
0044a0   f026
0044a2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	352; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_stop();
0044a4   ecf3     call    0x004de6, 0x0    	CALL	_i2c_stop
0044a6   f026
0044a8   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0044aa   f002
0044ac   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0044ae   f001
0044b0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0044b2   f000
0044b4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0044b6   ffd9
0044b8   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__pcf8583_set_alarm_weekdays	code
                                           _pcf8583_set_alarm_weekdays:
                                           ;	.line	316; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	void pcf8583_set_alarm_weekdays(bit_t d0, bit_t d1, bit_t d2, bit_t d3, bit_t d4, bit_t d5, bit_t d6) {
003d58   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003d5a   ffe5
003d5c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003d5e   ffd9
003d60   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003d62   ffe5
003d64   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003d66   ffe5
003d68   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003d6a   ffe5
003d6c   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003d6e   ffe5
003d70   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
003d72   ffe5
003d74   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
003d76   ffe5
003d78   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
003d7a   ffe5
003d7c   0e02     movlw   0x02             	MOVLW	0x02
003d7e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003d80   f000
003d82   0e03     movlw   0x03             	MOVLW	0x03
003d84   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003d86   f001
003d88   0e04     movlw   0x04             	MOVLW	0x04
003d8a   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
003d8c   f002
003d8e   0e05     movlw   0x05             	MOVLW	0x05
003d90   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
003d92   f003
003d94   0e06     movlw   0x06             	MOVLW	0x06
003d96   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
003d98   f004
003d9a   0e07     movlw   0x07             	MOVLW	0x07
003d9c   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
003d9e   f005
003da0   0e08     movlw   0x08             	MOVLW	0x08
003da2   cfdb     movff   0xfdb, 0x006     	MOVFF	PLUSW2, r0x06
003da4   f006
                                           ;	.line	319; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	wd.bits.b0 = d0;
003da6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003da8   0b01     andlw   0x01             	ANDLW	0x01
003daa   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
003dac   010f     movlb   0xf              	BANKSEL	_pcf8583_set_alarm_weekdays_wd_1_78
003dae   5107     movf    0x07, 0x0, 0x1   	MOVF	_pcf8583_set_alarm_weekdays_wd_1_78, W, B
003db0   0bfe     andlw   0xfe             	ANDLW	0xfe
003db2   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
                                           ; removed redundant BANKSEL
003db4   6f07     movwf   0x07, 0x1        	MOVWF	_pcf8583_set_alarm_weekdays_wd_1_78, B
                                           ;	.line	320; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	wd.bits.b1 = d1;
003db6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003db8   0b01     andlw   0x01             	ANDLW	0x01
003dba   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
003dbc   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
                                           ; removed redundant BANKSEL
003dbe   5107     movf    0x07, 0x0, 0x1   	MOVF	_pcf8583_set_alarm_weekdays_wd_1_78, W, B
003dc0   0bfd     andlw   0xfd             	ANDLW	0xfd
003dc2   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
                                           ; removed redundant BANKSEL
003dc4   6f07     movwf   0x07, 0x1        	MOVWF	_pcf8583_set_alarm_weekdays_wd_1_78, B
                                           ;	.line	321; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	wd.bits.b2 = d2;
003dc6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003dc8   0b01     andlw   0x01             	ANDLW	0x01
003dca   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
003dcc   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
003dce   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
                                           ; removed redundant BANKSEL
003dd0   5107     movf    0x07, 0x0, 0x1   	MOVF	_pcf8583_set_alarm_weekdays_wd_1_78, W, B
003dd2   0bfb     andlw   0xfb             	ANDLW	0xfb
003dd4   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
                                           ; removed redundant BANKSEL
003dd6   6f07     movwf   0x07, 0x1        	MOVWF	_pcf8583_set_alarm_weekdays_wd_1_78, B
                                           ;	.line	322; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	wd.bits.b3 = d3;
003dd8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003dda   0b01     andlw   0x01             	ANDLW	0x01
003ddc   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
003dde   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
003de0   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
                                           ; removed redundant BANKSEL
003de2   5107     movf    0x07, 0x0, 0x1   	MOVF	_pcf8583_set_alarm_weekdays_wd_1_78, W, B
003de4   0bf7     andlw   0xf7             	ANDLW	0xf7
003de6   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
                                           ; removed redundant BANKSEL
003de8   6f07     movwf   0x07, 0x1        	MOVWF	_pcf8583_set_alarm_weekdays_wd_1_78, B
                                           ;	.line	323; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	wd.bits.b4 = d4;
003dea   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003dec   0b01     andlw   0x01             	ANDLW	0x01
003dee   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
003df0   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
                                           ; removed redundant BANKSEL
003df2   5107     movf    0x07, 0x0, 0x1   	MOVF	_pcf8583_set_alarm_weekdays_wd_1_78, W, B
003df4   0bef     andlw   0xef             	ANDLW	0xef
003df6   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
                                           ; removed redundant BANKSEL
003df8   6f07     movwf   0x07, 0x1        	MOVWF	_pcf8583_set_alarm_weekdays_wd_1_78, B
                                           ;	.line	324; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	wd.bits.b5 = d5;
003dfa   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
003dfc   0b01     andlw   0x01             	ANDLW	0x01
003dfe   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
003e00   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
003e02   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
                                           ; removed redundant BANKSEL
003e04   5107     movf    0x07, 0x0, 0x1   	MOVF	_pcf8583_set_alarm_weekdays_wd_1_78, W, B
003e06   0bdf     andlw   0xdf             	ANDLW	0xdf
003e08   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
                                           ; removed redundant BANKSEL
003e0a   6f07     movwf   0x07, 0x1        	MOVWF	_pcf8583_set_alarm_weekdays_wd_1_78, B
                                           ;	.line	325; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	wd.bits.b6 = d6;
003e0c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
003e0e   0b01     andlw   0x01             	ANDLW	0x01
003e10   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
003e12   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
003e14   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
                                           ; removed redundant BANKSEL
003e16   5107     movf    0x07, 0x0, 0x1   	MOVF	_pcf8583_set_alarm_weekdays_wd_1_78, W, B
003e18   0bbf     andlw   0xbf             	ANDLW	0xbf
003e1a   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
                                           ; removed redundant BANKSEL
003e1c   6f07     movwf   0x07, 0x1        	MOVWF	_pcf8583_set_alarm_weekdays_wd_1_78, B
                                           ;	.line	327; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_start();
003e1e   ec0b     call    0x004e16, 0x0    	CALL	_i2c_start
003e20   f027
                                           ;	.line	328; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_W_ADDR);
003e22   0ea2     movlw   0xa2             	MOVLW	0xa2
003e24   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003e26   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003e28   f026
003e2a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	329; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_ALARM_MONTHS_REG);
003e2c   0e0e     movlw   0x0e             	MOVLW	0x0e
003e2e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003e30   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003e32   f026
003e34   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003e36   010f     movlb   0xf              	BANKSEL	_pcf8583_set_alarm_weekdays_wd_1_78
                                           ;	.line	330; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(wd.val);
003e38   5107     movf    0x07, 0x0, 0x1   	MOVF	_pcf8583_set_alarm_weekdays_wd_1_78, W, B
003e3a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003e3c   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003e3e   f026
003e40   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	331; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_stop();
003e42   ecf3     call    0x004de6, 0x0    	CALL	_i2c_stop
003e44   f026
003e46   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
003e48   f006
003e4a   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
003e4c   f005
003e4e   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
003e50   f004
003e52   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003e54   f003
003e56   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003e58   f002
003e5a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003e5c   f001
003e5e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003e60   f000
003e62   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003e64   ffd9
003e66   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__pcf8583_en_dis_alarm	code
                                           _pcf8583_en_dis_alarm:
                                           ;	.line	267; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	void pcf8583_en_dis_alarm(ALARMTYPE atype) {
003f38   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003f3a   ffe5
003f3c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003f3e   ffd9
003f40   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003f42   ffe5
003f44   0e02     movlw   0x02             	MOVLW	0x02
003f46   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003f48   f000
                                           ;	.line	270; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	cfg.val = pcf8583_read_reg(PCF8583_CTRL_STATUS_REG);
003f4a   0e00     movlw   0x00             	MOVLW	0x00
003f4c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003f4e   ecbe     call    0x00497c, 0x0    	CALL	_pcf8583_read_reg
003f50   f024
003f52   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003f54   010f     movlb   0xf              	BANKSEL	_pcf8583_en_dis_alarm_cfg_1_74
003f56   6f05     movwf   0x05, 0x1        	MOVWF	_pcf8583_en_dis_alarm_cfg_1_74, B
                                           ;	.line	271; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	if (atype == PCF8583_NO_ALARM) cfg.bits.b2 = 0;
003f58   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003f5a   e102     bnz     0x003f60         	BNZ	_00426_DS_
                                           ; removed redundant BANKSEL
003f5c   9505     bcf     0x05, 0x2, 0x1   	BCF	_pcf8583_en_dis_alarm_cfg_1_74, 2, B
003f5e   d024     bra     0x003fa8         	BRA	_00427_DS_
                                           _00426_DS_:
003f60   010f     movlb   0xf              	BANKSEL	_pcf8583_en_dis_alarm_cfg_1_74
                                           ;	.line	273; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	cfg.bits.b0 = 0;
003f62   9105     bcf     0x05, 0x0, 0x1   	BCF	_pcf8583_en_dis_alarm_cfg_1_74, 0, B
                                           ;	.line	274; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	cfg.bits.b1 = 0;
003f64   9305     bcf     0x05, 0x1, 0x1   	BCF	_pcf8583_en_dis_alarm_cfg_1_74, 1, B
                                           ;	.line	275; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	cfg.bits.b2 = 1;
003f66   8505     bsf     0x05, 0x2, 0x1   	BSF	_pcf8583_en_dis_alarm_cfg_1_74, 2, B
003f68   010f     movlb   0xf              	BANKSEL	_pcf8583_en_dis_alarm_alarmcfg_1_74
                                           ;	.line	276; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	alarmcfg.val = 0;
003f6a   6b06     clrf    0x06, 0x1        	CLRF	_pcf8583_en_dis_alarm_alarmcfg_1_74, B
                                           ;	.line	277; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	alarmcfg.bits.b4 = atype;
003f6c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003f6e   0b01     andlw   0x01             	ANDLW	0x01
003f70   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
003f72   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
                                           ; removed redundant BANKSEL
003f74   5106     movf    0x06, 0x0, 0x1   	MOVF	_pcf8583_en_dis_alarm_alarmcfg_1_74, W, B
003f76   0bef     andlw   0xef             	ANDLW	0xef
003f78   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
                                           ; removed redundant BANKSEL
003f7a   6f06     movwf   0x06, 0x1        	MOVWF	_pcf8583_en_dis_alarm_alarmcfg_1_74, B
                                           ;	.line	278; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	alarmcfg.bits.b5 = atype >> 1;
003f7c   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
003f7e   0b7f     andlw   0x7f             	ANDLW	0x7f
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x01, W
003f80   0b01     andlw   0x01             	ANDLW	0x01
003f82   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
003f84   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
003f86   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
                                           ; removed redundant BANKSEL
003f88   5106     movf    0x06, 0x0, 0x1   	MOVF	_pcf8583_en_dis_alarm_alarmcfg_1_74, W, B
003f8a   0bdf     andlw   0xdf             	ANDLW	0xdf
003f8c   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
                                           ; removed redundant BANKSEL
003f8e   6f06     movwf   0x06, 0x1        	MOVWF	_pcf8583_en_dis_alarm_alarmcfg_1_74, B
                                           ;	.line	279; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	alarmcfg.bits.b6 = atype >> 2;
003f90   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
003f92   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
003f94   0b3f     andlw   0x3f             	ANDLW	0x3f
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x01, W
003f96   0b01     andlw   0x01             	ANDLW	0x01
003f98   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
003f9a   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
003f9c   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
                                           ; removed redundant BANKSEL
003f9e   5106     movf    0x06, 0x0, 0x1   	MOVF	_pcf8583_en_dis_alarm_alarmcfg_1_74, W, B
003fa0   0bbf     andlw   0xbf             	ANDLW	0xbf
003fa2   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
                                           ; removed redundant BANKSEL
003fa4   6f06     movwf   0x06, 0x1        	MOVWF	_pcf8583_en_dis_alarm_alarmcfg_1_74, B
                                           ;	.line	280; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	alarmcfg.bits.b7 = 1;
003fa6   8f06     bsf     0x06, 0x7, 0x1   	BSF	_pcf8583_en_dis_alarm_alarmcfg_1_74, 7, B
                                           _00427_DS_:
                                           ;	.line	284; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_start();
003fa8   ec0b     call    0x004e16, 0x0    	CALL	_i2c_start
003faa   f027
                                           ;	.line	285; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_W_ADDR);
003fac   0ea2     movlw   0xa2             	MOVLW	0xa2
003fae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003fb0   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003fb2   f026
003fb4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	286; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_CTRL_STATUS_REG);
003fb6   0e00     movlw   0x00             	MOVLW	0x00
003fb8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003fba   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003fbc   f026
003fbe   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003fc0   010f     movlb   0xf              	BANKSEL	_pcf8583_en_dis_alarm_cfg_1_74
                                           ;	.line	287; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(cfg.val);
003fc2   5105     movf    0x05, 0x0, 0x1   	MOVF	_pcf8583_en_dis_alarm_cfg_1_74, W, B
003fc4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003fc6   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003fc8   f026
003fca   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	288; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_stop();
003fcc   ecf3     call    0x004de6, 0x0    	CALL	_i2c_stop
003fce   f026
                                           ;	.line	297; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	if (atype != 0) {
003fd0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003fd2   e014     bz      0x003ffc         	BZ	_00430_DS_
                                           ;	.line	300; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_start();
003fd4   ec0b     call    0x004e16, 0x0    	CALL	_i2c_start
003fd6   f027
                                           ;	.line	301; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_W_ADDR);
003fd8   0ea2     movlw   0xa2             	MOVLW	0xa2
003fda   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003fdc   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003fde   f026
003fe0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	302; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_ALARM_CONTROL_REG);
003fe2   0e08     movlw   0x08             	MOVLW	0x08
003fe4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003fe6   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003fe8   f026
003fea   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003fec   010f     movlb   0xf              	BANKSEL	_pcf8583_en_dis_alarm_alarmcfg_1_74
                                           ;	.line	303; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(alarmcfg.val);
003fee   5106     movf    0x06, 0x0, 0x1   	MOVF	_pcf8583_en_dis_alarm_alarmcfg_1_74, W, B
003ff0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003ff2   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003ff4   f026
003ff6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	304; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_stop();
003ff8   ecf3     call    0x004de6, 0x0    	CALL	_i2c_stop
003ffa   f026
                                           _00430_DS_:
003ffc   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003ffe   f000
004000   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004002   ffd9
004004   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__pcf8583_read_reg	code
                                           _pcf8583_read_reg:
                                           ;	.line	238; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	uint8_t pcf8583_read_reg(uint8_t reg) {
00497c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00497e   ffe5
004980   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004982   ffd9
004984   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004986   ffe5
004988   0e02     movlw   0x02             	MOVLW	0x02
00498a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00498c   f000
                                           ;	.line	241; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_start();
00498e   ec0b     call    0x004e16, 0x0    	CALL	_i2c_start
004990   f027
                                           ;	.line	242; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_W_ADDR);
004992   0ea2     movlw   0xa2             	MOVLW	0xa2
004994   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004996   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
004998   f026
00499a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	243; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(reg);
00499c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00499e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0049a0   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
0049a2   f026
0049a4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	244; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_restart();
0049a6   ecff     call    0x004dfe, 0x0    	CALL	_i2c_restart
0049a8   f026
                                           ;	.line	245; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_R_ADDR);
0049aa   0ea3     movlw   0xa3             	MOVLW	0xa3
0049ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0049ae   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
0049b0   f026
0049b2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	246; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	tmp = i2c_read(0);
0049b4   0e00     movlw   0x00             	MOVLW	0x00
0049b6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0049b8   ece8     call    0x0049d0, 0x0    	CALL	_i2c_read
0049ba   f024
0049bc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0049be   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	247; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_stop();
0049c0   ecf3     call    0x004de6, 0x0    	CALL	_i2c_stop
0049c2   f026
                                           ;	.line	257; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	return (tmp);
0049c4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0049c6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0049c8   f000
0049ca   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0049cc   ffd9
0049ce   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__pcf8583_get_datetime	code
                                           _pcf8583_get_datetime:
                                           ;	.line	187; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	void pcf8583_get_datetime(uint8_t * hr, uint8_t * mn, uint8_t * sc, uint8_t * dow, uint8_t * dy, uint8_t * mt, uint8_t * lp, uint8_t * ct, uint8_t * yr) {
002cbc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002cbe   ffe5
002cc0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002cc2   ffd9
002cc4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002cc6   ffe5
002cc8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002cca   ffe5
002ccc   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002cce   ffe5
002cd0   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002cd2   ffe5
002cd4   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002cd6   ffe5
002cd8   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
002cda   ffe5
002cdc   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
002cde   ffe5
002ce0   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002ce2   ffe5
002ce4   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
002ce6   ffe5
002ce8   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
002cea   ffe5
002cec   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
002cee   ffe5
002cf0   c00b     movff   0x00b, 0xfe5     	MOVFF	r0x0b, POSTDEC1
002cf2   ffe5
002cf4   c00c     movff   0x00c, 0xfe5     	MOVFF	r0x0c, POSTDEC1
002cf6   ffe5
002cf8   c00d     movff   0x00d, 0xfe5     	MOVFF	r0x0d, POSTDEC1
002cfa   ffe5
002cfc   c00e     movff   0x00e, 0xfe5     	MOVFF	r0x0e, POSTDEC1
002cfe   ffe5
002d00   c00f     movff   0x00f, 0xfe5     	MOVFF	r0x0f, POSTDEC1
002d02   ffe5
002d04   c010     movff   0x010, 0xfe5     	MOVFF	r0x10, POSTDEC1
002d06   ffe5
002d08   c011     movff   0x011, 0xfe5     	MOVFF	r0x11, POSTDEC1
002d0a   ffe5
002d0c   c012     movff   0x012, 0xfe5     	MOVFF	r0x12, POSTDEC1
002d0e   ffe5
002d10   c013     movff   0x013, 0xfe5     	MOVFF	r0x13, POSTDEC1
002d12   ffe5
002d14   c014     movff   0x014, 0xfe5     	MOVFF	r0x14, POSTDEC1
002d16   ffe5
002d18   c015     movff   0x015, 0xfe5     	MOVFF	r0x15, POSTDEC1
002d1a   ffe5
002d1c   c016     movff   0x016, 0xfe5     	MOVFF	r0x16, POSTDEC1
002d1e   ffe5
002d20   c017     movff   0x017, 0xfe5     	MOVFF	r0x17, POSTDEC1
002d22   ffe5
002d24   c018     movff   0x018, 0xfe5     	MOVFF	r0x18, POSTDEC1
002d26   ffe5
002d28   c019     movff   0x019, 0xfe5     	MOVFF	r0x19, POSTDEC1
002d2a   ffe5
002d2c   c01a     movff   0x01a, 0xfe5     	MOVFF	r0x1a, POSTDEC1
002d2e   ffe5
002d30   c01b     movff   0x01b, 0xfe5     	MOVFF	r0x1b, POSTDEC1
002d32   ffe5
002d34   0e02     movlw   0x02             	MOVLW	0x02
002d36   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002d38   f000
002d3a   0e03     movlw   0x03             	MOVLW	0x03
002d3c   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002d3e   f001
002d40   0e04     movlw   0x04             	MOVLW	0x04
002d42   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
002d44   f002
002d46   0e05     movlw   0x05             	MOVLW	0x05
002d48   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
002d4a   f003
002d4c   0e06     movlw   0x06             	MOVLW	0x06
002d4e   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
002d50   f004
002d52   0e07     movlw   0x07             	MOVLW	0x07
002d54   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
002d56   f005
002d58   0e08     movlw   0x08             	MOVLW	0x08
002d5a   cfdb     movff   0xfdb, 0x006     	MOVFF	PLUSW2, r0x06
002d5c   f006
002d5e   0e09     movlw   0x09             	MOVLW	0x09
002d60   cfdb     movff   0xfdb, 0x007     	MOVFF	PLUSW2, r0x07
002d62   f007
002d64   0e0a     movlw   0x0a             	MOVLW	0x0a
002d66   cfdb     movff   0xfdb, 0x008     	MOVFF	PLUSW2, r0x08
002d68   f008
002d6a   0e0b     movlw   0x0b             	MOVLW	0x0b
002d6c   cfdb     movff   0xfdb, 0x009     	MOVFF	PLUSW2, r0x09
002d6e   f009
002d70   0e0c     movlw   0x0c             	MOVLW	0x0c
002d72   cfdb     movff   0xfdb, 0x00a     	MOVFF	PLUSW2, r0x0a
002d74   f00a
002d76   0e0d     movlw   0x0d             	MOVLW	0x0d
002d78   cfdb     movff   0xfdb, 0x00b     	MOVFF	PLUSW2, r0x0b
002d7a   f00b
002d7c   0e0e     movlw   0x0e             	MOVLW	0x0e
002d7e   cfdb     movff   0xfdb, 0x00c     	MOVFF	PLUSW2, r0x0c
002d80   f00c
002d82   0e0f     movlw   0x0f             	MOVLW	0x0f
002d84   cfdb     movff   0xfdb, 0x00d     	MOVFF	PLUSW2, r0x0d
002d86   f00d
002d88   0e10     movlw   0x10             	MOVLW	0x10
002d8a   cfdb     movff   0xfdb, 0x00e     	MOVFF	PLUSW2, r0x0e
002d8c   f00e
002d8e   0e11     movlw   0x11             	MOVLW	0x11
002d90   cfdb     movff   0xfdb, 0x00f     	MOVFF	PLUSW2, r0x0f
002d92   f00f
002d94   0e12     movlw   0x12             	MOVLW	0x12
002d96   cfdb     movff   0xfdb, 0x010     	MOVFF	PLUSW2, r0x10
002d98   f010
002d9a   0e13     movlw   0x13             	MOVLW	0x13
002d9c   cfdb     movff   0xfdb, 0x011     	MOVFF	PLUSW2, r0x11
002d9e   f011
002da0   0e14     movlw   0x14             	MOVLW	0x14
002da2   cfdb     movff   0xfdb, 0x012     	MOVFF	PLUSW2, r0x12
002da4   f012
002da6   0e15     movlw   0x15             	MOVLW	0x15
002da8   cfdb     movff   0xfdb, 0x013     	MOVFF	PLUSW2, r0x13
002daa   f013
002dac   0e16     movlw   0x16             	MOVLW	0x16
002dae   cfdb     movff   0xfdb, 0x014     	MOVFF	PLUSW2, r0x14
002db0   f014
002db2   0e17     movlw   0x17             	MOVLW	0x17
002db4   cfdb     movff   0xfdb, 0x015     	MOVFF	PLUSW2, r0x15
002db6   f015
002db8   0e18     movlw   0x18             	MOVLW	0x18
002dba   cfdb     movff   0xfdb, 0x016     	MOVFF	PLUSW2, r0x16
002dbc   f016
002dbe   0e19     movlw   0x19             	MOVLW	0x19
002dc0   cfdb     movff   0xfdb, 0x017     	MOVFF	PLUSW2, r0x17
002dc2   f017
002dc4   0e1a     movlw   0x1a             	MOVLW	0x1a
002dc6   cfdb     movff   0xfdb, 0x018     	MOVFF	PLUSW2, r0x18
002dc8   f018
002dca   0e1b     movlw   0x1b             	MOVLW	0x1b
002dcc   cfdb     movff   0xfdb, 0x019     	MOVFF	PLUSW2, r0x19
002dce   f019
002dd0   0e1c     movlw   0x1c             	MOVLW	0x1c
002dd2   cfdb     movff   0xfdb, 0x01a     	MOVFF	PLUSW2, r0x1a
002dd4   f01a
                                           ;	.line	192; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_start();
002dd6   ec0b     call    0x004e16, 0x0    	CALL	_i2c_start
002dd8   f027
                                           ;	.line	193; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_W_ADDR);
002dda   0ea2     movlw   0xa2             	MOVLW	0xa2
002ddc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002dde   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
002de0   f026
002de2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	194; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_SECONDS_REG);
002de4   0e02     movlw   0x02             	MOVLW	0x02
002de6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002de8   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
002dea   f026
002dec   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	195; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_restart();
002dee   ecff     call    0x004dfe, 0x0    	CALL	_i2c_restart
002df0   f026
                                           ;	.line	196; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_R_ADDR);
002df2   0ea3     movlw   0xa3             	MOVLW	0xa3
002df4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002df6   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
002df8   f026
002dfa   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	197; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	*sc = bcdtodec(i2c_read(1));
002dfc   0e01     movlw   0x01             	MOVLW	0x01
002dfe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e00   ece8     call    0x0049d0, 0x0    	CALL	_i2c_read
002e02   f024
002e04   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002e06   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e08   ec2f     call    0x004c5e, 0x0    	CALL	_bcdtodec
002e0a   f026
002e0c   6e1b     movwf   0x1b, 0x0        	MOVWF	r0x1b
002e0e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002e10   c01b     movff   0x01b, 0xfe5     	MOVFF	r0x1b, POSTDEC1
002e12   ffe5
002e14   c006     movff   0x006, 0xfe9     	MOVFF	r0x06, FSR0L
002e16   ffe9
002e18   c007     movff   0x007, 0xff3     	MOVFF	r0x07, PRODL
002e1a   fff3
002e1c   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
002e1e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002e20   f027
                                           ;	.line	198; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	*mn = bcdtodec(i2c_read(1));
002e22   0e01     movlw   0x01             	MOVLW	0x01
002e24   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e26   ece8     call    0x0049d0, 0x0    	CALL	_i2c_read
002e28   f024
002e2a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002e2c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e2e   ec2f     call    0x004c5e, 0x0    	CALL	_bcdtodec
002e30   f026
002e32   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002e34   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002e36   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
002e38   ffe5
002e3a   c003     movff   0x003, 0xfe9     	MOVFF	r0x03, FSR0L
002e3c   ffe9
002e3e   c004     movff   0x004, 0xff3     	MOVFF	r0x04, PRODL
002e40   fff3
002e42   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
002e44   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002e46   f027
                                           ;	.line	199; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	*hr = bcdtodec((i2c_read(1) & 0b00111111));
002e48   0e01     movlw   0x01             	MOVLW	0x01
002e4a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e4c   ece8     call    0x0049d0, 0x0    	CALL	_i2c_read
002e4e   f024
002e50   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002e52   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002e54   0e3f     movlw   0x3f             	MOVLW	0x3f
002e56   1603     andwf   0x03, 0x1, 0x0   	ANDWF	r0x03, F
002e58   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002e5a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e5c   ec2f     call    0x004c5e, 0x0    	CALL	_bcdtodec
002e5e   f026
002e60   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002e62   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002e64   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002e66   ffe5
002e68   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002e6a   ffe9
002e6c   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
002e6e   fff3
002e70   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002e72   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002e74   f027
                                           ;	.line	200; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	LyDd = i2c_read(1);
002e76   0e01     movlw   0x01             	MOVLW	0x01
002e78   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e7a   ece8     call    0x0049d0, 0x0    	CALL	_i2c_read
002e7c   f024
002e7e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002e80   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	201; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	WdMo = i2c_read(0);
002e82   0e00     movlw   0x00             	MOVLW	0x00
002e84   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002e86   ece8     call    0x0049d0, 0x0    	CALL	_i2c_read
002e88   f024
002e8a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002e8c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	202; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_stop();
002e8e   ecf3     call    0x004de6, 0x0    	CALL	_i2c_stop
002e90   f026
                                           ;	.line	217; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	tmp = ((WdMo & 0b11100000) >> 5);
002e92   0ee0     movlw   0xe0             	MOVLW	0xe0
002e94   1401     andwf   0x01, 0x0, 0x0   	ANDWF	r0x01, W
002e96   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002e98   3802     swapf   0x02, 0x0, 0x0   	SWAPF	r0x02, W
002e9a   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
002e9c   0b07     andlw   0x07             	ANDLW	0x07
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
                                           ;	.line	218; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	*dow = bcdtodec(tmp);
002e9e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ea0   ec2f     call    0x004c5e, 0x0    	CALL	_bcdtodec
002ea2   f026
002ea4   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002ea6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002ea8   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002eaa   ffe5
002eac   c009     movff   0x009, 0xfe9     	MOVFF	r0x09, FSR0L
002eae   ffe9
002eb0   c00a     movff   0x00a, 0xff3     	MOVFF	r0x0a, PRODL
002eb2   fff3
002eb4   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
002eb6   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002eb8   f027
                                           ;	.line	220; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	tmp = (WdMo & 0b00011111);
002eba   0e1f     movlw   0x1f             	MOVLW	0x1f
002ebc   1401     andwf   0x01, 0x0, 0x0   	ANDWF	r0x01, W
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
                                           ;	.line	221; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	*mt = bcdtodec(tmp);
002ebe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ec0   ec2f     call    0x004c5e, 0x0    	CALL	_bcdtodec
002ec2   f026
002ec4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002ec6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002ec8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002eca   ffe5
002ecc   c00f     movff   0x00f, 0xfe9     	MOVFF	r0x0f, FSR0L
002ece   ffe9
002ed0   c010     movff   0x010, 0xff3     	MOVFF	r0x10, PRODL
002ed2   fff3
002ed4   5011     movf    0x11, 0x0, 0x0   	MOVF	r0x11, W
002ed6   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002ed8   f027
                                           ;	.line	223; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	tmp = ((LyDd & 0b11000000) >> 6);
002eda   0ec0     movlw   0xc0             	MOVLW	0xc0
002edc   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
002ede   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002ee0   4401     rlncf   0x01, 0x0, 0x0   	RLNCF	r0x01, W
002ee2   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
002ee4   0b03     andlw   0x03             	ANDLW	0x03
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
                                           ;	.line	224; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	*lp = bcdtodec(tmp);
002ee6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ee8   ec2f     call    0x004c5e, 0x0    	CALL	_bcdtodec
002eea   f026
002eec   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002eee   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002ef0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002ef2   ffe5
002ef4   c012     movff   0x012, 0xfe9     	MOVFF	r0x12, FSR0L
002ef6   ffe9
002ef8   c013     movff   0x013, 0xff3     	MOVFF	r0x13, PRODL
002efa   fff3
002efc   5014     movf    0x14, 0x0, 0x0   	MOVF	r0x14, W
002efe   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002f00   f027
                                           ;	.line	226; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	tmp = (LyDd & 0b00111111);
002f02   0e3f     movlw   0x3f             	MOVLW	0x3f
002f04   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
                                           ;	.line	227; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	*dy = bcdtodec(tmp);
002f06   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f08   ec2f     call    0x004c5e, 0x0    	CALL	_bcdtodec
002f0a   f026
002f0c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002f0e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002f10   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002f12   ffe5
002f14   c00c     movff   0x00c, 0xfe9     	MOVFF	r0x0c, FSR0L
002f16   ffe9
002f18   c00d     movff   0x00d, 0xff3     	MOVFF	r0x0d, PRODL
002f1a   fff3
002f1c   500e     movf    0x0e, 0x0, 0x0   	MOVF	r0x0e, W
002f1e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002f20   f027
                                           ;	.line	229; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	pcf8583_getyear(ct, yr);
002f22   501a     movf    0x1a, 0x0, 0x0   	MOVF	r0x1a, W
002f24   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f26   5019     movf    0x19, 0x0, 0x0   	MOVF	r0x19, W
002f28   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f2a   5018     movf    0x18, 0x0, 0x0   	MOVF	r0x18, W
002f2c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f2e   5017     movf    0x17, 0x0, 0x0   	MOVF	r0x17, W
002f30   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f32   5016     movf    0x16, 0x0, 0x0   	MOVF	r0x16, W
002f34   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f36   5015     movf    0x15, 0x0, 0x0   	MOVF	r0x15, W
002f38   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f3a   ec34     call    0x003e68, 0x0    	CALL	_pcf8583_getyear
002f3c   f01f
002f3e   0e06     movlw   0x06             	MOVLW	0x06
002f40   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	232; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	if (*lp != (*yr % 4)) {
002f42   c012     movff   0x012, 0xfe9     	MOVFF	r0x12, FSR0L
002f44   ffe9
002f46   c013     movff   0x013, 0xff3     	MOVFF	r0x13, PRODL
002f48   fff3
002f4a   5014     movf    0x14, 0x0, 0x0   	MOVF	r0x14, W
002f4c   ecb6     call    0x004d6c, 0x0    	CALL	__gptrget1
002f4e   f026
002f50   6e12     movwf   0x12, 0x0        	MOVWF	r0x12
002f52   c018     movff   0x018, 0xfe9     	MOVFF	r0x18, FSR0L
002f54   ffe9
002f56   c019     movff   0x019, 0xff3     	MOVFF	r0x19, PRODL
002f58   fff3
002f5a   501a     movf    0x1a, 0x0, 0x0   	MOVF	r0x1a, W
002f5c   ecb6     call    0x004d6c, 0x0    	CALL	__gptrget1
002f5e   f026
002f60   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002f62   0e03     movlw   0x03             	MOVLW	0x03
002f64   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x12, W
                                           ; #	XORWF	r0x01, W
002f66   1812     xorwf   0x12, 0x0, 0x0   	XORWF	r0x12, W
002f68   e01a     bz      0x002f9e         	BZ	_00403_DS_
                                           ;	.line	233; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	*yr = *yr + 1;
002f6a   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
002f6c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002f6e   ffe5
002f70   c018     movff   0x018, 0xfe9     	MOVFF	r0x18, FSR0L
002f72   ffe9
002f74   c019     movff   0x019, 0xff3     	MOVFF	r0x19, PRODL
002f76   fff3
002f78   501a     movf    0x1a, 0x0, 0x0   	MOVF	r0x1a, W
002f7a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002f7c   f027
                                           ;	.line	234; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	pcf8583_setyear(*ct, *yr);
002f7e   c015     movff   0x015, 0xfe9     	MOVFF	r0x15, FSR0L
002f80   ffe9
002f82   c016     movff   0x016, 0xff3     	MOVFF	r0x16, PRODL
002f84   fff3
002f86   5017     movf    0x17, 0x0, 0x0   	MOVF	r0x17, W
002f88   ecb6     call    0x004d6c, 0x0    	CALL	__gptrget1
002f8a   f026
002f8c   6e15     movwf   0x15, 0x0        	MOVWF	r0x15
002f8e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002f90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f92   5015     movf    0x15, 0x0, 0x0   	MOVF	r0x15, W
002f94   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f96   ec66     call    0x0048cc, 0x0    	CALL	_pcf8583_setyear
002f98   f024
002f9a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002f9c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00403_DS_:
002f9e   cfe4     movff   0xfe4, 0x01b     	MOVFF	PREINC1, r0x1b
002fa0   f01b
002fa2   cfe4     movff   0xfe4, 0x01a     	MOVFF	PREINC1, r0x1a
002fa4   f01a
002fa6   cfe4     movff   0xfe4, 0x019     	MOVFF	PREINC1, r0x19
002fa8   f019
002faa   cfe4     movff   0xfe4, 0x018     	MOVFF	PREINC1, r0x18
002fac   f018
002fae   cfe4     movff   0xfe4, 0x017     	MOVFF	PREINC1, r0x17
002fb0   f017
002fb2   cfe4     movff   0xfe4, 0x016     	MOVFF	PREINC1, r0x16
002fb4   f016
002fb6   cfe4     movff   0xfe4, 0x015     	MOVFF	PREINC1, r0x15
002fb8   f015
002fba   cfe4     movff   0xfe4, 0x014     	MOVFF	PREINC1, r0x14
002fbc   f014
002fbe   cfe4     movff   0xfe4, 0x013     	MOVFF	PREINC1, r0x13
002fc0   f013
002fc2   cfe4     movff   0xfe4, 0x012     	MOVFF	PREINC1, r0x12
002fc4   f012
002fc6   cfe4     movff   0xfe4, 0x011     	MOVFF	PREINC1, r0x11
002fc8   f011
002fca   cfe4     movff   0xfe4, 0x010     	MOVFF	PREINC1, r0x10
002fcc   f010
002fce   cfe4     movff   0xfe4, 0x00f     	MOVFF	PREINC1, r0x0f
002fd0   f00f
002fd2   cfe4     movff   0xfe4, 0x00e     	MOVFF	PREINC1, r0x0e
002fd4   f00e
002fd6   cfe4     movff   0xfe4, 0x00d     	MOVFF	PREINC1, r0x0d
002fd8   f00d
002fda   cfe4     movff   0xfe4, 0x00c     	MOVFF	PREINC1, r0x0c
002fdc   f00c
002fde   cfe4     movff   0xfe4, 0x00b     	MOVFF	PREINC1, r0x0b
002fe0   f00b
002fe2   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
002fe4   f00a
002fe6   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
002fe8   f009
002fea   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
002fec   f008
002fee   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
002ff0   f007
002ff2   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
002ff4   f006
002ff6   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002ff8   f005
002ffa   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002ffc   f004
002ffe   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003000   f003
003002   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003004   f002
003006   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003008   f001
00300a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00300c   f000
00300e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003010   ffd9
003012   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__pcf8583_set_datetime	code
                                           _pcf8583_set_datetime:
                                           ;	.line	126; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	void pcf8583_set_datetime(uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t dayofweek, uint8_t day, uint8_t month, uint8_t leapyear, uint8_t century, uint8_t year) {
00380c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00380e   ffe5
003810   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003812   ffd9
003814   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003816   ffe5
003818   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00381a   ffe5
00381c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00381e   ffe5
003820   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003822   ffe5
003824   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
003826   ffe5
003828   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
00382a   ffe5
00382c   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
00382e   ffe5
003830   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
003832   ffe5
003834   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
003836   ffe5
003838   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
00383a   ffe5
00383c   0e02     movlw   0x02             	MOVLW	0x02
00383e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003840   f000
003842   0e03     movlw   0x03             	MOVLW	0x03
003844   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003846   f001
003848   0e04     movlw   0x04             	MOVLW	0x04
00384a   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
00384c   f002
00384e   0e05     movlw   0x05             	MOVLW	0x05
003850   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
003852   f003
003854   0e06     movlw   0x06             	MOVLW	0x06
003856   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
003858   f004
00385a   0e07     movlw   0x07             	MOVLW	0x07
00385c   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
00385e   f005
003860   0e08     movlw   0x08             	MOVLW	0x08
003862   cfdb     movff   0xfdb, 0x006     	MOVFF	PLUSW2, r0x06
003864   f006
003866   0e09     movlw   0x09             	MOVLW	0x09
003868   cfdb     movff   0xfdb, 0x007     	MOVFF	PLUSW2, r0x07
00386a   f007
00386c   0e0a     movlw   0x0a             	MOVLW	0x0a
00386e   cfdb     movff   0xfdb, 0x008     	MOVFF	PLUSW2, r0x08
003870   f008
                                           ;	.line	129; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	LyDd = (uint8_t) ((dectobcd(leapyear) << 6) | dectobcd(day));
003872   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
003874   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003876   ec38     call    0x004870, 0x0    	CALL	_dectobcd
003878   f024
00387a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00387c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00387e   4006     rrncf   0x06, 0x0, 0x0   	RRNCF	r0x06, W
003880   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
003882   0bc0     andlw   0xc0             	ANDLW	0xc0
003884   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
003886   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003888   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00388a   ec38     call    0x004870, 0x0    	CALL	_dectobcd
00388c   f024
00388e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003890   1209     iorwf   0x09, 0x1, 0x0   	IORWF	r0x09, F
                                           ;	.line	130; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	WdMo = (uint8_t) ((dectobcd(dayofweek) << 5) | dectobcd(month));
003892   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003894   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003896   ec38     call    0x004870, 0x0    	CALL	_dectobcd
003898   f024
00389a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00389c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00389e   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
0038a0   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0038a2   0be0     andlw   0xe0             	ANDLW	0xe0
0038a4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0038a6   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0038a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0038aa   ec38     call    0x004870, 0x0    	CALL	_dectobcd
0038ac   f024
0038ae   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0038b0   1204     iorwf   0x04, 0x1, 0x0   	IORWF	r0x04, F
                                           ;	.line	133; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_start();
0038b2   ec0b     call    0x004e16, 0x0    	CALL	_i2c_start
0038b4   f027
                                           ;	.line	134; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_W_ADDR);
0038b6   0ea2     movlw   0xa2             	MOVLW	0xa2
0038b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0038ba   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
0038bc   f026
0038be   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	135; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_CTRL_STATUS_REG);
0038c0   0e00     movlw   0x00             	MOVLW	0x00
0038c2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0038c4   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
0038c6   f026
0038c8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	136; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_STOP_COUNTING);
0038ca   0e80     movlw   0x80             	MOVLW	0x80
0038cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0038ce   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
0038d0   f026
0038d2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	137; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_stop();
0038d4   ecf3     call    0x004de6, 0x0    	CALL	_i2c_stop
0038d6   f026
                                           ;	.line	140; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_start();
0038d8   ec0b     call    0x004e16, 0x0    	CALL	_i2c_start
0038da   f027
                                           ;	.line	141; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_W_ADDR);
0038dc   0ea2     movlw   0xa2             	MOVLW	0xa2
0038de   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0038e0   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
0038e2   f026
0038e4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	142; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_100S_REG);
0038e6   0e01     movlw   0x01             	MOVLW	0x01
0038e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0038ea   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
0038ec   f026
0038ee   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	143; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(dectobcd(0));
0038f0   0e00     movlw   0x00             	MOVLW	0x00
0038f2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0038f4   ec38     call    0x004870, 0x0    	CALL	_dectobcd
0038f6   f024
0038f8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0038fa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0038fc   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
0038fe   f026
003900   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	144; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(dectobcd(seconds));
003902   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003904   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003906   ec38     call    0x004870, 0x0    	CALL	_dectobcd
003908   f024
00390a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00390c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00390e   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003910   f026
003912   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	145; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(dectobcd(minutes));
003914   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003916   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003918   ec38     call    0x004870, 0x0    	CALL	_dectobcd
00391a   f024
00391c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00391e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003920   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003922   f026
003924   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	146; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(dectobcd(hours));
003926   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003928   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00392a   ec38     call    0x004870, 0x0    	CALL	_dectobcd
00392c   f024
00392e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003930   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003932   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003934   f026
003936   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	147; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(LyDd);
003938   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00393a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00393c   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
00393e   f026
003940   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	148; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(WdMo);
003942   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003944   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003946   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003948   f026
00394a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	149; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_stop();
00394c   ecf3     call    0x004de6, 0x0    	CALL	_i2c_stop
00394e   f026
                                           ;	.line	152; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_start();
003950   ec0b     call    0x004e16, 0x0    	CALL	_i2c_start
003952   f027
                                           ;	.line	153; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_W_ADDR);
003954   0ea2     movlw   0xa2             	MOVLW	0xa2
003956   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003958   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
00395a   f026
00395c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	154; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_CTRL_STATUS_REG);
00395e   0e00     movlw   0x00             	MOVLW	0x00
003960   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003962   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003964   f026
003966   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	155; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_START_COUNTING);
003968   0e00     movlw   0x00             	MOVLW	0x00
00396a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00396c   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
00396e   f026
003970   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	156; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_stop();
003972   ecf3     call    0x004de6, 0x0    	CALL	_i2c_stop
003974   f026
                                           ;	.line	184; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	pcf8583_setyear(century, year);
003976   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
003978   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00397a   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00397c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00397e   ec66     call    0x0048cc, 0x0    	CALL	_pcf8583_setyear
003980   f024
003982   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003984   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003986   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
003988   f009
00398a   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
00398c   f008
00398e   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
003990   f007
003992   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
003994   f006
003996   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
003998   f005
00399a   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
00399c   f004
00399e   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0039a0   f003
0039a2   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0039a4   f002
0039a6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0039a8   f001
0039aa   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0039ac   f000
0039ae   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0039b0   ffd9
0039b2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__pcf8583_setyear	code
                                           _pcf8583_setyear:
                                           ;	.line	107; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	void pcf8583_setyear(uint8_t cn, uint8_t yr) {
0048cc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0048ce   ffe5
0048d0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0048d2   ffd9
0048d4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0048d6   ffe5
0048d8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0048da   ffe5
0048dc   0e02     movlw   0x02             	MOVLW	0x02
0048de   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0048e0   f000
0048e2   0e03     movlw   0x03             	MOVLW	0x03
0048e4   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0048e6   f001
                                           ;	.line	110; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_start();
0048e8   ec0b     call    0x004e16, 0x0    	CALL	_i2c_start
0048ea   f027
                                           ;	.line	111; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_W_ADDR);
0048ec   0ea2     movlw   0xa2             	MOVLW	0xa2
0048ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0048f0   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
0048f2   f026
0048f4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	112; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_RAM_ADDR);
0048f6   0e10     movlw   0x10             	MOVLW	0x10
0048f8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0048fa   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
0048fc   f026
0048fe   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	113; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(cn);
004900   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004902   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004904   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
004906   f026
004908   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	114; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(yr);
00490a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00490c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00490e   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
004910   f026
004912   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	115; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_stop();
004914   ecf3     call    0x004de6, 0x0    	CALL	_i2c_stop
004916   f026
004918   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00491a   f001
00491c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00491e   f000
004920   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004922   ffd9
004924   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__pcf8583_getyear	code
                                           _pcf8583_getyear:
                                           ;	.line	84; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	void pcf8583_getyear(uint8_t * cn, uint8_t * yr) {
003e68   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003e6a   ffe5
003e6c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003e6e   ffd9
003e70   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003e72   ffe5
003e74   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003e76   ffe5
003e78   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003e7a   ffe5
003e7c   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003e7e   ffe5
003e80   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
003e82   ffe5
003e84   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
003e86   ffe5
003e88   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
003e8a   ffe5
003e8c   0e02     movlw   0x02             	MOVLW	0x02
003e8e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003e90   f000
003e92   0e03     movlw   0x03             	MOVLW	0x03
003e94   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003e96   f001
003e98   0e04     movlw   0x04             	MOVLW	0x04
003e9a   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
003e9c   f002
003e9e   0e05     movlw   0x05             	MOVLW	0x05
003ea0   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
003ea2   f003
003ea4   0e06     movlw   0x06             	MOVLW	0x06
003ea6   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
003ea8   f004
003eaa   0e07     movlw   0x07             	MOVLW	0x07
003eac   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
003eae   f005
                                           ;	.line	87; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_start();
003eb0   ec0b     call    0x004e16, 0x0    	CALL	_i2c_start
003eb2   f027
                                           ;	.line	88; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_W_ADDR);
003eb4   0ea2     movlw   0xa2             	MOVLW	0xa2
003eb6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003eb8   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003eba   f026
003ebc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	89; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_RAM_ADDR);
003ebe   0e10     movlw   0x10             	MOVLW	0x10
003ec0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003ec2   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003ec4   f026
003ec6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	90; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_restart();
003ec8   ecff     call    0x004dfe, 0x0    	CALL	_i2c_restart
003eca   f026
                                           ;	.line	91; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	err = i2c_write(PCF8583_R_ADDR);
003ecc   0ea3     movlw   0xa3             	MOVLW	0xa3
003ece   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003ed0   ec4b     call    0x004c96, 0x0    	CALL	_i2c_write
003ed2   f026
003ed4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	92; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	*cn = i2c_read(1);
003ed6   0e01     movlw   0x01             	MOVLW	0x01
003ed8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003eda   ece8     call    0x0049d0, 0x0    	CALL	_i2c_read
003edc   f024
003ede   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
003ee0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003ee2   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
003ee4   ffe5
003ee6   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003ee8   ffe9
003eea   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
003eec   fff3
003eee   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003ef0   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
003ef2   f027
                                           ;	.line	93; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	*yr = i2c_read(0);
003ef4   0e00     movlw   0x00             	MOVLW	0x00
003ef6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003ef8   ece8     call    0x0049d0, 0x0    	CALL	_i2c_read
003efa   f024
003efc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
003efe   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003f00   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003f02   ffe5
003f04   c003     movff   0x003, 0xfe9     	MOVFF	r0x03, FSR0L
003f06   ffe9
003f08   c004     movff   0x004, 0xff3     	MOVFF	r0x04, PRODL
003f0a   fff3
003f0c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
003f0e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
003f10   f027
                                           ;	.line	94; ../my_sdcc_lib/rosso_sdcc_pcf8583.h	i2c_stop();
003f12   ecf3     call    0x004de6, 0x0    	CALL	_i2c_stop
003f14   f026
003f16   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
003f18   f006
003f1a   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
003f1c   f005
003f1e   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
003f20   f004
003f22   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003f24   f003
003f26   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003f28   f002
003f2a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003f2c   f001
003f2e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003f30   f000
003f32   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003f34   ffd9
003f36   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__i2c_read	code
                                           _i2c_read:
                                           ;	.line	65; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	uint8_t i2c_read(bool_t myack) {
0049d0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0049d2   ffe5
0049d4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0049d6   ffd9
0049d8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0049da   ffe5
0049dc   0e02     movlw   0x02             	MOVLW	0x02
0049de   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0049e0   f000
                                           ;	.line	66; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	SSPCON2bits.RCEN = 1;
0049e2   86c5     bsf     0xc5, 0x3, 0x0   	BSF	_SSPCON2bits, 3
                                           _00360_DS_:
                                           ;	.line	67; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	while (SSPSTATbits.BF == 0);
0049e4   a0c7     btfss   0xc7, 0x0, 0x0   	BTFSS	_SSPSTATbits, 0
0049e6   d7fe     bra     0x0049e4         	BRA	_00360_DS_
                                           ;	.line	68; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	SSPCON2bits.ACKDT = !myack;
0049e8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0049ea   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0049ec   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
0049ee   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0049f0   6a00     clrf    0x00, 0x0        	CLRF	r0x00
0049f2   3600     rlcf    0x00, 0x1, 0x0   	RLCF	r0x00, F
0049f4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0049f6   0b01     andlw   0x01             	ANDLW	0x01
0049f8   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
0049fa   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0049fc   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
0049fe   50c5     movf    0xc5, 0x0, 0x0   	MOVF	_SSPCON2bits, W
004a00   0bdf     andlw   0xdf             	ANDLW	0xdf
004a02   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
004a04   6ec5     movwf   0xc5, 0x0        	MOVWF	_SSPCON2bits
                                           ;	.line	69; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	SSPCON2bits.ACKEN = 1;
004a06   88c5     bsf     0xc5, 0x4, 0x0   	BSF	_SSPCON2bits, 4
                                           _00363_DS_:
                                           ;	.line	70; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	while (SSPCON2bits.ACKEN == 1);
004a08   6a00     clrf    0x00, 0x0        	CLRF	r0x00
004a0a   b8c5     btfsc   0xc5, 0x4, 0x0   	BTFSC	_SSPCON2bits, 4
004a0c   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
004a0e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004a10   0a01     xorlw   0x01             	XORLW	0x01
004a12   e0fa     bz      0x004a08         	BZ	_00363_DS_
                                           ;	.line	71; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	return (SSPBUF);
004a14   50c9     movf    0xc9, 0x0, 0x0   	MOVF	_SSPBUF, W
004a16   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004a18   f000
004a1a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004a1c   ffd9
004a1e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__i2c_write	code
                                           _i2c_write:
                                           ;	.line	53; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	bool_t i2c_write(uint8_t data) {
004c96   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004c98   ffe5
004c9a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004c9c   ffd9
004c9e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004ca0   ffe5
004ca2   0e02     movlw   0x02             	MOVLW	0x02
004ca4   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004ca6   f000
                                           ;	.line	54; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	PIR1bits.SSPIF = 0;
004ca8   969e     bcf     0x9e, 0x3, 0x0   	BCF	_PIR1bits, 3
                                           ;	.line	55; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	SSPBUF = data;
004caa   c000     movff   0x000, 0xfc9     	MOVFF	r0x00, _SSPBUF
004cac   ffc9
                                           _00349_DS_:
                                           ;	.line	56; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	while (!PIR1bits.SSPIF);
004cae   a69e     btfss   0x9e, 0x3, 0x0   	BTFSS	_PIR1bits, 3
004cb0   d7fe     bra     0x004cae         	BRA	_00349_DS_
                                           ;	.line	57; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	if (SSPCON2bits.ACKSTAT == 0)return (TRUE);
004cb2   bcc5     btfsc   0xc5, 0x6, 0x0   	BTFSC	_SSPCON2bits, 6
004cb4   d002     bra     0x004cba         	BRA	_00353_DS_
004cb6   0e01     movlw   0x01             	MOVLW	0x01
004cb8   d003     bra     0x004cc0         	BRA	_00355_DS_
                                           _00353_DS_:
                                           ;	.line	59; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	SSPCON1bits.SSPEN = 0;
004cba   9ac6     bcf     0xc6, 0x5, 0x0   	BCF	_SSPCON1bits, 5
                                           ;	.line	60; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	SSPCON1bits.SSPEN = 1;
004cbc   8ac6     bsf     0xc6, 0x5, 0x0   	BSF	_SSPCON1bits, 5
                                           ;	.line	61; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	return (FALSE);
004cbe   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
                                           _00355_DS_:
004cc0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004cc2   f000
004cc4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004cc6   ffd9
004cc8   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__i2c_stop	code
                                           _i2c_stop:
                                           ;	.line	48; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	void i2c_stop(void) {
004de6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004de8   ffe5
                                           ;	.line	49; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	SSPCON2bits.PEN = 1;
004dea   84c5     bsf     0xc5, 0x2, 0x0   	BSF	_SSPCON2bits, 2
                                           _00335_DS_:
                                           ;	.line	50; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	while (SSPCON2bits.PEN == 1);
004dec   6a00     clrf    0x00, 0x0        	CLRF	r0x00
004dee   b4c5     btfsc   0xc5, 0x2, 0x0   	BTFSC	_SSPCON2bits, 2
004df0   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
004df2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004df4   0a01     xorlw   0x01             	XORLW	0x01
004df6   e0fa     bz      0x004dec         	BZ	_00335_DS_
004df8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004dfa   f000
004dfc   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__i2c_restart	code
                                           _i2c_restart:
                                           ;	.line	43; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	void i2c_restart(void) {
004dfe   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004e00   ffe5
                                           ;	.line	44; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	SSPCON2bits.RSEN = 1;
004e02   82c5     bsf     0xc5, 0x1, 0x0   	BSF	_SSPCON2bits, 1
                                           _00321_DS_:
                                           ;	.line	45; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	while (SSPCON2bits.RSEN == 1);
004e04   6a00     clrf    0x00, 0x0        	CLRF	r0x00
004e06   b2c5     btfsc   0xc5, 0x1, 0x0   	BTFSC	_SSPCON2bits, 1
004e08   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
004e0a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004e0c   0a01     xorlw   0x01             	XORLW	0x01
004e0e   e0fa     bz      0x004e04         	BZ	_00321_DS_
004e10   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004e12   f000
004e14   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__i2c_start	code
                                           _i2c_start:
                                           ;	.line	38; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	void i2c_start(void) {
004e16   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004e18   ffe5
                                           ;	.line	39; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	SSPCON2bits.SEN = 1;
004e1a   80c5     bsf     0xc5, 0x0, 0x0   	BSF	_SSPCON2bits, 0
                                           _00307_DS_:
                                           ;	.line	40; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	while (SSPCON2bits.SEN == 1);
004e1c   6a00     clrf    0x00, 0x0        	CLRF	r0x00
004e1e   b0c5     btfsc   0xc5, 0x0, 0x0   	BTFSC	_SSPCON2bits, 0
004e20   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
004e22   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004e24   0a01     xorlw   0x01             	XORLW	0x01
004e26   e0fa     bz      0x004e1c         	BZ	_00307_DS_
004e28   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004e2a   f000
004e2c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__i2c_init	code
                                           _i2c_init:
                                           ;	.line	25; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	void i2c_init(I2CSPEED speed) {
004cca   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004ccc   ffe5
004cce   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004cd0   ffd9
004cd2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004cd4   ffe5
004cd6   0e02     movlw   0x02             	MOVLW	0x02
004cd8   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004cda   f000
                                           ;	.line	26; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	I2C_SCL_DIR = 1;
004cdc   8694     bsf     0x94, 0x3, 0x0   	BSF	_TRISCbits, 3
                                           ;	.line	27; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	I2C_SDA_DIR = 1;
004cde   8894     bsf     0x94, 0x4, 0x0   	BSF	_TRISCbits, 4
                                           ;	.line	28; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	SSPCON1 = 0b00101000;
004ce0   0e28     movlw   0x28             	MOVLW	0x28
004ce2   6ec6     movwf   0xc6, 0x0        	MOVWF	_SSPCON1
                                           ;	.line	29; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	SSPCON2 = 0b00100000;
004ce4   0e20     movlw   0x20             	MOVLW	0x20
004ce6   6ec5     movwf   0xc5, 0x0        	MOVWF	_SSPCON2
                                           ;	.line	30; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	SSPADD = speed;
004ce8   c000     movff   0x000, 0xfc8     	MOVFF	r0x00, _SSPADD
004cea   ffc8
                                           ;	.line	32; ../my_sdcc_lib/rosso_sdcc_i2c_master.h	SSPSTAT = 0b00000000;
004cec   6ac7     clrf    0xc7, 0x0        	CLRF	_SSPSTAT
004cee   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004cf0   f000
004cf2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004cf4   ffd9
004cf6   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__byte2hex	code
                                           _byte2hex:
                                           ;	.line	287; ../my_sdcc_lib/rosso_sdcc_conversion.h	void byte2hex(uint8_t val, uint8_t *s) {
004006   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004008   ffe5
00400a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00400c   ffd9
00400e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004010   ffe5
004012   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004014   ffe5
004016   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
004018   ffe5
00401a   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00401c   ffe5
00401e   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
004020   ffe5
004022   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
004024   ffe5
004026   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
004028   ffe5
00402a   0e02     movlw   0x02             	MOVLW	0x02
00402c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00402e   f000
004030   0e03     movlw   0x03             	MOVLW	0x03
004032   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
004034   f001
004036   0e04     movlw   0x04             	MOVLW	0x04
004038   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
00403a   f002
00403c   0e05     movlw   0x05             	MOVLW	0x05
00403e   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
004040   f003
                                           ;	.line	288; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = nibble2hex(val >> 4);
004042   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
004044   0b0f     andlw   0x0f             	ANDLW	0x0f
                                           ; #	MOVWF	r0x04
                                           ; #	MOVF	r0x04, W
004046   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004048   ecf2     call    0x004be4, 0x0    	CALL	_nibble2hex
00404a   f025
00404c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00404e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004050   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
004052   ffe5
004054   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
004056   ffe9
004058   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
00405a   fff3
00405c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00405e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
004060   f027
                                           ;	.line	289; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = nibble2hex(val);
004062   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
004064   0f01     addlw   0x01             	ADDLW	0x01
004066   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
004068   0e00     movlw   0x00             	MOVLW	0x00
00406a   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
00406c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00406e   0e00     movlw   0x00             	MOVLW	0x00
004070   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
004072   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
004074   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004076   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004078   ecf2     call    0x004be4, 0x0    	CALL	_nibble2hex
00407a   f025
00407c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00407e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004080   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004082   ffe5
004084   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
004086   ffe9
004088   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
00408a   fff3
00408c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00408e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
004090   f027
                                           ;	.line	290; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = 0;
004092   0e02     movlw   0x02             	MOVLW	0x02
004094   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
004096   0e00     movlw   0x00             	MOVLW	0x00
004098   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00409a   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00409c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00409e   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
0040a0   ffe9
0040a2   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
0040a4   fff3
0040a6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0040a8   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0040aa   f027
0040ac   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
0040ae   f006
0040b0   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0040b2   f005
0040b4   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0040b6   f004
0040b8   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0040ba   f003
0040bc   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0040be   f002
0040c0   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0040c2   f001
0040c4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0040c6   f000
0040c8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0040ca   ffd9
0040cc   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__word2hex	code
                                           _word2hex:
                                           ;	.line	279; ../my_sdcc_lib/rosso_sdcc_conversion.h	void word2hex(uint16_t val, uint8_t *s) {
0039b4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0039b6   ffe5
0039b8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0039ba   ffd9
0039bc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0039be   ffe5
0039c0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0039c2   ffe5
0039c4   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0039c6   ffe5
0039c8   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0039ca   ffe5
0039cc   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0039ce   ffe5
0039d0   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
0039d2   ffe5
0039d4   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
0039d6   ffe5
0039d8   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0039da   ffe5
0039dc   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0039de   ffe5
0039e0   0e02     movlw   0x02             	MOVLW	0x02
0039e2   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0039e4   f000
0039e6   0e03     movlw   0x03             	MOVLW	0x03
0039e8   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0039ea   f001
0039ec   0e04     movlw   0x04             	MOVLW	0x04
0039ee   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0039f0   f002
0039f2   0e05     movlw   0x05             	MOVLW	0x05
0039f4   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
0039f6   f003
0039f8   0e06     movlw   0x06             	MOVLW	0x06
0039fa   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
0039fc   f004
                                           ;	.line	280; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = nibble2hex(val >> 12);
0039fe   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
003a00   0b0f     andlw   0x0f             	ANDLW	0x0f
003a02   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003a04   ecf2     call    0x004be4, 0x0    	CALL	_nibble2hex
003a06   f025
003a08   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
003a0a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003a0c   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
003a0e   ffe5
003a10   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
003a12   ffe9
003a14   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
003a16   fff3
003a18   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003a1a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
003a1c   f027
                                           ;	.line	281; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = nibble2hex(val >> 8);
003a1e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003a20   0f01     addlw   0x01             	ADDLW	0x01
003a22   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
003a24   0e00     movlw   0x00             	MOVLW	0x00
003a26   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
003a28   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
003a2a   0e00     movlw   0x00             	MOVLW	0x00
003a2c   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
003a2e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
003a30   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003a32   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003a34   ecf2     call    0x004be4, 0x0    	CALL	_nibble2hex
003a36   f025
003a38   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
003a3a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003a3c   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
003a3e   ffe5
003a40   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
003a42   ffe9
003a44   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
003a46   fff3
003a48   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
003a4a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
003a4c   f027
                                           ;	.line	282; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = nibble2hex(val >> 4);
003a4e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003a50   0f02     addlw   0x02             	ADDLW	0x02
003a52   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
003a54   0e00     movlw   0x00             	MOVLW	0x00
003a56   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
003a58   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
003a5a   0e00     movlw   0x00             	MOVLW	0x00
003a5c   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
003a5e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
003a60   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
003a62   0b0f     andlw   0x0f             	ANDLW	0x0f
003a64   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
003a66   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
003a68   0bf0     andlw   0xf0             	ANDLW	0xf0
003a6a   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
003a6c   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
003a6e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003a70   ecf2     call    0x004be4, 0x0    	CALL	_nibble2hex
003a72   f025
003a74   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
003a76   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003a78   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
003a7a   ffe5
003a7c   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
003a7e   ffe9
003a80   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
003a82   fff3
003a84   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
003a86   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
003a88   f027
                                           ;	.line	283; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = nibble2hex(val);
003a8a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003a8c   0f03     addlw   0x03             	ADDLW	0x03
003a8e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
003a90   0e00     movlw   0x00             	MOVLW	0x00
003a92   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
003a94   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
003a96   0e00     movlw   0x00             	MOVLW	0x00
003a98   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
003a9a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
003a9c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003a9e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003aa0   ecf2     call    0x004be4, 0x0    	CALL	_nibble2hex
003aa2   f025
003aa4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
003aa6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003aa8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003aaa   ffe5
003aac   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
003aae   ffe9
003ab0   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
003ab2   fff3
003ab4   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
003ab6   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
003ab8   f027
                                           ;	.line	284; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = 0;
003aba   0e04     movlw   0x04             	MOVLW	0x04
003abc   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
003abe   0e00     movlw   0x00             	MOVLW	0x00
003ac0   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
003ac2   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
003ac4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003ac6   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
003ac8   ffe9
003aca   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
003acc   fff3
003ace   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003ad0   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
003ad2   f027
003ad4   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
003ad6   f008
003ad8   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
003ada   f007
003adc   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
003ade   f006
003ae0   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
003ae2   f005
003ae4   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
003ae6   f004
003ae8   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003aea   f003
003aec   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003aee   f002
003af0   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003af2   f001
003af4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003af6   f000
003af8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003afa   ffd9
003afc   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__double2hex	code
                                           _double2hex:
                                           ;	.line	267; ../my_sdcc_lib/rosso_sdcc_conversion.h	void double2hex(uint32_t val, uint8_t *s) {
0035ce   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0035d0   ffe5
0035d2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0035d4   ffd9
0035d6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0035d8   ffe5
0035da   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0035dc   ffe5
0035de   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0035e0   ffe5
0035e2   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0035e4   ffe5
0035e6   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0035e8   ffe5
0035ea   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
0035ec   ffe5
0035ee   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
0035f0   ffe5
0035f2   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0035f4   ffe5
0035f6   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0035f8   ffe5
0035fa   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
0035fc   ffe5
0035fe   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
003600   ffe5
003602   0e02     movlw   0x02             	MOVLW	0x02
003604   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003606   f000
003608   0e03     movlw   0x03             	MOVLW	0x03
00360a   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00360c   f001
00360e   0e04     movlw   0x04             	MOVLW	0x04
003610   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
003612   f002
003614   0e05     movlw   0x05             	MOVLW	0x05
003616   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
003618   f003
00361a   0e06     movlw   0x06             	MOVLW	0x06
00361c   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
00361e   f004
003620   0e07     movlw   0x07             	MOVLW	0x07
003622   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
003624   f005
003626   0e08     movlw   0x08             	MOVLW	0x08
003628   cfdb     movff   0xfdb, 0x006     	MOVFF	PLUSW2, r0x06
00362a   f006
                                           ;	.line	268; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = nibble2hex(val >> 28);
00362c   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
00362e   0b0f     andlw   0x0f             	ANDLW	0x0f
003630   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003632   ecf2     call    0x004be4, 0x0    	CALL	_nibble2hex
003634   f025
003636   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
003638   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00363a   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
00363c   ffe5
00363e   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
003640   ffe9
003642   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
003644   fff3
003646   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
003648   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00364a   f027
                                           ;	.line	269; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = nibble2hex(val >> 24);
00364c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00364e   0f01     addlw   0x01             	ADDLW	0x01
003650   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
003652   0e00     movlw   0x00             	MOVLW	0x00
003654   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
003656   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
003658   0e00     movlw   0x00             	MOVLW	0x00
00365a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00365c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00365e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003660   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003662   ecf2     call    0x004be4, 0x0    	CALL	_nibble2hex
003664   f025
003666   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
003668   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00366a   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00366c   ffe5
00366e   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
003670   ffe9
003672   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
003674   fff3
003676   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
003678   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00367a   f027
                                           ;	.line	270; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = nibble2hex(val >> 20);
00367c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00367e   0f02     addlw   0x02             	ADDLW	0x02
003680   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
003682   0e00     movlw   0x00             	MOVLW	0x00
003684   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
003686   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
003688   0e00     movlw   0x00             	MOVLW	0x00
00368a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00368c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00368e   3802     swapf   0x02, 0x0, 0x0   	SWAPF	r0x02, W
003690   0b0f     andlw   0x0f             	ANDLW	0x0f
003692   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
003694   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
003696   0bf0     andlw   0xf0             	ANDLW	0xf0
003698   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
00369a   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
00369c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00369e   ecf2     call    0x004be4, 0x0    	CALL	_nibble2hex
0036a0   f025
0036a2   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0036a4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0036a6   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0036a8   ffe5
0036aa   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0036ac   ffe9
0036ae   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0036b0   fff3
0036b2   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0036b4   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0036b6   f027
                                           ;	.line	271; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = nibble2hex(val >> 16);
0036b8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0036ba   0f03     addlw   0x03             	ADDLW	0x03
0036bc   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0036be   0e00     movlw   0x00             	MOVLW	0x00
0036c0   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0036c2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0036c4   0e00     movlw   0x00             	MOVLW	0x00
0036c6   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0036c8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0036ca   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0036cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0036ce   ecf2     call    0x004be4, 0x0    	CALL	_nibble2hex
0036d0   f025
0036d2   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0036d4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0036d6   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0036d8   ffe5
0036da   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0036dc   ffe9
0036de   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0036e0   fff3
0036e2   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0036e4   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0036e6   f027
                                           ;	.line	272; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = nibble2hex(val >> 12);
0036e8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0036ea   0f04     addlw   0x04             	ADDLW	0x04
0036ec   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0036ee   0e00     movlw   0x00             	MOVLW	0x00
0036f0   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0036f2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0036f4   0e00     movlw   0x00             	MOVLW	0x00
0036f6   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0036f8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0036fa   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
0036fc   0b0f     andlw   0x0f             	ANDLW	0x0f
0036fe   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
003700   3802     swapf   0x02, 0x0, 0x0   	SWAPF	r0x02, W
003702   0bf0     andlw   0xf0             	ANDLW	0xf0
003704   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
003706   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
003708   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00370a   ecf2     call    0x004be4, 0x0    	CALL	_nibble2hex
00370c   f025
00370e   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
003710   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003712   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
003714   ffe5
003716   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
003718   ffe9
00371a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00371c   fff3
00371e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
003720   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
003722   f027
                                           ;	.line	273; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = nibble2hex(val >> 8);
003724   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003726   0f05     addlw   0x05             	ADDLW	0x05
003728   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00372a   0e00     movlw   0x00             	MOVLW	0x00
00372c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00372e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
003730   0e00     movlw   0x00             	MOVLW	0x00
003732   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
003734   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
003736   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003738   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00373a   ecf2     call    0x004be4, 0x0    	CALL	_nibble2hex
00373c   f025
00373e   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
003740   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003742   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
003744   ffe5
003746   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
003748   ffe9
00374a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00374c   fff3
00374e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
003750   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
003752   f027
                                           ;	.line	274; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = nibble2hex(val >> 4);
003754   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003756   0f06     addlw   0x06             	ADDLW	0x06
003758   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00375a   0e00     movlw   0x00             	MOVLW	0x00
00375c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00375e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
003760   0e00     movlw   0x00             	MOVLW	0x00
003762   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
003764   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
003766   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
003768   0b0f     andlw   0x0f             	ANDLW	0x0f
00376a   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00376c   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
00376e   0bf0     andlw   0xf0             	ANDLW	0xf0
003770   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
003772   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
003774   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003776   ecf2     call    0x004be4, 0x0    	CALL	_nibble2hex
003778   f025
00377a   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00377c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00377e   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
003780   ffe5
003782   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
003784   ffe9
003786   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
003788   fff3
00378a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00378c   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00378e   f027
                                           ;	.line	275; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = nibble2hex(val);
003790   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003792   0f07     addlw   0x07             	ADDLW	0x07
003794   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
003796   0e00     movlw   0x00             	MOVLW	0x00
003798   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00379a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00379c   0e00     movlw   0x00             	MOVLW	0x00
00379e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0037a0   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0037a2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0037a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0037a6   ecf2     call    0x004be4, 0x0    	CALL	_nibble2hex
0037a8   f025
0037aa   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0037ac   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0037ae   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0037b0   ffe5
0037b2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0037b4   ffe9
0037b6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0037b8   fff3
0037ba   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0037bc   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0037be   f027
                                           ;	.line	276; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = 0;
0037c0   0e08     movlw   0x08             	MOVLW	0x08
0037c2   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0037c4   0e00     movlw   0x00             	MOVLW	0x00
0037c6   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0037c8   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
0037ca   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0037cc   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0037ce   ffe9
0037d0   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
0037d2   fff3
0037d4   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0037d6   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0037d8   f027
0037da   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
0037dc   f00a
0037de   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
0037e0   f009
0037e2   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
0037e4   f008
0037e6   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0037e8   f007
0037ea   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
0037ec   f006
0037ee   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0037f0   f005
0037f2   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0037f4   f004
0037f6   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0037f8   f003
0037fa   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0037fc   f002
0037fe   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003800   f001
003802   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003804   f000
003806   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003808   ffd9
00380a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__double2dec	code
                                           _double2dec:
                                           ;	.line	98; ../my_sdcc_lib/rosso_sdcc_conversion.h	void double2dec(uint32_t val, uint8_t *s) {
00032a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00032c   ffe5
00032e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000330   ffd9
000332   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000334   ffe5
000336   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000338   ffe5
00033a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00033c   ffe5
00033e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
000340   ffe5
000342   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
000344   ffe5
000346   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
000348   ffe5
00034a   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
00034c   ffe5
00034e   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
000350   ffe5
000352   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
000354   ffe5
000356   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
000358   ffe5
00035a   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00035c   ffe5
00035e   0e02     movlw   0x02             	MOVLW	0x02
000360   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000362   f000
000364   0e03     movlw   0x03             	MOVLW	0x03
000366   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
000368   f001
00036a   0e04     movlw   0x04             	MOVLW	0x04
00036c   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
00036e   f002
000370   0e05     movlw   0x05             	MOVLW	0x05
000372   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
000374   f003
000376   0e06     movlw   0x06             	MOVLW	0x06
000378   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
00037a   f004
00037c   0e07     movlw   0x07             	MOVLW	0x07
00037e   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
000380   f005
000382   0e08     movlw   0x08             	MOVLW	0x08
000384   cfdb     movff   0xfdb, 0x006     	MOVFF	PLUSW2, r0x06
000386   f006
                                           ;	.line	99; ../my_sdcc_lib/rosso_sdcc_conversion.h	if (val > 999999999) {
000388   0e3b     movlw   0x3b             	MOVLW	0x3b
00038a   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
00038c   e108     bnz     0x00039e         	BNZ	_00274_DS_
00038e   0e9a     movlw   0x9a             	MOVLW	0x9a
000390   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
000392   e105     bnz     0x00039e         	BNZ	_00274_DS_
000394   0eca     movlw   0xca             	MOVLW	0xca
000396   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
000398   e102     bnz     0x00039e         	BNZ	_00274_DS_
00039a   0e00     movlw   0x00             	MOVLW	0x00
00039c   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00274_DS_:
00039e   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0003a0   ef18     goto    0x000830         	GOTO	_00243_DS_
0003a2   f004
                                           ;	.line	100; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
0003a4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0003a6   0f09     addlw   0x09             	ADDLW	0x09
0003a8   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0003aa   0e00     movlw   0x00             	MOVLW	0x00
0003ac   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0003ae   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0003b0   0e00     movlw   0x00             	MOVLW	0x00
0003b2   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0003b4   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0003b6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0003b8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0003ba   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0003bc   0e0a     movlw   0x0a             	MOVLW	0x0a
0003be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003c0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0003c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003c4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0003c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003c8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0003ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003cc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0003ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003d0   ec7f     call    0x003afe, 0x0    	CALL	__modulong
0003d2   f01d
0003d4   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0003d6   0e08     movlw   0x08             	MOVLW	0x08
0003d8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0003da   0e30     movlw   0x30             	MOVLW	0x30
0003dc   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0003de   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0003e0   ffe5
0003e2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0003e4   ffe9
0003e6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0003e8   fff3
0003ea   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0003ec   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0003ee   f027
                                           ;	.line	101; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0003f0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0003f2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0003f4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0003f6   0e0a     movlw   0x0a             	MOVLW	0x0a
0003f8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003fa   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0003fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003fe   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000400   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000402   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000404   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000406   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000408   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00040a   ec1c     call    0x003c38, 0x0    	CALL	__divulong
00040c   f01e
00040e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000410   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000412   f001
000414   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000416   f002
000418   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00041a   f003
00041c   0e08     movlw   0x08             	MOVLW	0x08
00041e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	102; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
000420   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000422   0f08     addlw   0x08             	ADDLW	0x08
000424   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000426   0e00     movlw   0x00             	MOVLW	0x00
000428   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00042a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00042c   0e00     movlw   0x00             	MOVLW	0x00
00042e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000430   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000432   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000434   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000436   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000438   0e0a     movlw   0x0a             	MOVLW	0x0a
00043a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00043c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00043e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000440   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000442   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000444   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000446   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000448   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00044a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00044c   ec7f     call    0x003afe, 0x0    	CALL	__modulong
00044e   f01d
000450   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000452   0e08     movlw   0x08             	MOVLW	0x08
000454   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000456   0e30     movlw   0x30             	MOVLW	0x30
000458   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
00045a   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00045c   ffe5
00045e   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000460   ffe9
000462   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000464   fff3
000466   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000468   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00046a   f027
                                           ;	.line	103; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00046c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00046e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000470   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000472   0e0a     movlw   0x0a             	MOVLW	0x0a
000474   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000476   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000478   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00047a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00047c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00047e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000480   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000482   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000484   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000486   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000488   f01e
00048a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00048c   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00048e   f001
000490   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000492   f002
000494   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000496   f003
000498   0e08     movlw   0x08             	MOVLW	0x08
00049a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	104; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + (val % 10);
00049c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00049e   0f07     addlw   0x07             	ADDLW	0x07
0004a0   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0004a2   0e00     movlw   0x00             	MOVLW	0x00
0004a4   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0004a6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0004a8   0e00     movlw   0x00             	MOVLW	0x00
0004aa   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0004ac   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0004ae   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0004b0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0004b2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0004b4   0e0a     movlw   0x0a             	MOVLW	0x0a
0004b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004b8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0004ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004bc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0004be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004c0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0004c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004c4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0004c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004c8   ec7f     call    0x003afe, 0x0    	CALL	__modulong
0004ca   f01d
0004cc   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0004ce   0e08     movlw   0x08             	MOVLW	0x08
0004d0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0004d2   0e30     movlw   0x30             	MOVLW	0x30
0004d4   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0004d6   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0004d8   ffe5
0004da   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0004dc   ffe9
0004de   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0004e0   fff3
0004e2   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0004e4   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0004e6   f027
                                           ;	.line	105; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0004e8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0004ea   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0004ec   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0004ee   0e0a     movlw   0x0a             	MOVLW	0x0a
0004f0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004f2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0004f4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004f6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0004f8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004fa   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0004fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004fe   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000500   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000502   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000504   f01e
000506   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000508   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00050a   f001
00050c   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
00050e   f002
000510   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000512   f003
000514   0e08     movlw   0x08             	MOVLW	0x08
000516   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	106; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = '0' + (val % 10);
000518   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00051a   0f06     addlw   0x06             	ADDLW	0x06
00051c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00051e   0e00     movlw   0x00             	MOVLW	0x00
000520   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000522   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000524   0e00     movlw   0x00             	MOVLW	0x00
000526   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000528   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00052a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00052c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00052e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000530   0e0a     movlw   0x0a             	MOVLW	0x0a
000532   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000534   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000536   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000538   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00053a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00053c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00053e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000540   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000542   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000544   ec7f     call    0x003afe, 0x0    	CALL	__modulong
000546   f01d
000548   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00054a   0e08     movlw   0x08             	MOVLW	0x08
00054c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00054e   0e30     movlw   0x30             	MOVLW	0x30
000550   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000552   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000554   ffe5
000556   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000558   ffe9
00055a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00055c   fff3
00055e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000560   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000562   f027
                                           ;	.line	107; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000564   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000566   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000568   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00056a   0e0a     movlw   0x0a             	MOVLW	0x0a
00056c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00056e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000570   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000572   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000574   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000576   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000578   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00057a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00057c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00057e   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000580   f01e
000582   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000584   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000586   f001
000588   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
00058a   f002
00058c   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00058e   f003
000590   0e08     movlw   0x08             	MOVLW	0x08
000592   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	108; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = '0' + (val % 10);
000594   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000596   0f05     addlw   0x05             	ADDLW	0x05
000598   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00059a   0e00     movlw   0x00             	MOVLW	0x00
00059c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00059e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0005a0   0e00     movlw   0x00             	MOVLW	0x00
0005a2   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0005a4   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0005a6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0005a8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0005aa   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0005ac   0e0a     movlw   0x0a             	MOVLW	0x0a
0005ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005b0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0005b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005b4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0005b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005b8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0005ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005bc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0005be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005c0   ec7f     call    0x003afe, 0x0    	CALL	__modulong
0005c2   f01d
0005c4   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0005c6   0e08     movlw   0x08             	MOVLW	0x08
0005c8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0005ca   0e30     movlw   0x30             	MOVLW	0x30
0005cc   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0005ce   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0005d0   ffe5
0005d2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0005d4   ffe9
0005d6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0005d8   fff3
0005da   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0005dc   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0005de   f027
                                           ;	.line	109; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0005e0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0005e2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0005e4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0005e6   0e0a     movlw   0x0a             	MOVLW	0x0a
0005e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005ea   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0005ec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005ee   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0005f0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005f2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0005f4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005f6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0005f8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005fa   ec1c     call    0x003c38, 0x0    	CALL	__divulong
0005fc   f01e
0005fe   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000600   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000602   f001
000604   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000606   f002
000608   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00060a   f003
00060c   0e08     movlw   0x08             	MOVLW	0x08
00060e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	110; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
000610   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000612   0f04     addlw   0x04             	ADDLW	0x04
000614   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000616   0e00     movlw   0x00             	MOVLW	0x00
000618   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00061a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00061c   0e00     movlw   0x00             	MOVLW	0x00
00061e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000620   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000622   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000624   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000626   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000628   0e0a     movlw   0x0a             	MOVLW	0x0a
00062a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00062c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00062e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000630   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000632   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000634   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000636   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000638   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00063a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00063c   ec7f     call    0x003afe, 0x0    	CALL	__modulong
00063e   f01d
000640   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000642   0e08     movlw   0x08             	MOVLW	0x08
000644   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000646   0e30     movlw   0x30             	MOVLW	0x30
000648   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
00064a   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00064c   ffe5
00064e   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000650   ffe9
000652   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000654   fff3
000656   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000658   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00065a   f027
                                           ;	.line	111; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00065c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00065e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000660   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000662   0e0a     movlw   0x0a             	MOVLW	0x0a
000664   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000666   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000668   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00066a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00066c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00066e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000670   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000672   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000674   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000676   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000678   f01e
00067a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00067c   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00067e   f001
000680   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000682   f002
000684   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000686   f003
000688   0e08     movlw   0x08             	MOVLW	0x08
00068a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	112; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + (val % 10);
00068c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00068e   0f03     addlw   0x03             	ADDLW	0x03
000690   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000692   0e00     movlw   0x00             	MOVLW	0x00
000694   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000696   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000698   0e00     movlw   0x00             	MOVLW	0x00
00069a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00069c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00069e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0006a0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0006a2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0006a4   0e0a     movlw   0x0a             	MOVLW	0x0a
0006a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006a8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0006aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006ac   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0006ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006b0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0006b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006b4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0006b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006b8   ec7f     call    0x003afe, 0x0    	CALL	__modulong
0006ba   f01d
0006bc   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0006be   0e08     movlw   0x08             	MOVLW	0x08
0006c0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0006c2   0e30     movlw   0x30             	MOVLW	0x30
0006c4   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0006c6   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0006c8   ffe5
0006ca   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0006cc   ffe9
0006ce   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0006d0   fff3
0006d2   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0006d4   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0006d6   f027
                                           ;	.line	113; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0006d8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0006da   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0006dc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0006de   0e0a     movlw   0x0a             	MOVLW	0x0a
0006e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006e2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0006e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006e6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0006e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006ea   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0006ec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006ee   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0006f0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006f2   ec1c     call    0x003c38, 0x0    	CALL	__divulong
0006f4   f01e
0006f6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0006f8   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0006fa   f001
0006fc   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0006fe   f002
000700   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000702   f003
000704   0e08     movlw   0x08             	MOVLW	0x08
000706   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	114; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + (val % 10);
000708   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00070a   0f02     addlw   0x02             	ADDLW	0x02
00070c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00070e   0e00     movlw   0x00             	MOVLW	0x00
000710   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000712   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000714   0e00     movlw   0x00             	MOVLW	0x00
000716   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000718   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00071a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00071c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00071e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000720   0e0a     movlw   0x0a             	MOVLW	0x0a
000722   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000724   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000726   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000728   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00072a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00072c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00072e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000730   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000732   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000734   ec7f     call    0x003afe, 0x0    	CALL	__modulong
000736   f01d
000738   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00073a   0e08     movlw   0x08             	MOVLW	0x08
00073c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00073e   0e30     movlw   0x30             	MOVLW	0x30
000740   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000742   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000744   ffe5
000746   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000748   ffe9
00074a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00074c   fff3
00074e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000750   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000752   f027
                                           ;	.line	115; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000754   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000756   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000758   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00075a   0e0a     movlw   0x0a             	MOVLW	0x0a
00075c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00075e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000760   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000762   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000764   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000766   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000768   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00076a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00076c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00076e   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000770   f01e
000772   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000774   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000776   f001
000778   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
00077a   f002
00077c   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00077e   f003
000780   0e08     movlw   0x08             	MOVLW	0x08
000782   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	116; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = '0' + (val % 10);
000784   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000786   0f01     addlw   0x01             	ADDLW	0x01
000788   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00078a   0e00     movlw   0x00             	MOVLW	0x00
00078c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00078e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000790   0e00     movlw   0x00             	MOVLW	0x00
000792   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000794   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000796   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000798   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00079a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00079c   0e0a     movlw   0x0a             	MOVLW	0x0a
00079e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007a0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0007a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007a4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0007a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007a8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0007aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007ac   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0007ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007b0   ec7f     call    0x003afe, 0x0    	CALL	__modulong
0007b2   f01d
0007b4   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0007b6   0e08     movlw   0x08             	MOVLW	0x08
0007b8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0007ba   0e30     movlw   0x30             	MOVLW	0x30
0007bc   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0007be   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0007c0   ffe5
0007c2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0007c4   ffe9
0007c6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0007c8   fff3
0007ca   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0007cc   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0007ce   f027
                                           ;	.line	117; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0007d0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0007d2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0007d4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0007d6   0e0a     movlw   0x0a             	MOVLW	0x0a
0007d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007da   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0007dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007de   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0007e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007e2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0007e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007e6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0007e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007ea   ec1c     call    0x003c38, 0x0    	CALL	__divulong
0007ec   f01e
0007ee   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0007f0   0e08     movlw   0x08             	MOVLW	0x08
0007f2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	118; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = '0' + val;
0007f4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0007f6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0007f8   0e30     movlw   0x30             	MOVLW	0x30
0007fa   2607     addwf   0x07, 0x1, 0x0   	ADDWF	r0x07, F
0007fc   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0007fe   ffe5
000800   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000802   ffe9
000804   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
000806   fff3
000808   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00080a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00080c   f027
                                           ;	.line	119; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
00080e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000810   0f0a     addlw   0x0a             	ADDLW	0x0a
000812   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000814   0e00     movlw   0x00             	MOVLW	0x00
000816   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000818   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00081a   0e00     movlw   0x00             	MOVLW	0x00
00081c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00081e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000820   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000822   ffe9
000824   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000826   fff3
000828   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00082a   f027
00082c   ef39     goto    0x002272         	GOTO	_00245_DS_
00082e   f011
                                           _00243_DS_:
                                           ;	.line	120; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 99999999) {
000830   0e05     movlw   0x05             	MOVLW	0x05
000832   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
000834   e108     bnz     0x000846         	BNZ	_00275_DS_
000836   0ef5     movlw   0xf5             	MOVLW	0xf5
000838   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
00083a   e105     bnz     0x000846         	BNZ	_00275_DS_
00083c   0ee1     movlw   0xe1             	MOVLW	0xe1
00083e   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
000840   e102     bnz     0x000846         	BNZ	_00275_DS_
000842   0e00     movlw   0x00             	MOVLW	0x00
000844   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00275_DS_:
000846   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
000848   ef40     goto    0x000c80         	GOTO	_00240_DS_
00084a   f006
                                           ;	.line	121; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
00084c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00084e   0f09     addlw   0x09             	ADDLW	0x09
000850   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000852   0e00     movlw   0x00             	MOVLW	0x00
000854   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000856   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000858   0e00     movlw   0x00             	MOVLW	0x00
00085a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00085c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00085e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000860   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000862   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000864   0e0a     movlw   0x0a             	MOVLW	0x0a
000866   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000868   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00086a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00086c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00086e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000870   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000872   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000874   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000876   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000878   ec7f     call    0x003afe, 0x0    	CALL	__modulong
00087a   f01d
00087c   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00087e   0e08     movlw   0x08             	MOVLW	0x08
000880   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000882   0e30     movlw   0x30             	MOVLW	0x30
000884   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000886   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000888   ffe5
00088a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00088c   ffe9
00088e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000890   fff3
000892   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000894   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000896   f027
                                           ;	.line	122; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000898   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00089a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00089c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00089e   0e0a     movlw   0x0a             	MOVLW	0x0a
0008a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008a2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0008a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008a6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0008a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008aa   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0008ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008ae   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0008b0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008b2   ec1c     call    0x003c38, 0x0    	CALL	__divulong
0008b4   f01e
0008b6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0008b8   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0008ba   f001
0008bc   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0008be   f002
0008c0   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0008c2   f003
0008c4   0e08     movlw   0x08             	MOVLW	0x08
0008c6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	123; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
0008c8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0008ca   0f08     addlw   0x08             	ADDLW	0x08
0008cc   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0008ce   0e00     movlw   0x00             	MOVLW	0x00
0008d0   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0008d2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0008d4   0e00     movlw   0x00             	MOVLW	0x00
0008d6   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0008d8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0008da   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0008dc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0008de   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0008e0   0e0a     movlw   0x0a             	MOVLW	0x0a
0008e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008e4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0008e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008e8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0008ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008ec   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0008ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008f0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0008f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008f4   ec7f     call    0x003afe, 0x0    	CALL	__modulong
0008f6   f01d
0008f8   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0008fa   0e08     movlw   0x08             	MOVLW	0x08
0008fc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0008fe   0e30     movlw   0x30             	MOVLW	0x30
000900   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000902   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000904   ffe5
000906   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000908   ffe9
00090a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00090c   fff3
00090e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000910   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000912   f027
                                           ;	.line	124; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000914   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000916   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000918   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00091a   0e0a     movlw   0x0a             	MOVLW	0x0a
00091c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00091e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000920   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000922   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000924   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000926   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000928   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00092a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00092c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00092e   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000930   f01e
000932   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000934   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000936   f001
000938   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
00093a   f002
00093c   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00093e   f003
000940   0e08     movlw   0x08             	MOVLW	0x08
000942   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	125; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + (val % 10);
000944   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000946   0f07     addlw   0x07             	ADDLW	0x07
000948   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00094a   0e00     movlw   0x00             	MOVLW	0x00
00094c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00094e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000950   0e00     movlw   0x00             	MOVLW	0x00
000952   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000954   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000956   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000958   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00095a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00095c   0e0a     movlw   0x0a             	MOVLW	0x0a
00095e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000960   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000962   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000964   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000966   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000968   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00096a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00096c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00096e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000970   ec7f     call    0x003afe, 0x0    	CALL	__modulong
000972   f01d
000974   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000976   0e08     movlw   0x08             	MOVLW	0x08
000978   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00097a   0e30     movlw   0x30             	MOVLW	0x30
00097c   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
00097e   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000980   ffe5
000982   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000984   ffe9
000986   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000988   fff3
00098a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00098c   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00098e   f027
                                           ;	.line	126; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000990   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000992   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000994   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000996   0e0a     movlw   0x0a             	MOVLW	0x0a
000998   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00099a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00099c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00099e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0009a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009a2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0009a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009a6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0009a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009aa   ec1c     call    0x003c38, 0x0    	CALL	__divulong
0009ac   f01e
0009ae   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0009b0   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0009b2   f001
0009b4   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0009b6   f002
0009b8   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0009ba   f003
0009bc   0e08     movlw   0x08             	MOVLW	0x08
0009be   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	127; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = '0' + (val % 10);
0009c0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0009c2   0f06     addlw   0x06             	ADDLW	0x06
0009c4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0009c6   0e00     movlw   0x00             	MOVLW	0x00
0009c8   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0009ca   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0009cc   0e00     movlw   0x00             	MOVLW	0x00
0009ce   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0009d0   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0009d2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0009d4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0009d6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0009d8   0e0a     movlw   0x0a             	MOVLW	0x0a
0009da   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009dc   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0009de   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009e0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0009e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009e4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0009e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009e8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0009ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009ec   ec7f     call    0x003afe, 0x0    	CALL	__modulong
0009ee   f01d
0009f0   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0009f2   0e08     movlw   0x08             	MOVLW	0x08
0009f4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0009f6   0e30     movlw   0x30             	MOVLW	0x30
0009f8   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0009fa   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0009fc   ffe5
0009fe   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000a00   ffe9
000a02   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000a04   fff3
000a06   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000a08   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000a0a   f027
                                           ;	.line	128; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000a0c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a0e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a10   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a12   0e0a     movlw   0x0a             	MOVLW	0x0a
000a14   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a16   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000a18   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a1a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000a1c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a1e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000a20   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a22   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000a24   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a26   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000a28   f01e
000a2a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000a2c   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000a2e   f001
000a30   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000a32   f002
000a34   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000a36   f003
000a38   0e08     movlw   0x08             	MOVLW	0x08
000a3a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	129; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = '0' + (val % 10);
000a3c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000a3e   0f05     addlw   0x05             	ADDLW	0x05
000a40   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000a42   0e00     movlw   0x00             	MOVLW	0x00
000a44   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000a46   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000a48   0e00     movlw   0x00             	MOVLW	0x00
000a4a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000a4c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000a4e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a50   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a52   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a54   0e0a     movlw   0x0a             	MOVLW	0x0a
000a56   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a58   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000a5a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a5c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000a5e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a60   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000a62   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a64   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000a66   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a68   ec7f     call    0x003afe, 0x0    	CALL	__modulong
000a6a   f01d
000a6c   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000a6e   0e08     movlw   0x08             	MOVLW	0x08
000a70   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000a72   0e30     movlw   0x30             	MOVLW	0x30
000a74   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000a76   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000a78   ffe5
000a7a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000a7c   ffe9
000a7e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000a80   fff3
000a82   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000a84   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000a86   f027
                                           ;	.line	130; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000a88   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a8a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a8c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a8e   0e0a     movlw   0x0a             	MOVLW	0x0a
000a90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a92   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000a94   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a96   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000a98   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a9a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000a9c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a9e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000aa0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000aa2   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000aa4   f01e
000aa6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000aa8   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000aaa   f001
000aac   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000aae   f002
000ab0   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000ab2   f003
000ab4   0e08     movlw   0x08             	MOVLW	0x08
000ab6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	131; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
000ab8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000aba   0f04     addlw   0x04             	ADDLW	0x04
000abc   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000abe   0e00     movlw   0x00             	MOVLW	0x00
000ac0   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000ac2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000ac4   0e00     movlw   0x00             	MOVLW	0x00
000ac6   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000ac8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000aca   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000acc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000ace   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000ad0   0e0a     movlw   0x0a             	MOVLW	0x0a
000ad2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ad4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000ad6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ad8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000ada   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000adc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000ade   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ae0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000ae2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ae4   ec7f     call    0x003afe, 0x0    	CALL	__modulong
000ae6   f01d
000ae8   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000aea   0e08     movlw   0x08             	MOVLW	0x08
000aec   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000aee   0e30     movlw   0x30             	MOVLW	0x30
000af0   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000af2   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000af4   ffe5
000af6   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000af8   ffe9
000afa   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000afc   fff3
000afe   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000b00   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000b02   f027
                                           ;	.line	132; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000b04   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b06   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b08   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b0a   0e0a     movlw   0x0a             	MOVLW	0x0a
000b0c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b0e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000b10   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b12   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000b14   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b16   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000b18   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b1a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000b1c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b1e   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000b20   f01e
000b22   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000b24   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000b26   f001
000b28   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000b2a   f002
000b2c   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000b2e   f003
000b30   0e08     movlw   0x08             	MOVLW	0x08
000b32   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	133; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + (val % 10);
000b34   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000b36   0f03     addlw   0x03             	ADDLW	0x03
000b38   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000b3a   0e00     movlw   0x00             	MOVLW	0x00
000b3c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000b3e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000b40   0e00     movlw   0x00             	MOVLW	0x00
000b42   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000b44   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000b46   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b48   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b4a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b4c   0e0a     movlw   0x0a             	MOVLW	0x0a
000b4e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b50   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000b52   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b54   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000b56   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b58   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000b5a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b5c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000b5e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b60   ec7f     call    0x003afe, 0x0    	CALL	__modulong
000b62   f01d
000b64   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000b66   0e08     movlw   0x08             	MOVLW	0x08
000b68   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000b6a   0e30     movlw   0x30             	MOVLW	0x30
000b6c   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000b6e   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000b70   ffe5
000b72   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000b74   ffe9
000b76   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000b78   fff3
000b7a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000b7c   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000b7e   f027
                                           ;	.line	134; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000b80   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b82   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b84   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b86   0e0a     movlw   0x0a             	MOVLW	0x0a
000b88   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b8a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000b8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b8e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000b90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b92   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000b94   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b96   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000b98   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b9a   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000b9c   f01e
000b9e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000ba0   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000ba2   f001
000ba4   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000ba6   f002
000ba8   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000baa   f003
000bac   0e08     movlw   0x08             	MOVLW	0x08
000bae   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	135; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + (val % 10);
000bb0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000bb2   0f02     addlw   0x02             	ADDLW	0x02
000bb4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000bb6   0e00     movlw   0x00             	MOVLW	0x00
000bb8   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000bba   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000bbc   0e00     movlw   0x00             	MOVLW	0x00
000bbe   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000bc0   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000bc2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000bc4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000bc6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000bc8   0e0a     movlw   0x0a             	MOVLW	0x0a
000bca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bcc   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000bce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bd0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000bd2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bd4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000bd6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bd8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000bda   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bdc   ec7f     call    0x003afe, 0x0    	CALL	__modulong
000bde   f01d
000be0   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000be2   0e08     movlw   0x08             	MOVLW	0x08
000be4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000be6   0e30     movlw   0x30             	MOVLW	0x30
000be8   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000bea   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000bec   ffe5
000bee   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000bf0   ffe9
000bf2   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000bf4   fff3
000bf6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000bf8   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000bfa   f027
                                           ;	.line	136; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000bfc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000bfe   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000c00   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000c02   0e0a     movlw   0x0a             	MOVLW	0x0a
000c04   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c06   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000c08   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c0a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000c0c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c0e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000c10   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c12   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000c14   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c16   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000c18   f01e
000c1a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000c1c   0e08     movlw   0x08             	MOVLW	0x08
000c1e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	137; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = '0' + val;
000c20   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000c22   0f01     addlw   0x01             	ADDLW	0x01
000c24   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000c26   0e00     movlw   0x00             	MOVLW	0x00
000c28   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000c2a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000c2c   0e00     movlw   0x00             	MOVLW	0x00
000c2e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000c30   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000c32   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000c34   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000c36   0e30     movlw   0x30             	MOVLW	0x30
000c38   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000c3a   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000c3c   ffe5
000c3e   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000c40   ffe9
000c42   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000c44   fff3
000c46   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000c48   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000c4a   f027
                                           ;	.line	138; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
000c4c   0e20     movlw   0x20             	MOVLW	0x20
000c4e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c50   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000c52   ffe9
000c54   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
000c56   fff3
000c58   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000c5a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000c5c   f027
                                           ;	.line	139; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
000c5e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000c60   0f0a     addlw   0x0a             	ADDLW	0x0a
000c62   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000c64   0e00     movlw   0x00             	MOVLW	0x00
000c66   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000c68   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000c6a   0e00     movlw   0x00             	MOVLW	0x00
000c6c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000c6e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000c70   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000c72   ffe9
000c74   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000c76   fff3
000c78   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000c7a   f027
000c7c   ef39     goto    0x002272         	GOTO	_00245_DS_
000c7e   f011
                                           _00240_DS_:
                                           ;	.line	140; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 9999999) {
000c80   0e00     movlw   0x00             	MOVLW	0x00
000c82   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
000c84   e108     bnz     0x000c96         	BNZ	_00276_DS_
000c86   0e98     movlw   0x98             	MOVLW	0x98
000c88   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
000c8a   e105     bnz     0x000c96         	BNZ	_00276_DS_
000c8c   0e96     movlw   0x96             	MOVLW	0x96
000c8e   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
000c90   e102     bnz     0x000c96         	BNZ	_00276_DS_
000c92   0e80     movlw   0x80             	MOVLW	0x80
000c94   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00276_DS_:
000c96   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
000c98   d1ee     bra     0x001076         	BRA	_00237_DS_
                                           ;	.line	141; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
000c9a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000c9c   0f09     addlw   0x09             	ADDLW	0x09
000c9e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000ca0   0e00     movlw   0x00             	MOVLW	0x00
000ca2   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000ca4   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000ca6   0e00     movlw   0x00             	MOVLW	0x00
000ca8   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000caa   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000cac   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000cae   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000cb0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000cb2   0e0a     movlw   0x0a             	MOVLW	0x0a
000cb4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cb6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000cb8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cba   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000cbc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cbe   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000cc0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cc2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000cc4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cc6   ec7f     call    0x003afe, 0x0    	CALL	__modulong
000cc8   f01d
000cca   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000ccc   0e08     movlw   0x08             	MOVLW	0x08
000cce   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000cd0   0e30     movlw   0x30             	MOVLW	0x30
000cd2   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000cd4   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000cd6   ffe5
000cd8   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000cda   ffe9
000cdc   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000cde   fff3
000ce0   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000ce2   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000ce4   f027
                                           ;	.line	142; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000ce6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000ce8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000cea   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000cec   0e0a     movlw   0x0a             	MOVLW	0x0a
000cee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cf0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000cf2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cf4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000cf6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cf8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000cfa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cfc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000cfe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d00   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000d02   f01e
000d04   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000d06   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000d08   f001
000d0a   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000d0c   f002
000d0e   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000d10   f003
000d12   0e08     movlw   0x08             	MOVLW	0x08
000d14   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	143; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
000d16   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000d18   0f08     addlw   0x08             	ADDLW	0x08
000d1a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000d1c   0e00     movlw   0x00             	MOVLW	0x00
000d1e   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000d20   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000d22   0e00     movlw   0x00             	MOVLW	0x00
000d24   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000d26   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000d28   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000d2a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000d2c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000d2e   0e0a     movlw   0x0a             	MOVLW	0x0a
000d30   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d32   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000d34   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d36   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000d38   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d3a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000d3c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d3e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000d40   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d42   ec7f     call    0x003afe, 0x0    	CALL	__modulong
000d44   f01d
000d46   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000d48   0e08     movlw   0x08             	MOVLW	0x08
000d4a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000d4c   0e30     movlw   0x30             	MOVLW	0x30
000d4e   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000d50   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000d52   ffe5
000d54   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000d56   ffe9
000d58   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000d5a   fff3
000d5c   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000d5e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000d60   f027
                                           ;	.line	144; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000d62   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000d64   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000d66   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000d68   0e0a     movlw   0x0a             	MOVLW	0x0a
000d6a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d6c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000d6e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d70   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000d72   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d74   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000d76   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d78   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000d7a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d7c   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000d7e   f01e
000d80   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000d82   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000d84   f001
000d86   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000d88   f002
000d8a   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000d8c   f003
000d8e   0e08     movlw   0x08             	MOVLW	0x08
000d90   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	145; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + (val % 10);
000d92   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000d94   0f07     addlw   0x07             	ADDLW	0x07
000d96   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000d98   0e00     movlw   0x00             	MOVLW	0x00
000d9a   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000d9c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000d9e   0e00     movlw   0x00             	MOVLW	0x00
000da0   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000da2   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000da4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000da6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000da8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000daa   0e0a     movlw   0x0a             	MOVLW	0x0a
000dac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000dae   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000db0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000db2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000db4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000db6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000db8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000dba   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000dbc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000dbe   ec7f     call    0x003afe, 0x0    	CALL	__modulong
000dc0   f01d
000dc2   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000dc4   0e08     movlw   0x08             	MOVLW	0x08
000dc6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000dc8   0e30     movlw   0x30             	MOVLW	0x30
000dca   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000dcc   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000dce   ffe5
000dd0   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000dd2   ffe9
000dd4   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000dd6   fff3
000dd8   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000dda   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000ddc   f027
                                           ;	.line	146; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000dde   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000de0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000de2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000de4   0e0a     movlw   0x0a             	MOVLW	0x0a
000de6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000de8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000dea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000dec   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000dee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000df0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000df2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000df4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000df6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000df8   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000dfa   f01e
000dfc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000dfe   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000e00   f001
000e02   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000e04   f002
000e06   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000e08   f003
000e0a   0e08     movlw   0x08             	MOVLW	0x08
000e0c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	147; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = '0' + (val % 10);
000e0e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000e10   0f06     addlw   0x06             	ADDLW	0x06
000e12   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000e14   0e00     movlw   0x00             	MOVLW	0x00
000e16   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000e18   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000e1a   0e00     movlw   0x00             	MOVLW	0x00
000e1c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000e1e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000e20   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000e22   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000e24   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000e26   0e0a     movlw   0x0a             	MOVLW	0x0a
000e28   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e2a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000e2c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e2e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000e30   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e32   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000e34   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e36   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000e38   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e3a   ec7f     call    0x003afe, 0x0    	CALL	__modulong
000e3c   f01d
000e3e   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000e40   0e08     movlw   0x08             	MOVLW	0x08
000e42   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000e44   0e30     movlw   0x30             	MOVLW	0x30
000e46   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000e48   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000e4a   ffe5
000e4c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000e4e   ffe9
000e50   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000e52   fff3
000e54   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000e56   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000e58   f027
                                           ;	.line	148; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000e5a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000e5c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000e5e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000e60   0e0a     movlw   0x0a             	MOVLW	0x0a
000e62   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e64   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000e66   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e68   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000e6a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e6c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000e6e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e70   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000e72   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e74   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000e76   f01e
000e78   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000e7a   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000e7c   f001
000e7e   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000e80   f002
000e82   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000e84   f003
000e86   0e08     movlw   0x08             	MOVLW	0x08
000e88   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	149; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = '0' + (val % 10);
000e8a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000e8c   0f05     addlw   0x05             	ADDLW	0x05
000e8e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000e90   0e00     movlw   0x00             	MOVLW	0x00
000e92   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000e94   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000e96   0e00     movlw   0x00             	MOVLW	0x00
000e98   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000e9a   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000e9c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000e9e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000ea0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000ea2   0e0a     movlw   0x0a             	MOVLW	0x0a
000ea4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ea6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000ea8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000eaa   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000eac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000eae   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000eb0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000eb2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000eb4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000eb6   ec7f     call    0x003afe, 0x0    	CALL	__modulong
000eb8   f01d
000eba   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000ebc   0e08     movlw   0x08             	MOVLW	0x08
000ebe   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000ec0   0e30     movlw   0x30             	MOVLW	0x30
000ec2   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000ec4   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000ec6   ffe5
000ec8   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000eca   ffe9
000ecc   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000ece   fff3
000ed0   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000ed2   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000ed4   f027
                                           ;	.line	150; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000ed6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000ed8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000eda   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000edc   0e0a     movlw   0x0a             	MOVLW	0x0a
000ede   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ee0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000ee2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ee4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000ee6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ee8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000eea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000eec   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000eee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ef0   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000ef2   f01e
000ef4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000ef6   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000ef8   f001
000efa   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000efc   f002
000efe   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000f00   f003
000f02   0e08     movlw   0x08             	MOVLW	0x08
000f04   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	151; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
000f06   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000f08   0f04     addlw   0x04             	ADDLW	0x04
000f0a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000f0c   0e00     movlw   0x00             	MOVLW	0x00
000f0e   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000f10   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000f12   0e00     movlw   0x00             	MOVLW	0x00
000f14   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000f16   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000f18   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f1a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f1c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f1e   0e0a     movlw   0x0a             	MOVLW	0x0a
000f20   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f22   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000f24   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f26   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000f28   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f2a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000f2c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f2e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000f30   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f32   ec7f     call    0x003afe, 0x0    	CALL	__modulong
000f34   f01d
000f36   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000f38   0e08     movlw   0x08             	MOVLW	0x08
000f3a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000f3c   0e30     movlw   0x30             	MOVLW	0x30
000f3e   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000f40   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000f42   ffe5
000f44   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000f46   ffe9
000f48   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000f4a   fff3
000f4c   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000f4e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000f50   f027
                                           ;	.line	152; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000f52   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f54   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f56   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f58   0e0a     movlw   0x0a             	MOVLW	0x0a
000f5a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f5c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000f5e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f60   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000f62   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f64   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000f66   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f68   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000f6a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f6c   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000f6e   f01e
000f70   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000f72   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000f74   f001
000f76   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000f78   f002
000f7a   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000f7c   f003
000f7e   0e08     movlw   0x08             	MOVLW	0x08
000f80   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	153; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + (val % 10);
000f82   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000f84   0f03     addlw   0x03             	ADDLW	0x03
000f86   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000f88   0e00     movlw   0x00             	MOVLW	0x00
000f8a   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000f8c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000f8e   0e00     movlw   0x00             	MOVLW	0x00
000f90   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000f92   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000f94   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f96   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f98   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f9a   0e0a     movlw   0x0a             	MOVLW	0x0a
000f9c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f9e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000fa0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fa2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000fa4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fa6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000fa8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000faa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000fac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fae   ec7f     call    0x003afe, 0x0    	CALL	__modulong
000fb0   f01d
000fb2   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000fb4   0e08     movlw   0x08             	MOVLW	0x08
000fb6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000fb8   0e30     movlw   0x30             	MOVLW	0x30
000fba   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000fbc   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000fbe   ffe5
000fc0   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000fc2   ffe9
000fc4   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000fc6   fff3
000fc8   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000fca   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
000fcc   f027
                                           ;	.line	154; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000fce   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000fd0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000fd2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000fd4   0e0a     movlw   0x0a             	MOVLW	0x0a
000fd6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fd8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000fda   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fdc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000fde   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fe0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000fe2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fe4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000fe6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fe8   ec1c     call    0x003c38, 0x0    	CALL	__divulong
000fea   f01e
000fec   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000fee   0e08     movlw   0x08             	MOVLW	0x08
000ff0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	155; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + val;
000ff2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000ff4   0f02     addlw   0x02             	ADDLW	0x02
000ff6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000ff8   0e00     movlw   0x00             	MOVLW	0x00
000ffa   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000ffc   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000ffe   0e00     movlw   0x00             	MOVLW	0x00
001000   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001002   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001004   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001006   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001008   0e30     movlw   0x30             	MOVLW	0x30
00100a   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
00100c   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00100e   ffe5
001010   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001012   ffe9
001014   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001016   fff3
001018   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00101a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00101c   f027
                                           ;	.line	156; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
00101e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001020   0f01     addlw   0x01             	ADDLW	0x01
001022   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001024   0e00     movlw   0x00             	MOVLW	0x00
001026   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001028   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00102a   0e00     movlw   0x00             	MOVLW	0x00
00102c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00102e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001030   0e20     movlw   0x20             	MOVLW	0x20
001032   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001034   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001036   ffe9
001038   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00103a   fff3
00103c   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00103e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001040   f027
                                           ;	.line	157; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
001042   0e20     movlw   0x20             	MOVLW	0x20
001044   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001046   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001048   ffe9
00104a   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
00104c   fff3
00104e   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001050   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001052   f027
                                           ;	.line	158; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
001054   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001056   0f0a     addlw   0x0a             	ADDLW	0x0a
001058   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00105a   0e00     movlw   0x00             	MOVLW	0x00
00105c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00105e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001060   0e00     movlw   0x00             	MOVLW	0x00
001062   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001064   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001066   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001068   ffe9
00106a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00106c   fff3
00106e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001070   f027
001072   ef39     goto    0x002272         	GOTO	_00245_DS_
001074   f011
                                           _00237_DS_:
                                           ;	.line	159; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 999999) {
001076   0e00     movlw   0x00             	MOVLW	0x00
001078   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
00107a   e108     bnz     0x00108c         	BNZ	_00277_DS_
00107c   0e0f     movlw   0x0f             	MOVLW	0x0f
00107e   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
001080   e105     bnz     0x00108c         	BNZ	_00277_DS_
001082   0e42     movlw   0x42             	MOVLW	0x42
001084   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001086   e102     bnz     0x00108c         	BNZ	_00277_DS_
001088   0e40     movlw   0x40             	MOVLW	0x40
00108a   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00277_DS_:
00108c   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00108e   d1c2     bra     0x001414         	BRA	_00234_DS_
                                           ;	.line	160; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
001090   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001092   0f09     addlw   0x09             	ADDLW	0x09
001094   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001096   0e00     movlw   0x00             	MOVLW	0x00
001098   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00109a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00109c   0e00     movlw   0x00             	MOVLW	0x00
00109e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0010a0   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0010a2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0010a4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0010a6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0010a8   0e0a     movlw   0x0a             	MOVLW	0x0a
0010aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010ac   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0010ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010b0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0010b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010b4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0010b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010b8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0010ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010bc   ec7f     call    0x003afe, 0x0    	CALL	__modulong
0010be   f01d
0010c0   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0010c2   0e08     movlw   0x08             	MOVLW	0x08
0010c4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0010c6   0e30     movlw   0x30             	MOVLW	0x30
0010c8   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0010ca   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0010cc   ffe5
0010ce   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0010d0   ffe9
0010d2   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0010d4   fff3
0010d6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0010d8   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0010da   f027
                                           ;	.line	161; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0010dc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0010de   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0010e0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0010e2   0e0a     movlw   0x0a             	MOVLW	0x0a
0010e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010e6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0010e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010ea   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0010ec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010ee   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0010f0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010f2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0010f4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010f6   ec1c     call    0x003c38, 0x0    	CALL	__divulong
0010f8   f01e
0010fa   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0010fc   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0010fe   f001
001100   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001102   f002
001104   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001106   f003
001108   0e08     movlw   0x08             	MOVLW	0x08
00110a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	162; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
00110c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00110e   0f08     addlw   0x08             	ADDLW	0x08
001110   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001112   0e00     movlw   0x00             	MOVLW	0x00
001114   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001116   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001118   0e00     movlw   0x00             	MOVLW	0x00
00111a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00111c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00111e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001120   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001122   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001124   0e0a     movlw   0x0a             	MOVLW	0x0a
001126   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001128   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00112a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00112c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00112e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001130   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001132   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001134   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001136   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001138   ec7f     call    0x003afe, 0x0    	CALL	__modulong
00113a   f01d
00113c   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00113e   0e08     movlw   0x08             	MOVLW	0x08
001140   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001142   0e30     movlw   0x30             	MOVLW	0x30
001144   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001146   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001148   ffe5
00114a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00114c   ffe9
00114e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001150   fff3
001152   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001154   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001156   f027
                                           ;	.line	163; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001158   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00115a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00115c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00115e   0e0a     movlw   0x0a             	MOVLW	0x0a
001160   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001162   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001164   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001166   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001168   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00116a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00116c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00116e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001170   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001172   ec1c     call    0x003c38, 0x0    	CALL	__divulong
001174   f01e
001176   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001178   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00117a   f001
00117c   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
00117e   f002
001180   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001182   f003
001184   0e08     movlw   0x08             	MOVLW	0x08
001186   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	164; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + (val % 10);
001188   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00118a   0f07     addlw   0x07             	ADDLW	0x07
00118c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00118e   0e00     movlw   0x00             	MOVLW	0x00
001190   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001192   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001194   0e00     movlw   0x00             	MOVLW	0x00
001196   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001198   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00119a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00119c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00119e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0011a0   0e0a     movlw   0x0a             	MOVLW	0x0a
0011a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011a4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0011a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011a8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0011aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011ac   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0011ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011b0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0011b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011b4   ec7f     call    0x003afe, 0x0    	CALL	__modulong
0011b6   f01d
0011b8   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0011ba   0e08     movlw   0x08             	MOVLW	0x08
0011bc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0011be   0e30     movlw   0x30             	MOVLW	0x30
0011c0   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0011c2   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0011c4   ffe5
0011c6   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0011c8   ffe9
0011ca   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0011cc   fff3
0011ce   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0011d0   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0011d2   f027
                                           ;	.line	165; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0011d4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0011d6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0011d8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0011da   0e0a     movlw   0x0a             	MOVLW	0x0a
0011dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011de   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0011e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011e2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0011e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011e6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0011e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011ea   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0011ec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011ee   ec1c     call    0x003c38, 0x0    	CALL	__divulong
0011f0   f01e
0011f2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0011f4   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0011f6   f001
0011f8   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0011fa   f002
0011fc   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0011fe   f003
001200   0e08     movlw   0x08             	MOVLW	0x08
001202   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	166; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = '0' + (val % 10);
001204   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001206   0f06     addlw   0x06             	ADDLW	0x06
001208   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00120a   0e00     movlw   0x00             	MOVLW	0x00
00120c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00120e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001210   0e00     movlw   0x00             	MOVLW	0x00
001212   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001214   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001216   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001218   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00121a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00121c   0e0a     movlw   0x0a             	MOVLW	0x0a
00121e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001220   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001222   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001224   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001226   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001228   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00122a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00122c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00122e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001230   ec7f     call    0x003afe, 0x0    	CALL	__modulong
001232   f01d
001234   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001236   0e08     movlw   0x08             	MOVLW	0x08
001238   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00123a   0e30     movlw   0x30             	MOVLW	0x30
00123c   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
00123e   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001240   ffe5
001242   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001244   ffe9
001246   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001248   fff3
00124a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00124c   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00124e   f027
                                           ;	.line	167; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001250   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001252   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001254   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001256   0e0a     movlw   0x0a             	MOVLW	0x0a
001258   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00125a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00125c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00125e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001260   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001262   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001264   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001266   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001268   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00126a   ec1c     call    0x003c38, 0x0    	CALL	__divulong
00126c   f01e
00126e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001270   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001272   f001
001274   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001276   f002
001278   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00127a   f003
00127c   0e08     movlw   0x08             	MOVLW	0x08
00127e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	168; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = '0' + (val % 10);
001280   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001282   0f05     addlw   0x05             	ADDLW	0x05
001284   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001286   0e00     movlw   0x00             	MOVLW	0x00
001288   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00128a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00128c   0e00     movlw   0x00             	MOVLW	0x00
00128e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001290   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001292   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001294   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001296   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001298   0e0a     movlw   0x0a             	MOVLW	0x0a
00129a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00129c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00129e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012a0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0012a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012a4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0012a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012a8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0012aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012ac   ec7f     call    0x003afe, 0x0    	CALL	__modulong
0012ae   f01d
0012b0   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0012b2   0e08     movlw   0x08             	MOVLW	0x08
0012b4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0012b6   0e30     movlw   0x30             	MOVLW	0x30
0012b8   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0012ba   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0012bc   ffe5
0012be   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0012c0   ffe9
0012c2   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0012c4   fff3
0012c6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0012c8   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0012ca   f027
                                           ;	.line	169; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0012cc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0012ce   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0012d0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0012d2   0e0a     movlw   0x0a             	MOVLW	0x0a
0012d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012d6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0012d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012da   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0012dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012de   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0012e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012e2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0012e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012e6   ec1c     call    0x003c38, 0x0    	CALL	__divulong
0012e8   f01e
0012ea   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0012ec   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0012ee   f001
0012f0   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0012f2   f002
0012f4   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0012f6   f003
0012f8   0e08     movlw   0x08             	MOVLW	0x08
0012fa   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	170; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
0012fc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0012fe   0f04     addlw   0x04             	ADDLW	0x04
001300   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001302   0e00     movlw   0x00             	MOVLW	0x00
001304   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001306   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001308   0e00     movlw   0x00             	MOVLW	0x00
00130a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00130c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00130e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001310   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001312   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001314   0e0a     movlw   0x0a             	MOVLW	0x0a
001316   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001318   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00131a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00131c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00131e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001320   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001322   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001324   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001326   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001328   ec7f     call    0x003afe, 0x0    	CALL	__modulong
00132a   f01d
00132c   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00132e   0e08     movlw   0x08             	MOVLW	0x08
001330   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001332   0e30     movlw   0x30             	MOVLW	0x30
001334   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001336   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001338   ffe5
00133a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00133c   ffe9
00133e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001340   fff3
001342   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001344   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001346   f027
                                           ;	.line	171; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001348   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00134a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00134c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00134e   0e0a     movlw   0x0a             	MOVLW	0x0a
001350   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001352   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001354   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001356   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001358   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00135a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00135c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00135e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001360   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001362   ec1c     call    0x003c38, 0x0    	CALL	__divulong
001364   f01e
001366   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001368   0e08     movlw   0x08             	MOVLW	0x08
00136a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	172; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + val;
00136c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00136e   0f03     addlw   0x03             	ADDLW	0x03
001370   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001372   0e00     movlw   0x00             	MOVLW	0x00
001374   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001376   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001378   0e00     movlw   0x00             	MOVLW	0x00
00137a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00137c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00137e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001380   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001382   0e30     movlw   0x30             	MOVLW	0x30
001384   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001386   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001388   ffe5
00138a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00138c   ffe9
00138e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001390   fff3
001392   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001394   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001396   f027
                                           ;	.line	173; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
001398   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00139a   0f02     addlw   0x02             	ADDLW	0x02
00139c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00139e   0e00     movlw   0x00             	MOVLW	0x00
0013a0   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0013a2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0013a4   0e00     movlw   0x00             	MOVLW	0x00
0013a6   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0013a8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0013aa   0e20     movlw   0x20             	MOVLW	0x20
0013ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013ae   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0013b0   ffe9
0013b2   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0013b4   fff3
0013b6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0013b8   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0013ba   f027
                                           ;	.line	174; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
0013bc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0013be   0f01     addlw   0x01             	ADDLW	0x01
0013c0   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0013c2   0e00     movlw   0x00             	MOVLW	0x00
0013c4   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0013c6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0013c8   0e00     movlw   0x00             	MOVLW	0x00
0013ca   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0013cc   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0013ce   0e20     movlw   0x20             	MOVLW	0x20
0013d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013d2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0013d4   ffe9
0013d6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0013d8   fff3
0013da   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0013dc   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0013de   f027
                                           ;	.line	175; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
0013e0   0e20     movlw   0x20             	MOVLW	0x20
0013e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013e4   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0013e6   ffe9
0013e8   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
0013ea   fff3
0013ec   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0013ee   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0013f0   f027
                                           ;	.line	176; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
0013f2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0013f4   0f0a     addlw   0x0a             	ADDLW	0x0a
0013f6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0013f8   0e00     movlw   0x00             	MOVLW	0x00
0013fa   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0013fc   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0013fe   0e00     movlw   0x00             	MOVLW	0x00
001400   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001402   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001404   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001406   ffe9
001408   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00140a   fff3
00140c   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00140e   f027
001410   ef39     goto    0x002272         	GOTO	_00245_DS_
001412   f011
                                           _00234_DS_:
                                           ;	.line	177; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 99999) {
001414   0e00     movlw   0x00             	MOVLW	0x00
001416   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
001418   e108     bnz     0x00142a         	BNZ	_00278_DS_
00141a   0e01     movlw   0x01             	MOVLW	0x01
00141c   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
00141e   e105     bnz     0x00142a         	BNZ	_00278_DS_
001420   0e86     movlw   0x86             	MOVLW	0x86
001422   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001424   e102     bnz     0x00142a         	BNZ	_00278_DS_
001426   0ea0     movlw   0xa0             	MOVLW	0xa0
001428   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00278_DS_:
00142a   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00142c   d196     bra     0x00175a         	BRA	_00231_DS_
                                           ;	.line	178; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
00142e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001430   0f09     addlw   0x09             	ADDLW	0x09
001432   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001434   0e00     movlw   0x00             	MOVLW	0x00
001436   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001438   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00143a   0e00     movlw   0x00             	MOVLW	0x00
00143c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00143e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001440   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001442   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001444   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001446   0e0a     movlw   0x0a             	MOVLW	0x0a
001448   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00144a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00144c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00144e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001450   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001452   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001454   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001456   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001458   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00145a   ec7f     call    0x003afe, 0x0    	CALL	__modulong
00145c   f01d
00145e   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001460   0e08     movlw   0x08             	MOVLW	0x08
001462   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001464   0e30     movlw   0x30             	MOVLW	0x30
001466   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001468   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00146a   ffe5
00146c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00146e   ffe9
001470   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001472   fff3
001474   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001476   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001478   f027
                                           ;	.line	179; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00147a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00147c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00147e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001480   0e0a     movlw   0x0a             	MOVLW	0x0a
001482   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001484   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001486   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001488   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00148a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00148c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00148e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001490   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001492   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001494   ec1c     call    0x003c38, 0x0    	CALL	__divulong
001496   f01e
001498   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00149a   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00149c   f001
00149e   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0014a0   f002
0014a2   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0014a4   f003
0014a6   0e08     movlw   0x08             	MOVLW	0x08
0014a8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	180; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
0014aa   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0014ac   0f08     addlw   0x08             	ADDLW	0x08
0014ae   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0014b0   0e00     movlw   0x00             	MOVLW	0x00
0014b2   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0014b4   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0014b6   0e00     movlw   0x00             	MOVLW	0x00
0014b8   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0014ba   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0014bc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0014be   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0014c0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0014c2   0e0a     movlw   0x0a             	MOVLW	0x0a
0014c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014c6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0014c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014ca   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0014cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014ce   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0014d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014d2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0014d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014d6   ec7f     call    0x003afe, 0x0    	CALL	__modulong
0014d8   f01d
0014da   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0014dc   0e08     movlw   0x08             	MOVLW	0x08
0014de   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0014e0   0e30     movlw   0x30             	MOVLW	0x30
0014e2   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0014e4   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0014e6   ffe5
0014e8   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0014ea   ffe9
0014ec   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0014ee   fff3
0014f0   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0014f2   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0014f4   f027
                                           ;	.line	181; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0014f6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0014f8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0014fa   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0014fc   0e0a     movlw   0x0a             	MOVLW	0x0a
0014fe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001500   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001502   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001504   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001506   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001508   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00150a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00150c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00150e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001510   ec1c     call    0x003c38, 0x0    	CALL	__divulong
001512   f01e
001514   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001516   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001518   f001
00151a   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
00151c   f002
00151e   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001520   f003
001522   0e08     movlw   0x08             	MOVLW	0x08
001524   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	182; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + (val % 10);
001526   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001528   0f07     addlw   0x07             	ADDLW	0x07
00152a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00152c   0e00     movlw   0x00             	MOVLW	0x00
00152e   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001530   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001532   0e00     movlw   0x00             	MOVLW	0x00
001534   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001536   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001538   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00153a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00153c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00153e   0e0a     movlw   0x0a             	MOVLW	0x0a
001540   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001542   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001544   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001546   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001548   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00154a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00154c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00154e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001550   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001552   ec7f     call    0x003afe, 0x0    	CALL	__modulong
001554   f01d
001556   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001558   0e08     movlw   0x08             	MOVLW	0x08
00155a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00155c   0e30     movlw   0x30             	MOVLW	0x30
00155e   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001560   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001562   ffe5
001564   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001566   ffe9
001568   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00156a   fff3
00156c   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00156e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001570   f027
                                           ;	.line	183; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001572   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001574   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001576   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001578   0e0a     movlw   0x0a             	MOVLW	0x0a
00157a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00157c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00157e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001580   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001582   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001584   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001586   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001588   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00158a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00158c   ec1c     call    0x003c38, 0x0    	CALL	__divulong
00158e   f01e
001590   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001592   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001594   f001
001596   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001598   f002
00159a   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00159c   f003
00159e   0e08     movlw   0x08             	MOVLW	0x08
0015a0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	184; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = '0' + (val % 10);
0015a2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0015a4   0f06     addlw   0x06             	ADDLW	0x06
0015a6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0015a8   0e00     movlw   0x00             	MOVLW	0x00
0015aa   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0015ac   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0015ae   0e00     movlw   0x00             	MOVLW	0x00
0015b0   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0015b2   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0015b4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0015b6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0015b8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0015ba   0e0a     movlw   0x0a             	MOVLW	0x0a
0015bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015be   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0015c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015c2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0015c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015c6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0015c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015ca   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0015cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015ce   ec7f     call    0x003afe, 0x0    	CALL	__modulong
0015d0   f01d
0015d2   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0015d4   0e08     movlw   0x08             	MOVLW	0x08
0015d6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0015d8   0e30     movlw   0x30             	MOVLW	0x30
0015da   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0015dc   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0015de   ffe5
0015e0   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0015e2   ffe9
0015e4   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0015e6   fff3
0015e8   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0015ea   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0015ec   f027
                                           ;	.line	185; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0015ee   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0015f0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0015f2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0015f4   0e0a     movlw   0x0a             	MOVLW	0x0a
0015f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015f8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0015fa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015fc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0015fe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001600   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001602   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001604   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001606   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001608   ec1c     call    0x003c38, 0x0    	CALL	__divulong
00160a   f01e
00160c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00160e   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001610   f001
001612   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001614   f002
001616   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001618   f003
00161a   0e08     movlw   0x08             	MOVLW	0x08
00161c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	186; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = '0' + (val % 10);
00161e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001620   0f05     addlw   0x05             	ADDLW	0x05
001622   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001624   0e00     movlw   0x00             	MOVLW	0x00
001626   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001628   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00162a   0e00     movlw   0x00             	MOVLW	0x00
00162c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00162e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001630   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001632   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001634   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001636   0e0a     movlw   0x0a             	MOVLW	0x0a
001638   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00163a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00163c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00163e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001640   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001642   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001644   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001646   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001648   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00164a   ec7f     call    0x003afe, 0x0    	CALL	__modulong
00164c   f01d
00164e   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001650   0e08     movlw   0x08             	MOVLW	0x08
001652   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001654   0e30     movlw   0x30             	MOVLW	0x30
001656   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001658   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00165a   ffe5
00165c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00165e   ffe9
001660   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001662   fff3
001664   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001666   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001668   f027
                                           ;	.line	187; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00166a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00166c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00166e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001670   0e0a     movlw   0x0a             	MOVLW	0x0a
001672   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001674   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001676   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001678   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00167a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00167c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00167e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001680   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001682   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001684   ec1c     call    0x003c38, 0x0    	CALL	__divulong
001686   f01e
001688   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00168a   0e08     movlw   0x08             	MOVLW	0x08
00168c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	188; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + val;
00168e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001690   0f04     addlw   0x04             	ADDLW	0x04
001692   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001694   0e00     movlw   0x00             	MOVLW	0x00
001696   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001698   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00169a   0e00     movlw   0x00             	MOVLW	0x00
00169c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00169e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0016a0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0016a2   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0016a4   0e30     movlw   0x30             	MOVLW	0x30
0016a6   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0016a8   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0016aa   ffe5
0016ac   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0016ae   ffe9
0016b0   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0016b2   fff3
0016b4   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0016b6   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0016b8   f027
                                           ;	.line	189; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = ' ';
0016ba   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0016bc   0f03     addlw   0x03             	ADDLW	0x03
0016be   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0016c0   0e00     movlw   0x00             	MOVLW	0x00
0016c2   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0016c4   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0016c6   0e00     movlw   0x00             	MOVLW	0x00
0016c8   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0016ca   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0016cc   0e20     movlw   0x20             	MOVLW	0x20
0016ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0016d0   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0016d2   ffe9
0016d4   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0016d6   fff3
0016d8   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0016da   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0016dc   f027
                                           ;	.line	190; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
0016de   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0016e0   0f02     addlw   0x02             	ADDLW	0x02
0016e2   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0016e4   0e00     movlw   0x00             	MOVLW	0x00
0016e6   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0016e8   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0016ea   0e00     movlw   0x00             	MOVLW	0x00
0016ec   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0016ee   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0016f0   0e20     movlw   0x20             	MOVLW	0x20
0016f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0016f4   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0016f6   ffe9
0016f8   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0016fa   fff3
0016fc   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0016fe   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001700   f027
                                           ;	.line	191; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
001702   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001704   0f01     addlw   0x01             	ADDLW	0x01
001706   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001708   0e00     movlw   0x00             	MOVLW	0x00
00170a   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00170c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00170e   0e00     movlw   0x00             	MOVLW	0x00
001710   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001712   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001714   0e20     movlw   0x20             	MOVLW	0x20
001716   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001718   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00171a   ffe9
00171c   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00171e   fff3
001720   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001722   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001724   f027
                                           ;	.line	192; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
001726   0e20     movlw   0x20             	MOVLW	0x20
001728   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00172a   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
00172c   ffe9
00172e   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
001730   fff3
001732   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001734   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001736   f027
                                           ;	.line	193; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
001738   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00173a   0f0a     addlw   0x0a             	ADDLW	0x0a
00173c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00173e   0e00     movlw   0x00             	MOVLW	0x00
001740   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001742   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001744   0e00     movlw   0x00             	MOVLW	0x00
001746   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001748   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00174a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00174c   ffe9
00174e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001750   fff3
001752   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001754   f027
001756   ef39     goto    0x002272         	GOTO	_00245_DS_
001758   f011
                                           _00231_DS_:
                                           ;	.line	194; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 9999) {
00175a   0e00     movlw   0x00             	MOVLW	0x00
00175c   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
00175e   e108     bnz     0x001770         	BNZ	_00279_DS_
001760   0e00     movlw   0x00             	MOVLW	0x00
001762   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
001764   e105     bnz     0x001770         	BNZ	_00279_DS_
001766   0e27     movlw   0x27             	MOVLW	0x27
001768   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
00176a   e102     bnz     0x001770         	BNZ	_00279_DS_
00176c   0e10     movlw   0x10             	MOVLW	0x10
00176e   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00279_DS_:
001770   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
001772   d16a     bra     0x001a48         	BRA	_00228_DS_
                                           ;	.line	195; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
001774   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001776   0f09     addlw   0x09             	ADDLW	0x09
001778   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00177a   0e00     movlw   0x00             	MOVLW	0x00
00177c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00177e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001780   0e00     movlw   0x00             	MOVLW	0x00
001782   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001784   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001786   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001788   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00178a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00178c   0e0a     movlw   0x0a             	MOVLW	0x0a
00178e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001790   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001792   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001794   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001796   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001798   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00179a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00179c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00179e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017a0   ec7f     call    0x003afe, 0x0    	CALL	__modulong
0017a2   f01d
0017a4   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0017a6   0e08     movlw   0x08             	MOVLW	0x08
0017a8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0017aa   0e30     movlw   0x30             	MOVLW	0x30
0017ac   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0017ae   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0017b0   ffe5
0017b2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0017b4   ffe9
0017b6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0017b8   fff3
0017ba   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0017bc   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0017be   f027
                                           ;	.line	196; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0017c0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0017c2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0017c4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0017c6   0e0a     movlw   0x0a             	MOVLW	0x0a
0017c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017ca   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0017cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017ce   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0017d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017d2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0017d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017d6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0017d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017da   ec1c     call    0x003c38, 0x0    	CALL	__divulong
0017dc   f01e
0017de   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0017e0   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0017e2   f001
0017e4   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0017e6   f002
0017e8   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0017ea   f003
0017ec   0e08     movlw   0x08             	MOVLW	0x08
0017ee   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	197; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
0017f0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0017f2   0f08     addlw   0x08             	ADDLW	0x08
0017f4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0017f6   0e00     movlw   0x00             	MOVLW	0x00
0017f8   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0017fa   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0017fc   0e00     movlw   0x00             	MOVLW	0x00
0017fe   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001800   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001802   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001804   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001806   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001808   0e0a     movlw   0x0a             	MOVLW	0x0a
00180a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00180c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00180e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001810   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001812   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001814   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001816   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001818   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00181a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00181c   ec7f     call    0x003afe, 0x0    	CALL	__modulong
00181e   f01d
001820   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001822   0e08     movlw   0x08             	MOVLW	0x08
001824   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001826   0e30     movlw   0x30             	MOVLW	0x30
001828   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
00182a   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00182c   ffe5
00182e   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001830   ffe9
001832   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001834   fff3
001836   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001838   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00183a   f027
                                           ;	.line	198; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00183c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00183e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001840   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001842   0e0a     movlw   0x0a             	MOVLW	0x0a
001844   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001846   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001848   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00184a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00184c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00184e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001850   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001852   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001854   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001856   ec1c     call    0x003c38, 0x0    	CALL	__divulong
001858   f01e
00185a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00185c   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00185e   f001
001860   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001862   f002
001864   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001866   f003
001868   0e08     movlw   0x08             	MOVLW	0x08
00186a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	199; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + (val % 10);
00186c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00186e   0f07     addlw   0x07             	ADDLW	0x07
001870   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001872   0e00     movlw   0x00             	MOVLW	0x00
001874   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001876   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001878   0e00     movlw   0x00             	MOVLW	0x00
00187a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00187c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00187e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001880   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001882   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001884   0e0a     movlw   0x0a             	MOVLW	0x0a
001886   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001888   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00188a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00188c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00188e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001890   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001892   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001894   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001896   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001898   ec7f     call    0x003afe, 0x0    	CALL	__modulong
00189a   f01d
00189c   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00189e   0e08     movlw   0x08             	MOVLW	0x08
0018a0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0018a2   0e30     movlw   0x30             	MOVLW	0x30
0018a4   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0018a6   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0018a8   ffe5
0018aa   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0018ac   ffe9
0018ae   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0018b0   fff3
0018b2   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0018b4   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0018b6   f027
                                           ;	.line	200; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0018b8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0018ba   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0018bc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0018be   0e0a     movlw   0x0a             	MOVLW	0x0a
0018c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018c2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0018c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018c6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0018c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018ca   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0018cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018ce   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0018d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018d2   ec1c     call    0x003c38, 0x0    	CALL	__divulong
0018d4   f01e
0018d6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0018d8   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0018da   f001
0018dc   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0018de   f002
0018e0   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0018e2   f003
0018e4   0e08     movlw   0x08             	MOVLW	0x08
0018e6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	201; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = '0' + (val % 10);
0018e8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0018ea   0f06     addlw   0x06             	ADDLW	0x06
0018ec   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0018ee   0e00     movlw   0x00             	MOVLW	0x00
0018f0   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0018f2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0018f4   0e00     movlw   0x00             	MOVLW	0x00
0018f6   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0018f8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0018fa   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0018fc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0018fe   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001900   0e0a     movlw   0x0a             	MOVLW	0x0a
001902   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001904   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001906   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001908   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00190a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00190c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00190e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001910   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001912   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001914   ec7f     call    0x003afe, 0x0    	CALL	__modulong
001916   f01d
001918   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00191a   0e08     movlw   0x08             	MOVLW	0x08
00191c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00191e   0e30     movlw   0x30             	MOVLW	0x30
001920   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001922   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001924   ffe5
001926   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001928   ffe9
00192a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00192c   fff3
00192e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001930   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001932   f027
                                           ;	.line	202; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001934   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001936   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001938   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00193a   0e0a     movlw   0x0a             	MOVLW	0x0a
00193c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00193e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001940   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001942   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001944   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001946   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001948   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00194a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00194c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00194e   ec1c     call    0x003c38, 0x0    	CALL	__divulong
001950   f01e
001952   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001954   0e08     movlw   0x08             	MOVLW	0x08
001956   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	203; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = '0' + val;
001958   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00195a   0f05     addlw   0x05             	ADDLW	0x05
00195c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00195e   0e00     movlw   0x00             	MOVLW	0x00
001960   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001962   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001964   0e00     movlw   0x00             	MOVLW	0x00
001966   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001968   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00196a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00196c   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00196e   0e30     movlw   0x30             	MOVLW	0x30
001970   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001972   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001974   ffe5
001976   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001978   ffe9
00197a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00197c   fff3
00197e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001980   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001982   f027
                                           ;	.line	204; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = ' ';
001984   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001986   0f04     addlw   0x04             	ADDLW	0x04
001988   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00198a   0e00     movlw   0x00             	MOVLW	0x00
00198c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00198e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001990   0e00     movlw   0x00             	MOVLW	0x00
001992   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001994   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001996   0e20     movlw   0x20             	MOVLW	0x20
001998   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00199a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00199c   ffe9
00199e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0019a0   fff3
0019a2   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0019a4   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0019a6   f027
                                           ;	.line	205; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = ' ';
0019a8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0019aa   0f03     addlw   0x03             	ADDLW	0x03
0019ac   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0019ae   0e00     movlw   0x00             	MOVLW	0x00
0019b0   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0019b2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0019b4   0e00     movlw   0x00             	MOVLW	0x00
0019b6   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0019b8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0019ba   0e20     movlw   0x20             	MOVLW	0x20
0019bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0019be   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0019c0   ffe9
0019c2   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0019c4   fff3
0019c6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0019c8   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0019ca   f027
                                           ;	.line	206; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
0019cc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0019ce   0f02     addlw   0x02             	ADDLW	0x02
0019d0   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0019d2   0e00     movlw   0x00             	MOVLW	0x00
0019d4   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0019d6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0019d8   0e00     movlw   0x00             	MOVLW	0x00
0019da   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0019dc   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0019de   0e20     movlw   0x20             	MOVLW	0x20
0019e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0019e2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0019e4   ffe9
0019e6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0019e8   fff3
0019ea   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0019ec   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0019ee   f027
                                           ;	.line	207; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
0019f0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0019f2   0f01     addlw   0x01             	ADDLW	0x01
0019f4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0019f6   0e00     movlw   0x00             	MOVLW	0x00
0019f8   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0019fa   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0019fc   0e00     movlw   0x00             	MOVLW	0x00
0019fe   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001a00   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001a02   0e20     movlw   0x20             	MOVLW	0x20
001a04   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a06   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001a08   ffe9
001a0a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001a0c   fff3
001a0e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001a10   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001a12   f027
                                           ;	.line	208; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
001a14   0e20     movlw   0x20             	MOVLW	0x20
001a16   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a18   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001a1a   ffe9
001a1c   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
001a1e   fff3
001a20   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001a22   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001a24   f027
                                           ;	.line	209; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
001a26   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001a28   0f0a     addlw   0x0a             	ADDLW	0x0a
001a2a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001a2c   0e00     movlw   0x00             	MOVLW	0x00
001a2e   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001a30   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001a32   0e00     movlw   0x00             	MOVLW	0x00
001a34   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001a36   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001a38   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001a3a   ffe9
001a3c   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001a3e   fff3
001a40   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001a42   f027
001a44   ef39     goto    0x002272         	GOTO	_00245_DS_
001a46   f011
                                           _00228_DS_:
                                           ;	.line	210; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 999) {
001a48   0e00     movlw   0x00             	MOVLW	0x00
001a4a   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
001a4c   e108     bnz     0x001a5e         	BNZ	_00280_DS_
001a4e   0e00     movlw   0x00             	MOVLW	0x00
001a50   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
001a52   e105     bnz     0x001a5e         	BNZ	_00280_DS_
001a54   0e03     movlw   0x03             	MOVLW	0x03
001a56   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001a58   e102     bnz     0x001a5e         	BNZ	_00280_DS_
001a5a   0ee8     movlw   0xe8             	MOVLW	0xe8
001a5c   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00280_DS_:
001a5e   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
001a60   d13e     bra     0x001cde         	BRA	_00225_DS_
                                           ;	.line	211; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
001a62   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001a64   0f09     addlw   0x09             	ADDLW	0x09
001a66   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001a68   0e00     movlw   0x00             	MOVLW	0x00
001a6a   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001a6c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001a6e   0e00     movlw   0x00             	MOVLW	0x00
001a70   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001a72   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001a74   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001a76   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001a78   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001a7a   0e0a     movlw   0x0a             	MOVLW	0x0a
001a7c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a7e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001a80   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a82   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001a84   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a86   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001a88   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a8a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001a8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a8e   ec7f     call    0x003afe, 0x0    	CALL	__modulong
001a90   f01d
001a92   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001a94   0e08     movlw   0x08             	MOVLW	0x08
001a96   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001a98   0e30     movlw   0x30             	MOVLW	0x30
001a9a   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001a9c   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001a9e   ffe5
001aa0   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001aa2   ffe9
001aa4   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001aa6   fff3
001aa8   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001aaa   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001aac   f027
                                           ;	.line	212; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001aae   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001ab0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001ab2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001ab4   0e0a     movlw   0x0a             	MOVLW	0x0a
001ab6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ab8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001aba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001abc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001abe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ac0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001ac2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ac4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001ac6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ac8   ec1c     call    0x003c38, 0x0    	CALL	__divulong
001aca   f01e
001acc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001ace   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001ad0   f001
001ad2   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001ad4   f002
001ad6   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001ad8   f003
001ada   0e08     movlw   0x08             	MOVLW	0x08
001adc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	213; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
001ade   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001ae0   0f08     addlw   0x08             	ADDLW	0x08
001ae2   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001ae4   0e00     movlw   0x00             	MOVLW	0x00
001ae6   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001ae8   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001aea   0e00     movlw   0x00             	MOVLW	0x00
001aec   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001aee   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001af0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001af2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001af4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001af6   0e0a     movlw   0x0a             	MOVLW	0x0a
001af8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001afa   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001afc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001afe   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001b00   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b02   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001b04   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b06   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b08   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b0a   ec7f     call    0x003afe, 0x0    	CALL	__modulong
001b0c   f01d
001b0e   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001b10   0e08     movlw   0x08             	MOVLW	0x08
001b12   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001b14   0e30     movlw   0x30             	MOVLW	0x30
001b16   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001b18   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001b1a   ffe5
001b1c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001b1e   ffe9
001b20   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001b22   fff3
001b24   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001b26   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001b28   f027
                                           ;	.line	214; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001b2a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001b2c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001b2e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001b30   0e0a     movlw   0x0a             	MOVLW	0x0a
001b32   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b34   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001b36   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b38   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001b3a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b3c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001b3e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b40   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b42   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b44   ec1c     call    0x003c38, 0x0    	CALL	__divulong
001b46   f01e
001b48   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001b4a   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001b4c   f001
001b4e   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001b50   f002
001b52   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001b54   f003
001b56   0e08     movlw   0x08             	MOVLW	0x08
001b58   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	215; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + (val % 10);
001b5a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001b5c   0f07     addlw   0x07             	ADDLW	0x07
001b5e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001b60   0e00     movlw   0x00             	MOVLW	0x00
001b62   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001b64   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001b66   0e00     movlw   0x00             	MOVLW	0x00
001b68   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001b6a   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001b6c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001b6e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001b70   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001b72   0e0a     movlw   0x0a             	MOVLW	0x0a
001b74   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b76   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001b78   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b7a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001b7c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b7e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001b80   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b82   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b84   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b86   ec7f     call    0x003afe, 0x0    	CALL	__modulong
001b88   f01d
001b8a   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001b8c   0e08     movlw   0x08             	MOVLW	0x08
001b8e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001b90   0e30     movlw   0x30             	MOVLW	0x30
001b92   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001b94   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001b96   ffe5
001b98   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001b9a   ffe9
001b9c   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001b9e   fff3
001ba0   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001ba2   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001ba4   f027
                                           ;	.line	216; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001ba6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001ba8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001baa   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001bac   0e0a     movlw   0x0a             	MOVLW	0x0a
001bae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bb0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001bb2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bb4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001bb6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bb8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001bba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bbc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001bbe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bc0   ec1c     call    0x003c38, 0x0    	CALL	__divulong
001bc2   f01e
001bc4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001bc6   0e08     movlw   0x08             	MOVLW	0x08
001bc8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	217; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = '0' + val;
001bca   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001bcc   0f06     addlw   0x06             	ADDLW	0x06
001bce   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001bd0   0e00     movlw   0x00             	MOVLW	0x00
001bd2   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001bd4   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001bd6   0e00     movlw   0x00             	MOVLW	0x00
001bd8   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001bda   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001bdc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001bde   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001be0   0e30     movlw   0x30             	MOVLW	0x30
001be2   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001be4   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001be6   ffe5
001be8   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001bea   ffe9
001bec   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001bee   fff3
001bf0   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001bf2   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001bf4   f027
                                           ;	.line	218; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = ' ';
001bf6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001bf8   0f05     addlw   0x05             	ADDLW	0x05
001bfa   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001bfc   0e00     movlw   0x00             	MOVLW	0x00
001bfe   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001c00   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001c02   0e00     movlw   0x00             	MOVLW	0x00
001c04   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001c06   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001c08   0e20     movlw   0x20             	MOVLW	0x20
001c0a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c0c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001c0e   ffe9
001c10   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001c12   fff3
001c14   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001c16   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001c18   f027
                                           ;	.line	219; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = ' ';
001c1a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001c1c   0f04     addlw   0x04             	ADDLW	0x04
001c1e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001c20   0e00     movlw   0x00             	MOVLW	0x00
001c22   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001c24   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001c26   0e00     movlw   0x00             	MOVLW	0x00
001c28   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001c2a   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001c2c   0e20     movlw   0x20             	MOVLW	0x20
001c2e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c30   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001c32   ffe9
001c34   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001c36   fff3
001c38   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001c3a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001c3c   f027
                                           ;	.line	220; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = ' ';
001c3e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001c40   0f03     addlw   0x03             	ADDLW	0x03
001c42   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001c44   0e00     movlw   0x00             	MOVLW	0x00
001c46   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001c48   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001c4a   0e00     movlw   0x00             	MOVLW	0x00
001c4c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001c4e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001c50   0e20     movlw   0x20             	MOVLW	0x20
001c52   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c54   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001c56   ffe9
001c58   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001c5a   fff3
001c5c   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001c5e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001c60   f027
                                           ;	.line	221; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
001c62   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001c64   0f02     addlw   0x02             	ADDLW	0x02
001c66   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001c68   0e00     movlw   0x00             	MOVLW	0x00
001c6a   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001c6c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001c6e   0e00     movlw   0x00             	MOVLW	0x00
001c70   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001c72   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001c74   0e20     movlw   0x20             	MOVLW	0x20
001c76   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c78   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001c7a   ffe9
001c7c   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001c7e   fff3
001c80   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001c82   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001c84   f027
                                           ;	.line	222; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
001c86   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001c88   0f01     addlw   0x01             	ADDLW	0x01
001c8a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001c8c   0e00     movlw   0x00             	MOVLW	0x00
001c8e   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001c90   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001c92   0e00     movlw   0x00             	MOVLW	0x00
001c94   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001c96   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001c98   0e20     movlw   0x20             	MOVLW	0x20
001c9a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c9c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001c9e   ffe9
001ca0   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001ca2   fff3
001ca4   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001ca6   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001ca8   f027
                                           ;	.line	223; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
001caa   0e20     movlw   0x20             	MOVLW	0x20
001cac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001cae   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001cb0   ffe9
001cb2   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
001cb4   fff3
001cb6   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001cb8   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001cba   f027
                                           ;	.line	224; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
001cbc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001cbe   0f0a     addlw   0x0a             	ADDLW	0x0a
001cc0   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001cc2   0e00     movlw   0x00             	MOVLW	0x00
001cc4   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001cc6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001cc8   0e00     movlw   0x00             	MOVLW	0x00
001cca   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001ccc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001cce   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001cd0   ffe9
001cd2   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001cd4   fff3
001cd6   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001cd8   f027
001cda   ef39     goto    0x002272         	GOTO	_00245_DS_
001cdc   f011
                                           _00225_DS_:
                                           ;	.line	225; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 99) {
001cde   0e00     movlw   0x00             	MOVLW	0x00
001ce0   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
001ce2   e108     bnz     0x001cf4         	BNZ	_00281_DS_
001ce4   0e00     movlw   0x00             	MOVLW	0x00
001ce6   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
001ce8   e105     bnz     0x001cf4         	BNZ	_00281_DS_
001cea   0e00     movlw   0x00             	MOVLW	0x00
001cec   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001cee   e102     bnz     0x001cf4         	BNZ	_00281_DS_
001cf0   0e64     movlw   0x64             	MOVLW	0x64
001cf2   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00281_DS_:
001cf4   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
001cf6   d111     bra     0x001f1a         	BRA	_00222_DS_
                                           ;	.line	226; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
001cf8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001cfa   0f09     addlw   0x09             	ADDLW	0x09
001cfc   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001cfe   0e00     movlw   0x00             	MOVLW	0x00
001d00   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001d02   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001d04   0e00     movlw   0x00             	MOVLW	0x00
001d06   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001d08   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001d0a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d0c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d0e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d10   0e0a     movlw   0x0a             	MOVLW	0x0a
001d12   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d14   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001d16   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d18   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001d1a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d1c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d1e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d20   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001d22   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d24   ec7f     call    0x003afe, 0x0    	CALL	__modulong
001d26   f01d
001d28   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001d2a   0e08     movlw   0x08             	MOVLW	0x08
001d2c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001d2e   0e30     movlw   0x30             	MOVLW	0x30
001d30   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001d32   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001d34   ffe5
001d36   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001d38   ffe9
001d3a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001d3c   fff3
001d3e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001d40   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001d42   f027
                                           ;	.line	227; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001d44   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d46   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d48   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d4a   0e0a     movlw   0x0a             	MOVLW	0x0a
001d4c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d4e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001d50   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d52   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001d54   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d56   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d58   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d5a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001d5c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d5e   ec1c     call    0x003c38, 0x0    	CALL	__divulong
001d60   f01e
001d62   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001d64   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001d66   f001
001d68   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001d6a   f002
001d6c   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001d6e   f003
001d70   0e08     movlw   0x08             	MOVLW	0x08
001d72   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	228; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
001d74   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001d76   0f08     addlw   0x08             	ADDLW	0x08
001d78   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001d7a   0e00     movlw   0x00             	MOVLW	0x00
001d7c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001d7e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001d80   0e00     movlw   0x00             	MOVLW	0x00
001d82   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001d84   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001d86   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d88   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d8a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d8c   0e0a     movlw   0x0a             	MOVLW	0x0a
001d8e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d90   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001d92   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d94   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001d96   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d98   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d9a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d9c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001d9e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001da0   ec7f     call    0x003afe, 0x0    	CALL	__modulong
001da2   f01d
001da4   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001da6   0e08     movlw   0x08             	MOVLW	0x08
001da8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001daa   0e30     movlw   0x30             	MOVLW	0x30
001dac   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001dae   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001db0   ffe5
001db2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001db4   ffe9
001db6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001db8   fff3
001dba   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001dbc   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001dbe   f027
                                           ;	.line	229; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001dc0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001dc2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001dc4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001dc6   0e0a     movlw   0x0a             	MOVLW	0x0a
001dc8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001dca   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001dcc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001dce   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001dd0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001dd2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001dd4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001dd6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001dd8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001dda   ec1c     call    0x003c38, 0x0    	CALL	__divulong
001ddc   f01e
001dde   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001de0   0e08     movlw   0x08             	MOVLW	0x08
001de2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	230; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + val;
001de4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001de6   0f07     addlw   0x07             	ADDLW	0x07
001de8   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001dea   0e00     movlw   0x00             	MOVLW	0x00
001dec   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001dee   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001df0   0e00     movlw   0x00             	MOVLW	0x00
001df2   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001df4   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001df6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001df8   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001dfa   0e30     movlw   0x30             	MOVLW	0x30
001dfc   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001dfe   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001e00   ffe5
001e02   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001e04   ffe9
001e06   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001e08   fff3
001e0a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001e0c   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001e0e   f027
                                           ;	.line	231; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = ' ';
001e10   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001e12   0f06     addlw   0x06             	ADDLW	0x06
001e14   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001e16   0e00     movlw   0x00             	MOVLW	0x00
001e18   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001e1a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001e1c   0e00     movlw   0x00             	MOVLW	0x00
001e1e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001e20   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001e22   0e20     movlw   0x20             	MOVLW	0x20
001e24   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e26   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001e28   ffe9
001e2a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001e2c   fff3
001e2e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001e30   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001e32   f027
                                           ;	.line	232; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = ' ';
001e34   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001e36   0f05     addlw   0x05             	ADDLW	0x05
001e38   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001e3a   0e00     movlw   0x00             	MOVLW	0x00
001e3c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001e3e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001e40   0e00     movlw   0x00             	MOVLW	0x00
001e42   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001e44   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001e46   0e20     movlw   0x20             	MOVLW	0x20
001e48   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e4a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001e4c   ffe9
001e4e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001e50   fff3
001e52   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001e54   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001e56   f027
                                           ;	.line	233; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = ' ';
001e58   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001e5a   0f04     addlw   0x04             	ADDLW	0x04
001e5c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001e5e   0e00     movlw   0x00             	MOVLW	0x00
001e60   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001e62   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001e64   0e00     movlw   0x00             	MOVLW	0x00
001e66   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001e68   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001e6a   0e20     movlw   0x20             	MOVLW	0x20
001e6c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e6e   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001e70   ffe9
001e72   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001e74   fff3
001e76   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001e78   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001e7a   f027
                                           ;	.line	234; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = ' ';
001e7c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001e7e   0f03     addlw   0x03             	ADDLW	0x03
001e80   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001e82   0e00     movlw   0x00             	MOVLW	0x00
001e84   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001e86   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001e88   0e00     movlw   0x00             	MOVLW	0x00
001e8a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001e8c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001e8e   0e20     movlw   0x20             	MOVLW	0x20
001e90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e92   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001e94   ffe9
001e96   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001e98   fff3
001e9a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001e9c   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001e9e   f027
                                           ;	.line	235; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
001ea0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001ea2   0f02     addlw   0x02             	ADDLW	0x02
001ea4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001ea6   0e00     movlw   0x00             	MOVLW	0x00
001ea8   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001eaa   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001eac   0e00     movlw   0x00             	MOVLW	0x00
001eae   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001eb0   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001eb2   0e20     movlw   0x20             	MOVLW	0x20
001eb4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001eb6   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001eb8   ffe9
001eba   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001ebc   fff3
001ebe   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001ec0   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001ec2   f027
                                           ;	.line	236; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
001ec4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001ec6   0f01     addlw   0x01             	ADDLW	0x01
001ec8   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001eca   0e00     movlw   0x00             	MOVLW	0x00
001ecc   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001ece   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001ed0   0e00     movlw   0x00             	MOVLW	0x00
001ed2   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001ed4   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001ed6   0e20     movlw   0x20             	MOVLW	0x20
001ed8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001eda   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001edc   ffe9
001ede   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001ee0   fff3
001ee2   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001ee4   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001ee6   f027
                                           ;	.line	237; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
001ee8   0e20     movlw   0x20             	MOVLW	0x20
001eea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001eec   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001eee   ffe9
001ef0   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
001ef2   fff3
001ef4   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001ef6   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001ef8   f027
                                           ;	.line	238; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
001efa   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001efc   0f0a     addlw   0x0a             	ADDLW	0x0a
001efe   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001f00   0e00     movlw   0x00             	MOVLW	0x00
001f02   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001f04   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001f06   0e00     movlw   0x00             	MOVLW	0x00
001f08   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001f0a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001f0c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001f0e   ffe9
001f10   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001f12   fff3
001f14   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001f16   f027
001f18   d1ac     bra     0x002272         	BRA	_00245_DS_
                                           _00222_DS_:
                                           ;	.line	239; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 9) {
001f1a   0e00     movlw   0x00             	MOVLW	0x00
001f1c   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
001f1e   e108     bnz     0x001f30         	BNZ	_00282_DS_
001f20   0e00     movlw   0x00             	MOVLW	0x00
001f22   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
001f24   e105     bnz     0x001f30         	BNZ	_00282_DS_
001f26   0e00     movlw   0x00             	MOVLW	0x00
001f28   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001f2a   e102     bnz     0x001f30         	BNZ	_00282_DS_
001f2c   0e0a     movlw   0x0a             	MOVLW	0x0a
001f2e   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00282_DS_:
001f30   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
001f32   d0e5     bra     0x0020fe         	BRA	_00219_DS_
                                           ;	.line	240; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
001f34   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001f36   0f09     addlw   0x09             	ADDLW	0x09
001f38   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001f3a   0e00     movlw   0x00             	MOVLW	0x00
001f3c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001f3e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001f40   0e00     movlw   0x00             	MOVLW	0x00
001f42   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001f44   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001f46   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001f48   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001f4a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001f4c   0e0a     movlw   0x0a             	MOVLW	0x0a
001f4e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f50   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001f52   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f54   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001f56   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f58   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001f5a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f5c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001f5e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f60   ec7f     call    0x003afe, 0x0    	CALL	__modulong
001f62   f01d
001f64   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001f66   0e08     movlw   0x08             	MOVLW	0x08
001f68   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001f6a   0e30     movlw   0x30             	MOVLW	0x30
001f6c   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001f6e   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001f70   ffe5
001f72   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001f74   ffe9
001f76   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001f78   fff3
001f7a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001f7c   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001f7e   f027
                                           ;	.line	241; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001f80   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001f82   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001f84   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001f86   0e0a     movlw   0x0a             	MOVLW	0x0a
001f88   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f8a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001f8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f8e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001f90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f92   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001f94   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f96   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001f98   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f9a   ec1c     call    0x003c38, 0x0    	CALL	__divulong
001f9c   f01e
001f9e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001fa0   0e08     movlw   0x08             	MOVLW	0x08
001fa2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	242; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + val;
001fa4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001fa6   0f08     addlw   0x08             	ADDLW	0x08
001fa8   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001faa   0e00     movlw   0x00             	MOVLW	0x00
001fac   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001fae   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001fb0   0e00     movlw   0x00             	MOVLW	0x00
001fb2   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001fb4   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001fb6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001fb8   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001fba   0e30     movlw   0x30             	MOVLW	0x30
001fbc   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001fbe   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001fc0   ffe5
001fc2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001fc4   ffe9
001fc6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001fc8   fff3
001fca   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001fcc   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001fce   f027
                                           ;	.line	243; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = ' ';
001fd0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001fd2   0f07     addlw   0x07             	ADDLW	0x07
001fd4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001fd6   0e00     movlw   0x00             	MOVLW	0x00
001fd8   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001fda   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001fdc   0e00     movlw   0x00             	MOVLW	0x00
001fde   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001fe0   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001fe2   0e20     movlw   0x20             	MOVLW	0x20
001fe4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001fe6   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001fe8   ffe9
001fea   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001fec   fff3
001fee   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001ff0   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
001ff2   f027
                                           ;	.line	244; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = ' ';
001ff4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001ff6   0f06     addlw   0x06             	ADDLW	0x06
001ff8   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001ffa   0e00     movlw   0x00             	MOVLW	0x00
001ffc   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001ffe   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002000   0e00     movlw   0x00             	MOVLW	0x00
002002   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
002004   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
002006   0e20     movlw   0x20             	MOVLW	0x20
002008   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00200a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00200c   ffe9
00200e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
002010   fff3
002012   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
002014   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002016   f027
                                           ;	.line	245; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = ' ';
002018   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00201a   0f05     addlw   0x05             	ADDLW	0x05
00201c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00201e   0e00     movlw   0x00             	MOVLW	0x00
002020   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002022   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002024   0e00     movlw   0x00             	MOVLW	0x00
002026   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
002028   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00202a   0e20     movlw   0x20             	MOVLW	0x20
00202c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00202e   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
002030   ffe9
002032   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
002034   fff3
002036   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
002038   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00203a   f027
                                           ;	.line	246; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = ' ';
00203c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00203e   0f04     addlw   0x04             	ADDLW	0x04
002040   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002042   0e00     movlw   0x00             	MOVLW	0x00
002044   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002046   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002048   0e00     movlw   0x00             	MOVLW	0x00
00204a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00204c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00204e   0e20     movlw   0x20             	MOVLW	0x20
002050   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002052   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
002054   ffe9
002056   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
002058   fff3
00205a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00205c   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00205e   f027
                                           ;	.line	247; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = ' ';
002060   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002062   0f03     addlw   0x03             	ADDLW	0x03
002064   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002066   0e00     movlw   0x00             	MOVLW	0x00
002068   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00206a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00206c   0e00     movlw   0x00             	MOVLW	0x00
00206e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
002070   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
002072   0e20     movlw   0x20             	MOVLW	0x20
002074   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002076   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
002078   ffe9
00207a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00207c   fff3
00207e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
002080   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002082   f027
                                           ;	.line	248; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
002084   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002086   0f02     addlw   0x02             	ADDLW	0x02
002088   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00208a   0e00     movlw   0x00             	MOVLW	0x00
00208c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00208e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002090   0e00     movlw   0x00             	MOVLW	0x00
002092   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
002094   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
002096   0e20     movlw   0x20             	MOVLW	0x20
002098   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00209a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00209c   ffe9
00209e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0020a0   fff3
0020a2   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0020a4   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0020a6   f027
                                           ;	.line	249; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
0020a8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0020aa   0f01     addlw   0x01             	ADDLW	0x01
0020ac   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0020ae   0e00     movlw   0x00             	MOVLW	0x00
0020b0   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0020b2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0020b4   0e00     movlw   0x00             	MOVLW	0x00
0020b6   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0020b8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0020ba   0e20     movlw   0x20             	MOVLW	0x20
0020bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020be   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0020c0   ffe9
0020c2   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0020c4   fff3
0020c6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0020c8   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0020ca   f027
                                           ;	.line	250; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
0020cc   0e20     movlw   0x20             	MOVLW	0x20
0020ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020d0   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0020d2   ffe9
0020d4   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
0020d6   fff3
0020d8   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0020da   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0020dc   f027
                                           ;	.line	251; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
0020de   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0020e0   0f0a     addlw   0x0a             	ADDLW	0x0a
0020e2   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0020e4   0e00     movlw   0x00             	MOVLW	0x00
0020e6   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0020e8   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0020ea   0e00     movlw   0x00             	MOVLW	0x00
0020ec   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0020ee   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0020f0   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0020f2   ffe9
0020f4   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0020f6   fff3
0020f8   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0020fa   f027
0020fc   d0ba     bra     0x002272         	BRA	_00245_DS_
                                           _00219_DS_:
                                           ;	.line	253; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + val;
0020fe   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002100   0f09     addlw   0x09             	ADDLW	0x09
002102   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002104   0e00     movlw   0x00             	MOVLW	0x00
002106   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002108   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00210a   0e00     movlw   0x00             	MOVLW	0x00
00210c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00210e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
002110   0e30     movlw   0x30             	MOVLW	0x30
002112   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002114   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002116   ffe5
002118   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00211a   ffe9
00211c   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00211e   fff3
002120   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
002122   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002124   f027
                                           ;	.line	254; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = ' ';
002126   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002128   0f08     addlw   0x08             	ADDLW	0x08
00212a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00212c   0e00     movlw   0x00             	MOVLW	0x00
00212e   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002130   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002132   0e00     movlw   0x00             	MOVLW	0x00
002134   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
002136   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002138   0e20     movlw   0x20             	MOVLW	0x20
00213a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00213c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00213e   ffe9
002140   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
002142   fff3
002144   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002146   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002148   f027
                                           ;	.line	255; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = ' ';
00214a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00214c   0f07     addlw   0x07             	ADDLW	0x07
00214e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002150   0e00     movlw   0x00             	MOVLW	0x00
002152   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002154   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002156   0e00     movlw   0x00             	MOVLW	0x00
002158   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00215a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00215c   0e20     movlw   0x20             	MOVLW	0x20
00215e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002160   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002162   ffe9
002164   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
002166   fff3
002168   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00216a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00216c   f027
                                           ;	.line	256; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = ' ';
00216e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002170   0f06     addlw   0x06             	ADDLW	0x06
002172   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002174   0e00     movlw   0x00             	MOVLW	0x00
002176   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002178   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00217a   0e00     movlw   0x00             	MOVLW	0x00
00217c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00217e   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002180   0e20     movlw   0x20             	MOVLW	0x20
002182   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002184   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002186   ffe9
002188   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
00218a   fff3
00218c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00218e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002190   f027
                                           ;	.line	257; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = ' ';
002192   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002194   0f05     addlw   0x05             	ADDLW	0x05
002196   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002198   0e00     movlw   0x00             	MOVLW	0x00
00219a   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00219c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00219e   0e00     movlw   0x00             	MOVLW	0x00
0021a0   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0021a2   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0021a4   0e20     movlw   0x20             	MOVLW	0x20
0021a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021a8   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0021aa   ffe9
0021ac   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0021ae   fff3
0021b0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0021b2   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0021b4   f027
                                           ;	.line	258; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = ' ';
0021b6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0021b8   0f04     addlw   0x04             	ADDLW	0x04
0021ba   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0021bc   0e00     movlw   0x00             	MOVLW	0x00
0021be   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0021c0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0021c2   0e00     movlw   0x00             	MOVLW	0x00
0021c4   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0021c6   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0021c8   0e20     movlw   0x20             	MOVLW	0x20
0021ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021cc   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0021ce   ffe9
0021d0   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0021d2   fff3
0021d4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0021d6   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0021d8   f027
                                           ;	.line	259; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = ' ';
0021da   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0021dc   0f03     addlw   0x03             	ADDLW	0x03
0021de   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0021e0   0e00     movlw   0x00             	MOVLW	0x00
0021e2   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0021e4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0021e6   0e00     movlw   0x00             	MOVLW	0x00
0021e8   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0021ea   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0021ec   0e20     movlw   0x20             	MOVLW	0x20
0021ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021f0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0021f2   ffe9
0021f4   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0021f6   fff3
0021f8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0021fa   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0021fc   f027
                                           ;	.line	260; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
0021fe   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002200   0f02     addlw   0x02             	ADDLW	0x02
002202   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002204   0e00     movlw   0x00             	MOVLW	0x00
002206   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002208   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00220a   0e00     movlw   0x00             	MOVLW	0x00
00220c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00220e   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002210   0e20     movlw   0x20             	MOVLW	0x20
002212   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002214   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002216   ffe9
002218   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
00221a   fff3
00221c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00221e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002220   f027
                                           ;	.line	261; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
002222   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002224   0f01     addlw   0x01             	ADDLW	0x01
002226   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002228   0e00     movlw   0x00             	MOVLW	0x00
00222a   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00222c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00222e   0e00     movlw   0x00             	MOVLW	0x00
002230   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
002232   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002234   0e20     movlw   0x20             	MOVLW	0x20
002236   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002238   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00223a   ffe9
00223c   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
00223e   fff3
002240   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002242   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002244   f027
                                           ;	.line	262; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
002246   0e20     movlw   0x20             	MOVLW	0x20
002248   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00224a   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
00224c   ffe9
00224e   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
002250   fff3
002252   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
002254   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002256   f027
                                           ;	.line	263; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
002258   0e0a     movlw   0x0a             	MOVLW	0x0a
00225a   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00225c   0e00     movlw   0x00             	MOVLW	0x00
00225e   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
002260   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002262   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002264   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
002266   ffe9
002268   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
00226a   fff3
00226c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00226e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002270   f027
                                           _00245_DS_:
002272   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
002274   f00a
002276   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
002278   f009
00227a   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
00227c   f008
00227e   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
002280   f007
002282   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
002284   f006
002286   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002288   f005
00228a   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
00228c   f004
00228e   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002290   f003
002292   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002294   f002
002296   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002298   f001
00229a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00229c   f000
00229e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0022a0   ffd9
0022a2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__word2dec	code
                                           _word2dec:
                                           ;	.line	49; ../my_sdcc_lib/rosso_sdcc_conversion.h	void word2dec(uint16_t val, uint8_t *s) {
0022a4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0022a6   ffe5
0022a8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0022aa   ffd9
0022ac   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0022ae   ffe5
0022b0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0022b2   ffe5
0022b4   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0022b6   ffe5
0022b8   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0022ba   ffe5
0022bc   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0022be   ffe5
0022c0   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
0022c2   ffe5
0022c4   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
0022c6   ffe5
0022c8   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0022ca   ffe5
0022cc   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0022ce   ffe5
0022d0   0e02     movlw   0x02             	MOVLW	0x02
0022d2   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0022d4   f000
0022d6   0e03     movlw   0x03             	MOVLW	0x03
0022d8   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0022da   f001
0022dc   0e04     movlw   0x04             	MOVLW	0x04
0022de   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0022e0   f002
0022e2   0e05     movlw   0x05             	MOVLW	0x05
0022e4   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
0022e6   f003
0022e8   0e06     movlw   0x06             	MOVLW	0x06
0022ea   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
0022ec   f004
                                           ;	.line	50; ../my_sdcc_lib/rosso_sdcc_conversion.h	if (val > 9999) {
0022ee   0e27     movlw   0x27             	MOVLW	0x27
0022f0   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
0022f2   e102     bnz     0x0022f8         	BNZ	_00210_DS_
0022f4   0e10     movlw   0x10             	MOVLW	0x10
0022f6   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00210_DS_:
0022f8   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0022fa   d0d4     bra     0x0024a4         	BRA	_00194_DS_
                                           ;	.line	51; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
0022fc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0022fe   0f04     addlw   0x04             	ADDLW	0x04
002300   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002302   0e00     movlw   0x00             	MOVLW	0x00
002304   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002306   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002308   0e00     movlw   0x00             	MOVLW	0x00
00230a   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
00230c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00230e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002310   0e0a     movlw   0x0a             	MOVLW	0x0a
002312   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002314   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002316   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002318   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00231a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00231c   ec67     call    0x0040ce, 0x0    	CALL	__moduint
00231e   f020
002320   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002322   0e04     movlw   0x04             	MOVLW	0x04
002324   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002326   0e30     movlw   0x30             	MOVLW	0x30
002328   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
00232a   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
00232c   ffe5
00232e   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002330   ffe9
002332   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002334   fff3
002336   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
002338   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00233a   f027
                                           ;	.line	52; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00233c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00233e   0e0a     movlw   0x0a             	MOVLW	0x0a
002340   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002342   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002344   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002346   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002348   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00234a   ecc4     call    0x004188, 0x0    	CALL	__divuint
00234c   f020
00234e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002350   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002352   f001
002354   0e04     movlw   0x04             	MOVLW	0x04
002356   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	53; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + (val % 10);
002358   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00235a   0f03     addlw   0x03             	ADDLW	0x03
00235c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00235e   0e00     movlw   0x00             	MOVLW	0x00
002360   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002362   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002364   0e00     movlw   0x00             	MOVLW	0x00
002366   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002368   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00236a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00236c   0e0a     movlw   0x0a             	MOVLW	0x0a
00236e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002370   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002372   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002374   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002376   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002378   ec67     call    0x0040ce, 0x0    	CALL	__moduint
00237a   f020
00237c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00237e   0e04     movlw   0x04             	MOVLW	0x04
002380   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002382   0e30     movlw   0x30             	MOVLW	0x30
002384   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
002386   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
002388   ffe5
00238a   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
00238c   ffe9
00238e   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002390   fff3
002392   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
002394   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002396   f027
                                           ;	.line	54; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
002398   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00239a   0e0a     movlw   0x0a             	MOVLW	0x0a
00239c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00239e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023a2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0023a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023a6   ecc4     call    0x004188, 0x0    	CALL	__divuint
0023a8   f020
0023aa   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0023ac   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0023ae   f001
0023b0   0e04     movlw   0x04             	MOVLW	0x04
0023b2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	55; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + (val % 10);
0023b4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0023b6   0f02     addlw   0x02             	ADDLW	0x02
0023b8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0023ba   0e00     movlw   0x00             	MOVLW	0x00
0023bc   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0023be   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0023c0   0e00     movlw   0x00             	MOVLW	0x00
0023c2   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0023c4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0023c6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0023c8   0e0a     movlw   0x0a             	MOVLW	0x0a
0023ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023cc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023d0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0023d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023d4   ec67     call    0x0040ce, 0x0    	CALL	__moduint
0023d6   f020
0023d8   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0023da   0e04     movlw   0x04             	MOVLW	0x04
0023dc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0023de   0e30     movlw   0x30             	MOVLW	0x30
0023e0   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0023e2   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0023e4   ffe5
0023e6   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0023e8   ffe9
0023ea   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0023ec   fff3
0023ee   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0023f0   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0023f2   f027
                                           ;	.line	56; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0023f4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0023f6   0e0a     movlw   0x0a             	MOVLW	0x0a
0023f8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023fa   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023fe   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002400   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002402   ecc4     call    0x004188, 0x0    	CALL	__divuint
002404   f020
002406   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002408   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00240a   f001
00240c   0e04     movlw   0x04             	MOVLW	0x04
00240e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	57; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = '0' + (val % 10);
002410   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002412   0f01     addlw   0x01             	ADDLW	0x01
002414   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002416   0e00     movlw   0x00             	MOVLW	0x00
002418   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00241a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00241c   0e00     movlw   0x00             	MOVLW	0x00
00241e   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002420   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002422   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002424   0e0a     movlw   0x0a             	MOVLW	0x0a
002426   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002428   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00242a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00242c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00242e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002430   ec67     call    0x0040ce, 0x0    	CALL	__moduint
002432   f020
002434   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002436   0e04     movlw   0x04             	MOVLW	0x04
002438   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00243a   0e30     movlw   0x30             	MOVLW	0x30
00243c   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
00243e   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
002440   ffe5
002442   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002444   ffe9
002446   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002448   fff3
00244a   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00244c   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00244e   f027
                                           ;	.line	58; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
002450   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002452   0e0a     movlw   0x0a             	MOVLW	0x0a
002454   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002456   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002458   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00245a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00245c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00245e   ecc4     call    0x004188, 0x0    	CALL	__divuint
002460   f020
002462   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002464   0e04     movlw   0x04             	MOVLW	0x04
002466   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	59; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = '0' + val;
002468   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00246a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00246c   0e30     movlw   0x30             	MOVLW	0x30
00246e   2605     addwf   0x05, 0x1, 0x0   	ADDWF	r0x05, F
002470   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
002472   ffe5
002474   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
002476   ffe9
002478   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
00247a   fff3
00247c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00247e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002480   f027
                                           ;	.line	60; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = 0;
002482   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002484   0f05     addlw   0x05             	ADDLW	0x05
002486   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002488   0e00     movlw   0x00             	MOVLW	0x00
00248a   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00248c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00248e   0e00     movlw   0x00             	MOVLW	0x00
002490   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002492   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002494   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002496   ffe9
002498   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
00249a   fff3
00249c   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00249e   f027
0024a0   ef98     goto    0x002930         	GOTO	_00196_DS_
0024a2   f014
                                           _00194_DS_:
                                           ;	.line	61; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 999) {
0024a4   0e03     movlw   0x03             	MOVLW	0x03
0024a6   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
0024a8   e102     bnz     0x0024ae         	BNZ	_00211_DS_
0024aa   0ee8     movlw   0xe8             	MOVLW	0xe8
0024ac   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00211_DS_:
0024ae   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0024b0   d0b7     bra     0x002620         	BRA	_00191_DS_
                                           ;	.line	62; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
0024b2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0024b4   0f04     addlw   0x04             	ADDLW	0x04
0024b6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0024b8   0e00     movlw   0x00             	MOVLW	0x00
0024ba   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0024bc   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0024be   0e00     movlw   0x00             	MOVLW	0x00
0024c0   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0024c2   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0024c4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0024c6   0e0a     movlw   0x0a             	MOVLW	0x0a
0024c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0024ca   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0024cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0024ce   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0024d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0024d2   ec67     call    0x0040ce, 0x0    	CALL	__moduint
0024d4   f020
0024d6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0024d8   0e04     movlw   0x04             	MOVLW	0x04
0024da   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0024dc   0e30     movlw   0x30             	MOVLW	0x30
0024de   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0024e0   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0024e2   ffe5
0024e4   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0024e6   ffe9
0024e8   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0024ea   fff3
0024ec   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0024ee   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0024f0   f027
                                           ;	.line	63; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0024f2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0024f4   0e0a     movlw   0x0a             	MOVLW	0x0a
0024f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0024f8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0024fa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0024fc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0024fe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002500   ecc4     call    0x004188, 0x0    	CALL	__divuint
002502   f020
002504   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002506   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002508   f001
00250a   0e04     movlw   0x04             	MOVLW	0x04
00250c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	64; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + (val % 10);
00250e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002510   0f03     addlw   0x03             	ADDLW	0x03
002512   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002514   0e00     movlw   0x00             	MOVLW	0x00
002516   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002518   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00251a   0e00     movlw   0x00             	MOVLW	0x00
00251c   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
00251e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002520   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002522   0e0a     movlw   0x0a             	MOVLW	0x0a
002524   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002526   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002528   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00252a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00252c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00252e   ec67     call    0x0040ce, 0x0    	CALL	__moduint
002530   f020
002532   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002534   0e04     movlw   0x04             	MOVLW	0x04
002536   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002538   0e30     movlw   0x30             	MOVLW	0x30
00253a   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
00253c   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
00253e   ffe5
002540   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002542   ffe9
002544   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002546   fff3
002548   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00254a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00254c   f027
                                           ;	.line	65; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00254e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002550   0e0a     movlw   0x0a             	MOVLW	0x0a
002552   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002554   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002556   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002558   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00255a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00255c   ecc4     call    0x004188, 0x0    	CALL	__divuint
00255e   f020
002560   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002562   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002564   f001
002566   0e04     movlw   0x04             	MOVLW	0x04
002568   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	66; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + (val % 10);
00256a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00256c   0f02     addlw   0x02             	ADDLW	0x02
00256e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002570   0e00     movlw   0x00             	MOVLW	0x00
002572   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002574   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002576   0e00     movlw   0x00             	MOVLW	0x00
002578   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
00257a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00257c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00257e   0e0a     movlw   0x0a             	MOVLW	0x0a
002580   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002582   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002584   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002586   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002588   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00258a   ec67     call    0x0040ce, 0x0    	CALL	__moduint
00258c   f020
00258e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002590   0e04     movlw   0x04             	MOVLW	0x04
002592   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002594   0e30     movlw   0x30             	MOVLW	0x30
002596   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
002598   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
00259a   ffe5
00259c   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
00259e   ffe9
0025a0   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0025a2   fff3
0025a4   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0025a6   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0025a8   f027
                                           ;	.line	67; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0025aa   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0025ac   0e0a     movlw   0x0a             	MOVLW	0x0a
0025ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025b0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0025b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025b4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0025b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025b8   ecc4     call    0x004188, 0x0    	CALL	__divuint
0025ba   f020
0025bc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0025be   0e04     movlw   0x04             	MOVLW	0x04
0025c0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	68; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = '0' + val;
0025c2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0025c4   0f01     addlw   0x01             	ADDLW	0x01
0025c6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0025c8   0e00     movlw   0x00             	MOVLW	0x00
0025ca   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0025cc   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0025ce   0e00     movlw   0x00             	MOVLW	0x00
0025d0   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0025d2   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0025d4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0025d6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0025d8   0e30     movlw   0x30             	MOVLW	0x30
0025da   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0025dc   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0025de   ffe5
0025e0   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0025e2   ffe9
0025e4   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0025e6   fff3
0025e8   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0025ea   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0025ec   f027
                                           ;	.line	69; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
0025ee   0e20     movlw   0x20             	MOVLW	0x20
0025f0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025f2   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
0025f4   ffe9
0025f6   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
0025f8   fff3
0025fa   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0025fc   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0025fe   f027
                                           ;	.line	70; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = 0;
002600   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002602   0f05     addlw   0x05             	ADDLW	0x05
002604   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002606   0e00     movlw   0x00             	MOVLW	0x00
002608   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00260a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00260c   0e00     movlw   0x00             	MOVLW	0x00
00260e   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002610   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002612   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002614   ffe9
002616   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002618   fff3
00261a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00261c   f027
00261e   d188     bra     0x002930         	BRA	_00196_DS_
                                           _00191_DS_:
                                           ;	.line	71; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 99) {
002620   0e00     movlw   0x00             	MOVLW	0x00
002622   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
002624   e102     bnz     0x00262a         	BNZ	_00212_DS_
002626   0e64     movlw   0x64             	MOVLW	0x64
002628   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00212_DS_:
00262a   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00262c   d09b     bra     0x002764         	BRA	_00188_DS_
                                           ;	.line	72; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
00262e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002630   0f04     addlw   0x04             	ADDLW	0x04
002632   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002634   0e00     movlw   0x00             	MOVLW	0x00
002636   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002638   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00263a   0e00     movlw   0x00             	MOVLW	0x00
00263c   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
00263e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002640   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002642   0e0a     movlw   0x0a             	MOVLW	0x0a
002644   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002646   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002648   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00264a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00264c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00264e   ec67     call    0x0040ce, 0x0    	CALL	__moduint
002650   f020
002652   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002654   0e04     movlw   0x04             	MOVLW	0x04
002656   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002658   0e30     movlw   0x30             	MOVLW	0x30
00265a   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
00265c   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
00265e   ffe5
002660   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002662   ffe9
002664   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002666   fff3
002668   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00266a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00266c   f027
                                           ;	.line	73; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00266e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002670   0e0a     movlw   0x0a             	MOVLW	0x0a
002672   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002674   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002676   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002678   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00267a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00267c   ecc4     call    0x004188, 0x0    	CALL	__divuint
00267e   f020
002680   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002682   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002684   f001
002686   0e04     movlw   0x04             	MOVLW	0x04
002688   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	74; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + (val % 10);
00268a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00268c   0f03     addlw   0x03             	ADDLW	0x03
00268e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002690   0e00     movlw   0x00             	MOVLW	0x00
002692   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002694   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002696   0e00     movlw   0x00             	MOVLW	0x00
002698   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
00269a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00269c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00269e   0e0a     movlw   0x0a             	MOVLW	0x0a
0026a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026a2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0026a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026a6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0026a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026aa   ec67     call    0x0040ce, 0x0    	CALL	__moduint
0026ac   f020
0026ae   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0026b0   0e04     movlw   0x04             	MOVLW	0x04
0026b2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0026b4   0e30     movlw   0x30             	MOVLW	0x30
0026b6   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0026b8   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0026ba   ffe5
0026bc   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0026be   ffe9
0026c0   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0026c2   fff3
0026c4   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0026c6   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0026c8   f027
                                           ;	.line	75; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0026ca   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0026cc   0e0a     movlw   0x0a             	MOVLW	0x0a
0026ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026d0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0026d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026d4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0026d6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026d8   ecc4     call    0x004188, 0x0    	CALL	__divuint
0026da   f020
0026dc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0026de   0e04     movlw   0x04             	MOVLW	0x04
0026e0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	76; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + val;
0026e2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0026e4   0f02     addlw   0x02             	ADDLW	0x02
0026e6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0026e8   0e00     movlw   0x00             	MOVLW	0x00
0026ea   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0026ec   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0026ee   0e00     movlw   0x00             	MOVLW	0x00
0026f0   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0026f2   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0026f4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0026f6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0026f8   0e30     movlw   0x30             	MOVLW	0x30
0026fa   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0026fc   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0026fe   ffe5
002700   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002702   ffe9
002704   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002706   fff3
002708   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00270a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00270c   f027
                                           ;	.line	77; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
00270e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002710   0f01     addlw   0x01             	ADDLW	0x01
002712   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002714   0e00     movlw   0x00             	MOVLW	0x00
002716   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002718   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00271a   0e00     movlw   0x00             	MOVLW	0x00
00271c   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
00271e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002720   0e20     movlw   0x20             	MOVLW	0x20
002722   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002724   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002726   ffe9
002728   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
00272a   fff3
00272c   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00272e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002730   f027
                                           ;	.line	78; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
002732   0e20     movlw   0x20             	MOVLW	0x20
002734   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002736   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
002738   ffe9
00273a   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
00273c   fff3
00273e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002740   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002742   f027
                                           ;	.line	79; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = 0;
002744   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002746   0f05     addlw   0x05             	ADDLW	0x05
002748   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00274a   0e00     movlw   0x00             	MOVLW	0x00
00274c   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00274e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002750   0e00     movlw   0x00             	MOVLW	0x00
002752   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002754   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002756   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002758   ffe9
00275a   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
00275c   fff3
00275e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002760   f027
002762   d0e6     bra     0x002930         	BRA	_00196_DS_
                                           _00188_DS_:
                                           ;	.line	80; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 9) {
002764   0e00     movlw   0x00             	MOVLW	0x00
002766   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
002768   e102     bnz     0x00276e         	BNZ	_00213_DS_
00276a   0e0a     movlw   0x0a             	MOVLW	0x0a
00276c   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00213_DS_:
00276e   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
002770   d07f     bra     0x002870         	BRA	_00185_DS_
                                           ;	.line	81; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
002772   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002774   0f04     addlw   0x04             	ADDLW	0x04
002776   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002778   0e00     movlw   0x00             	MOVLW	0x00
00277a   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00277c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00277e   0e00     movlw   0x00             	MOVLW	0x00
002780   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002782   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002784   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002786   0e0a     movlw   0x0a             	MOVLW	0x0a
002788   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00278a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00278c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00278e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002790   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002792   ec67     call    0x0040ce, 0x0    	CALL	__moduint
002794   f020
002796   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002798   0e04     movlw   0x04             	MOVLW	0x04
00279a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00279c   0e30     movlw   0x30             	MOVLW	0x30
00279e   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0027a0   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0027a2   ffe5
0027a4   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0027a6   ffe9
0027a8   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0027aa   fff3
0027ac   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0027ae   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0027b0   f027
                                           ;	.line	82; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0027b2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0027b4   0e0a     movlw   0x0a             	MOVLW	0x0a
0027b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0027b8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0027ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0027bc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0027be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0027c0   ecc4     call    0x004188, 0x0    	CALL	__divuint
0027c2   f020
0027c4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0027c6   0e04     movlw   0x04             	MOVLW	0x04
0027c8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	83; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + val;
0027ca   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0027cc   0f03     addlw   0x03             	ADDLW	0x03
0027ce   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0027d0   0e00     movlw   0x00             	MOVLW	0x00
0027d2   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0027d4   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0027d6   0e00     movlw   0x00             	MOVLW	0x00
0027d8   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0027da   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0027dc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0027de   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0027e0   0e30     movlw   0x30             	MOVLW	0x30
0027e2   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0027e4   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0027e6   ffe5
0027e8   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0027ea   ffe9
0027ec   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0027ee   fff3
0027f0   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0027f2   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0027f4   f027
                                           ;	.line	84; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
0027f6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0027f8   0f02     addlw   0x02             	ADDLW	0x02
0027fa   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0027fc   0e00     movlw   0x00             	MOVLW	0x00
0027fe   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002800   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002802   0e00     movlw   0x00             	MOVLW	0x00
002804   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002806   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002808   0e20     movlw   0x20             	MOVLW	0x20
00280a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00280c   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
00280e   ffe9
002810   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002812   fff3
002814   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
002816   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002818   f027
                                           ;	.line	85; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
00281a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00281c   0f01     addlw   0x01             	ADDLW	0x01
00281e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002820   0e00     movlw   0x00             	MOVLW	0x00
002822   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002824   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002826   0e00     movlw   0x00             	MOVLW	0x00
002828   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
00282a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00282c   0e20     movlw   0x20             	MOVLW	0x20
00282e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002830   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002832   ffe9
002834   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002836   fff3
002838   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00283a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00283c   f027
                                           ;	.line	86; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
00283e   0e20     movlw   0x20             	MOVLW	0x20
002840   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002842   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
002844   ffe9
002846   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
002848   fff3
00284a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00284c   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00284e   f027
                                           ;	.line	87; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = 0;
002850   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002852   0f05     addlw   0x05             	ADDLW	0x05
002854   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002856   0e00     movlw   0x00             	MOVLW	0x00
002858   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00285a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00285c   0e00     movlw   0x00             	MOVLW	0x00
00285e   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002860   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002862   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002864   ffe9
002866   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002868   fff3
00286a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00286c   f027
00286e   d060     bra     0x002930         	BRA	_00196_DS_
                                           _00185_DS_:
                                           ;	.line	89; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + val;
002870   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002872   0f04     addlw   0x04             	ADDLW	0x04
002874   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002876   0e00     movlw   0x00             	MOVLW	0x00
002878   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00287a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00287c   0e00     movlw   0x00             	MOVLW	0x00
00287e   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002880   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002882   0e30     movlw   0x30             	MOVLW	0x30
002884   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002886   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002888   ffe5
00288a   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
00288c   ffe9
00288e   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002890   fff3
002892   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
002894   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002896   f027
                                           ;	.line	90; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = ' ';
002898   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00289a   0f03     addlw   0x03             	ADDLW	0x03
00289c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00289e   0e00     movlw   0x00             	MOVLW	0x00
0028a0   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0028a2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0028a4   0e00     movlw   0x00             	MOVLW	0x00
0028a6   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0028a8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0028aa   0e20     movlw   0x20             	MOVLW	0x20
0028ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0028ae   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0028b0   ffe9
0028b2   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0028b4   fff3
0028b6   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0028b8   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0028ba   f027
                                           ;	.line	91; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
0028bc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0028be   0f02     addlw   0x02             	ADDLW	0x02
0028c0   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0028c2   0e00     movlw   0x00             	MOVLW	0x00
0028c4   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0028c6   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0028c8   0e00     movlw   0x00             	MOVLW	0x00
0028ca   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0028cc   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0028ce   0e20     movlw   0x20             	MOVLW	0x20
0028d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0028d2   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0028d4   ffe9
0028d6   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0028d8   fff3
0028da   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0028dc   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0028de   f027
                                           ;	.line	92; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
0028e0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0028e2   0f01     addlw   0x01             	ADDLW	0x01
0028e4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0028e6   0e00     movlw   0x00             	MOVLW	0x00
0028e8   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0028ea   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0028ec   0e00     movlw   0x00             	MOVLW	0x00
0028ee   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0028f0   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0028f2   0e20     movlw   0x20             	MOVLW	0x20
0028f4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0028f6   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0028f8   ffe9
0028fa   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0028fc   fff3
0028fe   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
002900   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002902   f027
                                           ;	.line	93; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
002904   0e20     movlw   0x20             	MOVLW	0x20
002906   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002908   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
00290a   ffe9
00290c   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
00290e   fff3
002910   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002912   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
002914   f027
                                           ;	.line	94; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = 0;
002916   0e05     movlw   0x05             	MOVLW	0x05
002918   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
00291a   0e00     movlw   0x00             	MOVLW	0x00
00291c   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00291e   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
002920   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002922   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
002924   ffe9
002926   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
002928   fff3
00292a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00292c   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00292e   f027
                                           _00196_DS_:
002930   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
002932   f008
002934   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
002936   f007
002938   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
00293a   f006
00293c   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
00293e   f005
002940   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002942   f004
002944   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002946   f003
002948   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00294a   f002
00294c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00294e   f001
002950   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002952   f000
002954   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002956   ffd9
002958   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__byte2dec	code
                                           _byte2dec:
                                           ;	.line	27; ../my_sdcc_lib/rosso_sdcc_conversion.h	void byte2dec(uint8_t val, uint8_t *s) {
003364   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003366   ffe5
003368   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00336a   ffd9
00336c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00336e   ffe5
003370   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003372   ffe5
003374   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003376   ffe5
003378   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00337a   ffe5
00337c   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00337e   ffe5
003380   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
003382   ffe5
003384   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
003386   ffe5
003388   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
00338a   ffe5
00338c   0e02     movlw   0x02             	MOVLW	0x02
00338e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003390   f000
003392   0e03     movlw   0x03             	MOVLW	0x03
003394   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003396   f001
003398   0e04     movlw   0x04             	MOVLW	0x04
00339a   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
00339c   f002
00339e   0e05     movlw   0x05             	MOVLW	0x05
0033a0   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
0033a2   f003
                                           ;	.line	28; ../my_sdcc_lib/rosso_sdcc_conversion.h	if (val > 99) {
0033a4   0e64     movlw   0x64             	MOVLW	0x64
0033a6   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
0033a8   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0033aa   d069     bra     0x00347e         	BRA	_00168_DS_
                                           ;	.line	29; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + (val % 10);
0033ac   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0033ae   0f02     addlw   0x02             	ADDLW	0x02
0033b0   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0033b2   0e00     movlw   0x00             	MOVLW	0x00
0033b4   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
0033b6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0033b8   0e00     movlw   0x00             	MOVLW	0x00
0033ba   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0033bc   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0033be   0e0a     movlw   0x0a             	MOVLW	0x0a
0033c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0033c2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0033c4   ffe5
0033c6   ec2c     call    0x004658, 0x0    	CALL	__moduchar
0033c8   f023
0033ca   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0033cc   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0033ce   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0033d0   0e30     movlw   0x30             	MOVLW	0x30
0033d2   2607     addwf   0x07, 0x1, 0x0   	ADDWF	r0x07, F
0033d4   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0033d6   ffe5
0033d8   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0033da   ffe9
0033dc   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
0033de   fff3
0033e0   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0033e2   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0033e4   f027
                                           ;	.line	30; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0033e6   0e0a     movlw   0x0a             	MOVLW	0x0a
0033e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0033ea   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0033ec   ffe5
0033ee   ecf1     call    0x0045e2, 0x0    	CALL	__divuchar
0033f0   f022
0033f2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0033f4   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0033f6   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
                                           ;	.line	31; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = '0' + (val % 10);
0033f8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0033fa   0f01     addlw   0x01             	ADDLW	0x01
0033fc   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0033fe   0e00     movlw   0x00             	MOVLW	0x00
003400   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
003402   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
003404   0e00     movlw   0x00             	MOVLW	0x00
003406   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
003408   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00340a   0e0a     movlw   0x0a             	MOVLW	0x0a
00340c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00340e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003410   ffe5
003412   ec2c     call    0x004658, 0x0    	CALL	__moduchar
003414   f023
003416   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
003418   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00341a   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00341c   0e30     movlw   0x30             	MOVLW	0x30
00341e   2607     addwf   0x07, 0x1, 0x0   	ADDWF	r0x07, F
003420   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
003422   ffe5
003424   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
003426   ffe9
003428   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
00342a   fff3
00342c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00342e   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
003430   f027
                                           ;	.line	32; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
003432   0e0a     movlw   0x0a             	MOVLW	0x0a
003434   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003436   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003438   ffe5
00343a   ecf1     call    0x0045e2, 0x0    	CALL	__divuchar
00343c   f022
00343e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
003440   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
003442   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
                                           ;	.line	33; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = '0' + val;
003444   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003446   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
003448   0e30     movlw   0x30             	MOVLW	0x30
00344a   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00344c   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00344e   ffe5
003450   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
003452   ffe9
003454   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
003456   fff3
003458   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00345a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00345c   f027
                                           ;	.line	34; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = 0;
00345e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003460   0f03     addlw   0x03             	ADDLW	0x03
003462   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
003464   0e00     movlw   0x00             	MOVLW	0x00
003466   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
003468   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00346a   0e00     movlw   0x00             	MOVLW	0x00
00346c   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00346e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003470   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
003472   ffe9
003474   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
003476   fff3
003478   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00347a   f027
00347c   d095     bra     0x0035a8         	BRA	_00170_DS_
                                           _00168_DS_:
                                           ;	.line	35; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 9) {
00347e   0e0a     movlw   0x0a             	MOVLW	0x0a
003480   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
003482   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
003484   d055     bra     0x003530         	BRA	_00165_DS_
                                           ;	.line	36; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + (val % 10);
003486   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003488   0f02     addlw   0x02             	ADDLW	0x02
00348a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00348c   0e00     movlw   0x00             	MOVLW	0x00
00348e   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
003490   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
003492   0e00     movlw   0x00             	MOVLW	0x00
003494   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
003496   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
003498   0e0a     movlw   0x0a             	MOVLW	0x0a
00349a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00349c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00349e   ffe5
0034a0   ec2c     call    0x004658, 0x0    	CALL	__moduchar
0034a2   f023
0034a4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0034a6   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0034a8   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0034aa   0e30     movlw   0x30             	MOVLW	0x30
0034ac   2607     addwf   0x07, 0x1, 0x0   	ADDWF	r0x07, F
0034ae   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0034b0   ffe5
0034b2   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0034b4   ffe9
0034b6   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
0034b8   fff3
0034ba   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0034bc   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0034be   f027
                                           ;	.line	37; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0034c0   0e0a     movlw   0x0a             	MOVLW	0x0a
0034c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034c4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0034c6   ffe5
0034c8   ecf1     call    0x0045e2, 0x0    	CALL	__divuchar
0034ca   f022
0034cc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0034ce   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0034d0   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
                                           ;	.line	38; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = '0' + val;
0034d2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0034d4   0f01     addlw   0x01             	ADDLW	0x01
0034d6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0034d8   0e00     movlw   0x00             	MOVLW	0x00
0034da   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
0034dc   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0034de   0e00     movlw   0x00             	MOVLW	0x00
0034e0   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0034e2   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0034e4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0034e6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0034e8   0e30     movlw   0x30             	MOVLW	0x30
0034ea   2607     addwf   0x07, 0x1, 0x0   	ADDWF	r0x07, F
0034ec   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0034ee   ffe5
0034f0   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0034f2   ffe9
0034f4   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
0034f6   fff3
0034f8   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0034fa   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0034fc   f027
                                           ;	.line	39; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
0034fe   0e20     movlw   0x20             	MOVLW	0x20
003500   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003502   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
003504   ffe9
003506   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
003508   fff3
00350a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00350c   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00350e   f027
                                           ;	.line	40; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = 0;
003510   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003512   0f03     addlw   0x03             	ADDLW	0x03
003514   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
003516   0e00     movlw   0x00             	MOVLW	0x00
003518   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
00351a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00351c   0e00     movlw   0x00             	MOVLW	0x00
00351e   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
003520   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003522   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
003524   ffe9
003526   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
003528   fff3
00352a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00352c   f027
00352e   d03c     bra     0x0035a8         	BRA	_00170_DS_
                                           _00165_DS_:
                                           ;	.line	42; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + val;
003530   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003532   0f02     addlw   0x02             	ADDLW	0x02
003534   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
003536   0e00     movlw   0x00             	MOVLW	0x00
003538   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
00353a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00353c   0e00     movlw   0x00             	MOVLW	0x00
00353e   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
003540   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
003542   0e30     movlw   0x30             	MOVLW	0x30
003544   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003546   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003548   ffe5
00354a   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
00354c   ffe9
00354e   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
003550   fff3
003552   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
003554   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
003556   f027
                                           ;	.line	43; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
003558   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00355a   0f01     addlw   0x01             	ADDLW	0x01
00355c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00355e   0e00     movlw   0x00             	MOVLW	0x00
003560   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
003562   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
003564   0e00     movlw   0x00             	MOVLW	0x00
003566   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
003568   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00356a   0e20     movlw   0x20             	MOVLW	0x20
00356c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00356e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003570   ffe9
003572   c004     movff   0x004, 0xff3     	MOVFF	r0x04, PRODL
003574   fff3
003576   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
003578   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00357a   f027
                                           ;	.line	44; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
00357c   0e20     movlw   0x20             	MOVLW	0x20
00357e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003580   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
003582   ffe9
003584   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
003586   fff3
003588   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00358a   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
00358c   f027
                                           ;	.line	45; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = 0;
00358e   0e03     movlw   0x03             	MOVLW	0x03
003590   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
003592   0e00     movlw   0x00             	MOVLW	0x00
003594   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
003596   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
003598   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00359a   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
00359c   ffe9
00359e   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
0035a0   fff3
0035a2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0035a4   ec17     call    0x004e2e, 0x0    	CALL	__gptrput1
0035a6   f027
                                           _00170_DS_:
0035a8   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0035aa   f007
0035ac   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
0035ae   f006
0035b0   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0035b2   f005
0035b4   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0035b6   f004
0035b8   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0035ba   f003
0035bc   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0035be   f002
0035c0   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0035c2   f001
0035c4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0035c6   f000
0035c8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0035ca   ffd9
0035cc   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__nibble2hex	code
                                           _nibble2hex:
                                           ;	.line	19; ../my_sdcc_lib/rosso_sdcc_conversion.h	uint8_t nibble2hex(uint8_t val) {
004be4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004be6   ffe5
004be8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004bea   ffd9
004bec   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004bee   ffe5
004bf0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004bf2   ffe5
004bf4   0e02     movlw   0x02             	MOVLW	0x02
004bf6   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004bf8   f000
                                           ;	.line	21; ../my_sdcc_lib/rosso_sdcc_conversion.h	s = '0' + (val & 0xf);
004bfa   0e0f     movlw   0x0f             	MOVLW	0x0f
004bfc   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
004bfe   0e30     movlw   0x30             	MOVLW	0x30
004c00   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
                                           ;	.line	22; ../my_sdcc_lib/rosso_sdcc_conversion.h	if (s > '9')
004c02   0e3a     movlw   0x3a             	MOVLW	0x3a
004c04   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
004c06   e305     bnc     0x004c12         	BNC	_00152_DS_
                                           ;	.line	23; ../my_sdcc_lib/rosso_sdcc_conversion.h	s += 'A' - '9' - 1;
004c08   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004c0a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
004c0c   0e07     movlw   0x07             	MOVLW	0x07
004c0e   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
004c10   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00152_DS_:
                                           ;	.line	24; ../my_sdcc_lib/rosso_sdcc_conversion.h	return s;
004c12   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004c14   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004c16   f001
004c18   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004c1a   f000
004c1c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004c1e   ffd9
004c20   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__bcdtodec	code
                                           _bcdtodec:
                                           ;	.line	15; ../my_sdcc_lib/rosso_sdcc_conversion.h	uint8_t bcdtodec(uint8_t pValue) {
004c5e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004c60   ffe5
004c62   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004c64   ffd9
004c66   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004c68   ffe5
004c6a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004c6c   ffe5
004c6e   0e02     movlw   0x02             	MOVLW	0x02
004c70   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004c72   f000
                                           ;	.line	16; ../my_sdcc_lib/rosso_sdcc_conversion.h	return ((pValue >> 4) * 10 + (pValue & 0x0F));
004c74   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
004c76   0b0f     andlw   0x0f             	ANDLW	0x0f
                                           ; #	MOVWF	r0x01
                                           ; #;;multiply lit val:0x0a by variable r0x01 and store in r0x01
                                           ; #	MOVF	r0x01, W
004c78   0d0a     mullw   0x0a             	MULLW	0x0a
004c7a   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
004c7c   f001
004c7e   0e0f     movlw   0x0f             	MOVLW	0x0f
004c80   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
004c82   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004c84   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
004c86   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
004c88   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004c8a   f001
004c8c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004c8e   f000
004c90   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004c92   ffd9
004c94   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__dectobcd	code
                                           _dectobcd:
                                           ;	.line	11; ../my_sdcc_lib/rosso_sdcc_conversion.h	uint8_t dectobcd(uint8_t pValue) {
004870   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004872   ffe5
004874   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004876   ffd9
004878   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00487a   ffe5
00487c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00487e   ffe5
004880   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
004882   ffe5
004884   0e02     movlw   0x02             	MOVLW	0x02
004886   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004888   f000
                                           ;	.line	12; ../my_sdcc_lib/rosso_sdcc_conversion.h	return (((pValue / 10) << 4) | (pValue % 10));
00488a   0e0a     movlw   0x0a             	MOVLW	0x0a
00488c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00488e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004890   ffe5
004892   ecf1     call    0x0045e2, 0x0    	CALL	__divuchar
004894   f022
004896   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
004898   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00489a   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00489c   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
00489e   0bf0     andlw   0xf0             	ANDLW	0xf0
0048a0   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0048a2   0e0a     movlw   0x0a             	MOVLW	0x0a
0048a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0048a6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0048a8   ffe5
0048aa   ec2c     call    0x004658, 0x0    	CALL	__moduchar
0048ac   f023
0048ae   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0048b0   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0048b2   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0048b4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0048b6   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
0048b8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0048ba   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0048bc   f002
0048be   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0048c0   f001
0048c2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0048c4   f000
0048c6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0048c8   ffd9
0048ca   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___delay_ms	code
                                           __delay_ms:
                                           ;	.line	176; ../my_sdcc_lib/rosso_sdcc.h	void _delay_ms(uint16_t x){
004926   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004928   ffe5
00492a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00492c   ffd9
00492e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004930   ffe5
004932   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004934   ffe5
004936   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
004938   ffe5
00493a   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00493c   ffe5
00493e   0e02     movlw   0x02             	MOVLW	0x02
004940   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004942   f000
004944   0e03     movlw   0x03             	MOVLW	0x03
004946   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
004948   f001
                                           ;	.line	178; ../my_sdcc_lib/rosso_sdcc.h	for(i=0; i<x; i++){
00494a   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00494c   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           _00125_DS_:
00494e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
004950   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
004952   e102     bnz     0x004958         	BNZ	_00136_DS_
004954   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004956   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
                                           _00136_DS_:
004958   e206     bc      0x004966         	BC	_00127_DS_
                                           ;	.line	179; ../my_sdcc_lib/rosso_sdcc.h	delay_1ms();
00495a   0ea0     movlw   0xa0             	MOVLW	0xa0
00495c   ec89     call    0x004512, 0x0    	CALL	_delay100tcy
00495e   f022
                                           ;	.line	178; ../my_sdcc_lib/rosso_sdcc.h	for(i=0; i<x; i++){
004960   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
004962   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
004964   d7f4     bra     0x00494e         	BRA	_00125_DS_
                                           _00127_DS_:
004966   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
004968   f003
00496a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00496c   f002
00496e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004970   f001
004972   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004974   f000
004976   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004978   ffd9
00497a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___delay_us	code
                                           __delay_us:
                                           ;	.line	169; ../my_sdcc_lib/rosso_sdcc.h	void _delay_us(uint16_t x){
0046cc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0046ce   ffe5
0046d0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0046d2   ffd9
0046d4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0046d6   ffe5
0046d8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0046da   ffe5
0046dc   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0046de   ffe5
0046e0   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0046e2   ffe5
0046e4   0e02     movlw   0x02             	MOVLW	0x02
0046e6   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0046e8   f000
0046ea   0e03     movlw   0x03             	MOVLW	0x03
0046ec   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0046ee   f001
                                           ;	.line	171; ../my_sdcc_lib/rosso_sdcc.h	for(i=0; i<x; i++){
0046f0   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0046f2   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           _00107_DS_:
0046f4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0046f6   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
0046f8   e102     bnz     0x0046fe         	BNZ	_00118_DS_
0046fa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0046fc   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
                                           _00118_DS_:
0046fe   e213     bc      0x004726         	BC	_00109_DS_
004700   0000     nop                      	nop	
004702   0000     nop                      	nop	
004704   0000     nop                      	nop	
004706   0000     nop                      	nop	
004708   0000     nop                      	nop	
00470a   0000     nop                      	nop	
00470c   0000     nop                      	nop	
00470e   0000     nop                      	nop	
004710   0000     nop                      	nop	
004712   0000     nop                      	nop	
004714   0000     nop                      	nop	
004716   0000     nop                      	nop	
004718   0000     nop                      	nop	
00471a   0000     nop                      	nop	
00471c   0000     nop                      	nop	
00471e   0000     nop                      	nop	
                                           ;	.line	171; ../my_sdcc_lib/rosso_sdcc.h	for(i=0; i<x; i++){
004720   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
004722   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
004724   d7e7     bra     0x0046f4         	BRA	_00107_DS_
                                           _00109_DS_:
004726   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
004728   f003
00472a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00472c   f002
00472e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004730   f001
004732   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004734   f000
004736   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004738   ffd9
00473a   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	17872 (0x45d0) bytes (13.64%)
                                           ;           	 8936 (0x22e8) words
                                           ; udata size:	   19 (0x0013) bytes ( 0.52%)
                                           ; access size:	   28 (0x001c) bytes


                                           	end
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
