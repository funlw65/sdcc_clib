gplink-1.4.3 #1207 (May 12 2016)
Copyright (c) 1998-2016 gputils project
Listing File Generated: 5-14-2016  02:18:47
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.5.6 #9596 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	___uflags
                                           	global	__entry
                                           	global	__startup
                                           	global	_main
                                           	global	_LCD_POS
                                           	global	_s
                                           	global	_sr
                                           	global	__delay_us
                                           	global	__delay_ms
                                           	global	___lcd_write_nibble
                                           	global	___lcd_write
                                           	global	__lcd_write_data
                                           	global	__lcd_write_command
                                           	global	__lcd_line2index
                                           	global	__lcd_restore_cursor
                                           	global	_lcd_write_char
                                           	global	_lcd_write_str
                                           	global	_lcd_write_strF
                                           	global	_lcd_cursor_position
                                           	global	_lcd_shift_left
                                           	global	_lcd_shift_right
                                           	global	_lcd_cursor_shift_left
                                           	global	_lcd_cursor_shift_right
                                           	global	_lcd_clear_screen
                                           	global	_lcd_cursor_blink_display
                                           	global	_lcd_home
                                           	global	_lcd_clear_line
                                           	global	_lcd_progress
                                           	global	_lcd_init
                                           	global	_dectobcd
                                           	global	_bcdtodec
                                           	global	_nibble2hex
                                           	global	_byte2dec
                                           	global	_word2dec
                                           	global	_double2dec
                                           	global	_double2hex
                                           	global	_word2hex
                                           	global	_byte2hex
                                           	global	_sf

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrget1
                                           	extern	__divuchar
                                           	extern	__moduchar
                                           	extern	__gptrput1
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_stack_end
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_delay10tcy
                                           	extern	_delay100tcy
                                           	extern	_delay1ktcy
                                           	extern	_delay10ktcy
                                           	extern	__moduint
                                           	extern	__divuint
                                           	extern	__modulong
                                           	extern	__divulong
                                           	extern	_cinit

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           	idata
                                           ___uflags	db	0x00
                                           _sr	db	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21
                                           	db	0x00, 0x00


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1

                                           udata_main_0	udata
                                           ___lcd_write_nibble_nibble_1_14	res	1

                                           udata_main_1	udata
                                           _LCD_POS	res	1

                                           udata_main_2	udata
                                           _s	res	4

                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_main___entry	code	0X000300
                                           __entry:
000300   ef02     goto    0x003a04         	goto	__startup
000302   f01d
                                           	
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
0034f6   010f     movlb   0xf              	BANKSEL	_ANSELA
                                           ;	.line	49; main.c	AllDigital(); /* all pins digital */
0034f8   6b38     clrf    0x38, 0x1        	CLRF	_ANSELA, B
0034fa   010f     movlb   0xf              	BANKSEL	_ANSELB
0034fc   6b39     clrf    0x39, 0x1        	CLRF	_ANSELB, B
0034fe   010f     movlb   0xf              	BANKSEL	_ANSELC
003500   6b3a     clrf    0x3a, 0x1        	CLRF	_ANSELC, B
003502   010f     movlb   0xf              	BANKSEL	_ANSELD
003504   6b3b     clrf    0x3b, 0x1        	CLRF	_ANSELD, B
003506   010f     movlb   0xf              	BANKSEL	_ANSELE
003508   6b3c     clrf    0x3c, 0x1        	CLRF	_ANSELE, B
00350a   6ac2     clrf    0xc2, 0x0        	CLRF	_ADCON0
00350c   6ac1     clrf    0xc1, 0x0        	CLRF	_ADCON1
00350e   6ac0     clrf    0xc0, 0x0        	CLRF	_ADCON2
003510   6a79     clrf    0x79, 0x0        	CLRF	_CM1CON0
003512   6a78     clrf    0x78, 0x0        	CLRF	_CM2CON0
003514   6a77     clrf    0x77, 0x0        	CLRF	_CM2CON1
                                           ;	.line	51; main.c	OnBoardLED_dir = 0; /* output */
003516   9494     bcf     0x94, 0x2, 0x0   	BCF	_TRISCbits, 2
                                           ;	.line	52; main.c	OnBoardButton_dir = 1; /* input */
003518   8892     bsf     0x92, 0x4, 0x0   	BSF	_TRISAbits, 4
                                           ;	.line	53; main.c	OnBoardLED = 0;
00351a   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	57; main.c	lcd_init(LCD_HD44780);
00351c   0e00     movlw   0x00             	MOVLW	0x00
00351e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003520   ecad     call    0x00295a, 0x0    	CALL	_lcd_init
003522   f014
003524   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	59; main.c	for (i = 0; i < 4; i++) {
003526   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00606_DS_:
                                           ;	.line	60; main.c	OnBoardLED = 1;
003528   848b     bsf     0x8b, 0x2, 0x0   	BSF	_LATCbits, 2
                                           ;	.line	61; main.c	delay_100ms();
00352a   0ea0     movlw   0xa0             	MOVLW	0xa0
00352c   ecca     call    0x003994, 0x0    	CALL	_delay10ktcy
00352e   f01c
                                           ;	.line	62; main.c	delay_100ms();
003530   0ea0     movlw   0xa0             	MOVLW	0xa0
003532   ecca     call    0x003994, 0x0    	CALL	_delay10ktcy
003534   f01c
                                           ;	.line	63; main.c	OnBoardLED = 0;
003536   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	64; main.c	delay_100ms();
003538   0ea0     movlw   0xa0             	MOVLW	0xa0
00353a   ecca     call    0x003994, 0x0    	CALL	_delay10ktcy
00353c   f01c
                                           ;	.line	65; main.c	delay_100ms();
00353e   0ea0     movlw   0xa0             	MOVLW	0xa0
003540   ecca     call    0x003994, 0x0    	CALL	_delay10ktcy
003542   f01c
                                           ;	.line	59; main.c	for (i = 0; i < 4; i++) {
003544   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
003546   0e04     movlw   0x04             	MOVLW	0x04
003548   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
00354a   e3ee     bnc     0x003528         	BNC	_00606_DS_
                                           ;	.line	67; main.c	lcd_cursor_position(0, 0);
00354c   0e00     movlw   0x00             	MOVLW	0x00
00354e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003550   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003552   ec1c     call    0x004038, 0x0    	CALL	_lcd_cursor_position
003554   f020
003556   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003558   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	68; main.c	lcd_write_str(sr);  /* reading the string from the RAM */
00355a   0e80     movlw   0x80             	MOVLW	0x80
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
00355c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00355e   0e0f     movlw   0x0f             	MOVLW	HIGH(_sr)
003560   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003562   0e01     movlw   0x01             	MOVLW	LOW(_sr)
003564   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003566   ec7b     call    0x003cf6, 0x0    	CALL	_lcd_write_str
003568   f01e
00356a   0e03     movlw   0x03             	MOVLW	0x03
00356c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	69; main.c	lcd_write_strF(sf); /* reading the string from the FLASH */
00356e   0e00     movlw   0x00             	MOVLW	UPPER(_sf)
003570   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003572   0e39     movlw   0x39             	MOVLW	HIGH(_sf)
003574   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003576   0e62     movlw   0x62             	MOVLW	LOW(_sf)
003578   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00357a   ec47     call    0x003c8e, 0x0    	CALL	_lcd_write_strF
00357c   f01e
00357e   0e03     movlw   0x03             	MOVLW	0x03
003580   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	70; main.c	while (1) {
003582   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00604_DS_:
                                           ;	.line	72; main.c	counter += 1; /* count up to 255 and start again from zer0 */
003584   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
                                           ;	.line	73; main.c	lcd_cursor_position(1, 0);
003586   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003588   0e01     movlw   0x01             	MOVLW	0x01
00358a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00358c   ec1c     call    0x004038, 0x0    	CALL	_lcd_cursor_position
00358e   f020
003590   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003592   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	74; main.c	byte2dec(counter, s);
003594   0e80     movlw   0x80             	MOVLW	0x80
                                           ; #	MOVWF	r0x03
                                           ; #	MOVF	r0x03, W
003596   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003598   0e0f     movlw   0x0f             	MOVLW	HIGH(_s)
00359a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00359c   0e0f     movlw   0x0f             	MOVLW	LOW(_s)
00359e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0035a0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0035a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0035a4   ec55     call    0x002caa, 0x0    	CALL	_byte2dec
0035a6   f016
0035a8   0e04     movlw   0x04             	MOVLW	0x04
0035aa   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	75; main.c	for (i = 0; i < 3; i++) _lcd_write_data(s[i]);
0035ac   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00608_DS_:
0035ae   0e0f     movlw   0x0f             	MOVLW	LOW(_s)
0035b0   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
0035b2   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0035b4   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0035b6   0e0f     movlw   0x0f             	MOVLW	HIGH(_s)
0035b8   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0035ba   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
0035bc   ffe9
0035be   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
0035c0   ffea
0035c2   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
0035c4   f002
0035c6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0035c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0035ca   ec6b     call    0x0040d6, 0x0    	CALL	__lcd_write_data
0035cc   f020
0035ce   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0035d0   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0035d2   0e03     movlw   0x03             	MOVLW	0x03
0035d4   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
0035d6   e3eb     bnc     0x0035ae         	BNC	_00608_DS_
                                           ;	.line	76; main.c	delay_150ms();
0035d8   0ef0     movlw   0xf0             	MOVLW	0xf0
0035da   ecca     call    0x003994, 0x0    	CALL	_delay10ktcy
0035dc   f01c
                                           ;	.line	77; main.c	delay_150ms();
0035de   0ef0     movlw   0xf0             	MOVLW	0xf0
0035e0   ecca     call    0x003994, 0x0    	CALL	_delay10ktcy
0035e2   f01c
0035e4   d7cf     bra     0x003584         	BRA	_00604_DS_
0035e6   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___startup	code
                                           __startup:
                                           	;	Initialize the stack pointer
003a04   ee11     lfsr    0x1, 0x1ff       	lfsr	1, _stack_end
003a06   f0ff
003a08   ee21     lfsr    0x2, 0x1ff       	lfsr	2, _stack_end
003a0a   f0ff
                                           	;	1st silicon does not do this on POR
003a0c   6af8     clrf    0xf8, 0x0        	clrf	_TBLPTRU, 0
                                           	;	Initialize the flash memory access configuration.
                                           	;	This is harmless for non-flash devices, so we do it on all parts.
003a0e   8ea6     bsf     0xa6, 0x7, 0x0   	bsf	0xa6, 7, 0 ; EECON1.EEPGD = 1, TBLPTR accesses program memory
003a10   9ca6     bcf     0xa6, 0x6, 0x0   	bcf	0xa6, 6, 0 ; EECON1.CFGS = 0, TBLPTR accesses program memory
                                           	;	TBLPTR = &cinit
003a12   0ee4     movlw   0xe4             	movlw	low(_cinit)
003a14   6ef6     movwf   0xf6, 0x0        	movwf	_TBLPTRL, 0
003a16   0e41     movlw   0x41             	movlw	high(_cinit)
003a18   6ef7     movwf   0xf7, 0x0        	movwf	_TBLPTRH, 0
003a1a   0e00     movlw   0x00             	movlw	upper(_cinit)
003a1c   6ef8     movwf   0xf8, 0x0        	movwf	_TBLPTRU, 0
                                           	;	0x05 = cinit.num_init
003a1e   0009     tblrd*+                  	tblrd*+
003a20   cff5     movff   0xff5, 0x005     	movff	_TABLAT, 0x05
003a22   f005
003a24   0009     tblrd*+                  	tblrd*+
003a26   cff5     movff   0xff5, 0x006     	movff	_TABLAT, (0x05 + 1)
003a28   f006
                                           	;	while (0x05)
003a2a   d034     bra     0x003a94         	bra	entry_loop_dec
                                           entry_loop:
                                           	;	Count down so we only have to look up the data in _cinit once.
                                           	;	At this point we know that TBLPTR points to the top of the current
                                           	;	entry in _cinit, so we can just start reading the from, to, and
                                           	;	size values.
                                           	;	Read the source address low.
                                           	;	0x00 = 0x07 ->from;
003a2c   0009     tblrd*+                  	tblrd*+
003a2e   cff5     movff   0xff5, 0x000     	movff	_TABLAT, 0x00
003a30   f000
                                           	;	source address high
003a32   0009     tblrd*+                  	tblrd*+
003a34   cff5     movff   0xff5, 0x001     	movff	_TABLAT, (0x00 + 1)
003a36   f001
                                           	;	source address upper
003a38   0009     tblrd*+                  	tblrd*+
003a3a   cff5     movff   0xff5, 0x002     	movff	_TABLAT, (0x00 + 2)
003a3c   f002
                                           	;	Skip 0 byte since it is stored as 0 32bit int.
003a3e   0009     tblrd*+                  	tblrd*+
                                           	;	Read the destination address directly into FSR0
                                           	;	destination address low.
                                           	;	FSR0 = (unsigned short)0x07 ->to;
003a40   0009     tblrd*+                  	tblrd*+
003a42   cff5     movff   0xff5, 0xfe9     	movff	_TABLAT, _FSR0L
003a44   ffe9
                                           	;	destination address high
003a46   0009     tblrd*+                  	tblrd*+
003a48   cff5     movff   0xff5, 0xfea     	movff	_TABLAT, _FSR0H
003a4a   ffea
                                           	;	Skip two bytes since it is stored as 0 32bit int.
003a4c   0009     tblrd*+                  	tblrd*+
003a4e   0009     tblrd*+                  	tblrd*+
                                           	;	Read the size of data to transfer to destination address.
                                           	;	0x03 = (unsigned short)0x07 ->size;
003a50   0009     tblrd*+                  	tblrd*+
003a52   cff5     movff   0xff5, 0x003     	movff	_TABLAT, 0x03
003a54   f003
003a56   0009     tblrd*+                  	tblrd*+
003a58   cff5     movff   0xff5, 0x004     	movff	_TABLAT, (0x03 + 1)
003a5a   f004
                                           	;	Skip two bytes since it is stored as 0 32bit int.
003a5c   0009     tblrd*+                  	tblrd*+
003a5e   0009     tblrd*+                  	tblrd*+
                                           	;	0x00 = 0x07 ->from;
                                           	;	FSR0 = (unsigned short)0x07 ->to;
                                           	;	0x03 = (unsigned short)0x07 ->size;
                                           	;	The table pointer now points to the next entry. Save it
                                           	;	off since we will be using the table pointer to do the copying
                                           	;	for the entry.
                                           	;	0x07 = TBLPTR
003a60   cff6     movff   0xff6, 0x007     	movff	_TBLPTRL, 0x07
003a62   f007
003a64   cff7     movff   0xff7, 0x008     	movff	_TBLPTRH, (0x07 + 1)
003a66   f008
003a68   cff8     movff   0xff8, 0x009     	movff	_TBLPTRU, (0x07 + 2)
003a6a   f009
                                           	;	Now assign the source address to the table pointer.
                                           	;	TBLPTR = 0x00
003a6c   c000     movff   0x000, 0xff6     	movff	0x00, _TBLPTRL
003a6e   fff6
003a70   c001     movff   0x001, 0xff7     	movff	(0x00 + 1), _TBLPTRH
003a72   fff7
003a74   c002     movff   0x002, 0xff8     	movff	(0x00 + 2), _TBLPTRU
003a76   fff8
003a78   d003     bra     0x003a80         	bra	copy_loop_dec
                                           copy_loop:
003a7a   0009     tblrd*+                  	tblrd*+
003a7c   cff5     movff   0xff5, 0xfee     	movff	_TABLAT, _POSTINC0
003a7e   ffee
                                           copy_loop_dec:
                                           	;	while (--0x03);
                                           	;	Decrement and test the byte counter.
                                           	;	The cycle ends when the value of counter reaches the -1.
003a80   0603     decf    0x03, 0x1, 0x0   	decf	0x03, f, 0
003a82   e2fb     bc      0x003a7a         	bc	copy_loop
003a84   0604     decf    0x04, 0x1, 0x0   	decf	(0x03 + 1), f, 0
003a86   e2f9     bc      0x003a7a         	bc	copy_loop
                                           	;	Restore the table pointer for the next entry.
                                           	;	TBLPTR = 0x07
003a88   c007     movff   0x007, 0xff6     	movff	0x07, _TBLPTRL
003a8a   fff6
003a8c   c008     movff   0x008, 0xff7     	movff	(0x07 + 1), _TBLPTRH
003a8e   fff7
003a90   c009     movff   0x009, 0xff8     	movff	(0x07 + 2), _TBLPTRU
003a92   fff8
                                           entry_loop_dec:
                                           	;	while (--0x05);
                                           	;	Decrement and test the entry counter.
                                           	;	The cycle ends when the value of counter reaches the -1.
003a94   0605     decf    0x05, 0x1, 0x0   	decf	0x05, f, 0
003a96   e2ca     bc      0x003a2c         	bc	entry_loop
003a98   0606     decf    0x06, 0x1, 0x0   	decf	(0x05 + 1), f, 0
003a9a   e2c8     bc      0x003a2c         	bc	entry_loop
                                           	
                                           ;	.line	249; ../my_sdcc_lib/crt0i.c	main ();
003a9c   ec7b     call    0x0034f6, 0x0    	CALL	_main
003a9e   f01a
                                           lockup:
                                           	;	Returning from main will lock up.
003aa0   d7ff     bra     0x003aa0         	bra	lockup
                                           	
                                           ; ; Starting pCode block
                                           S_main__byte2hex	code
                                           _byte2hex:
                                           ;	.line	287; ../my_sdcc_lib/rosso_sdcc_conversion.h	void byte2hex(uint8_t val, uint8_t *s) {
0035e8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0035ea   ffe5
0035ec   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0035ee   ffd9
0035f0   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0035f2   ffe5
0035f4   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0035f6   ffe5
0035f8   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0035fa   ffe5
0035fc   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0035fe   ffe5
003600   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
003602   ffe5
003604   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
003606   ffe5
003608   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
00360a   ffe5
00360c   0e02     movlw   0x02             	MOVLW	0x02
00360e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003610   f000
003612   0e03     movlw   0x03             	MOVLW	0x03
003614   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003616   f001
003618   0e04     movlw   0x04             	MOVLW	0x04
00361a   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
00361c   f002
00361e   0e05     movlw   0x05             	MOVLW	0x05
003620   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
003622   f003
                                           ;	.line	288; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = nibble2hex(val >> 4);
003624   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
003626   0b0f     andlw   0x0f             	ANDLW	0x0f
                                           ; #	MOVWF	r0x04
                                           ; #	MOVF	r0x04, W
003628   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00362a   ec81     call    0x003f02, 0x0    	CALL	_nibble2hex
00362c   f01f
00362e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
003630   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003632   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
003634   ffe5
003636   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
003638   ffe9
00363a   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
00363c   fff3
00363e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003640   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
003642   f020
                                           ;	.line	289; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = nibble2hex(val);
003644   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003646   0f01     addlw   0x01             	ADDLW	0x01
003648   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00364a   0e00     movlw   0x00             	MOVLW	0x00
00364c   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
00364e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
003650   0e00     movlw   0x00             	MOVLW	0x00
003652   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
003654   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
003656   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003658   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00365a   ec81     call    0x003f02, 0x0    	CALL	_nibble2hex
00365c   f01f
00365e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
003660   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003662   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003664   ffe5
003666   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
003668   ffe9
00366a   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
00366c   fff3
00366e   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
003670   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
003672   f020
                                           ;	.line	290; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = 0;
003674   0e02     movlw   0x02             	MOVLW	0x02
003676   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
003678   0e00     movlw   0x00             	MOVLW	0x00
00367a   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00367c   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00367e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003680   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
003682   ffe9
003684   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
003686   fff3
003688   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00368a   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00368c   f020
00368e   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
003690   f006
003692   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
003694   f005
003696   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
003698   f004
00369a   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00369c   f003
00369e   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0036a0   f002
0036a2   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0036a4   f001
0036a6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0036a8   f000
0036aa   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0036ac   ffd9
0036ae   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__word2hex	code
                                           _word2hex:
                                           ;	.line	279; ../my_sdcc_lib/rosso_sdcc_conversion.h	void word2hex(uint16_t val, uint8_t *s) {
003152   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003154   ffe5
003156   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003158   ffd9
00315a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00315c   ffe5
00315e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003160   ffe5
003162   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003164   ffe5
003166   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003168   ffe5
00316a   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00316c   ffe5
00316e   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
003170   ffe5
003172   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
003174   ffe5
003176   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
003178   ffe5
00317a   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
00317c   ffe5
00317e   0e02     movlw   0x02             	MOVLW	0x02
003180   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003182   f000
003184   0e03     movlw   0x03             	MOVLW	0x03
003186   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003188   f001
00318a   0e04     movlw   0x04             	MOVLW	0x04
00318c   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
00318e   f002
003190   0e05     movlw   0x05             	MOVLW	0x05
003192   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
003194   f003
003196   0e06     movlw   0x06             	MOVLW	0x06
003198   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
00319a   f004
                                           ;	.line	280; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = nibble2hex(val >> 12);
00319c   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
00319e   0b0f     andlw   0x0f             	ANDLW	0x0f
0031a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0031a2   ec81     call    0x003f02, 0x0    	CALL	_nibble2hex
0031a4   f01f
0031a6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0031a8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0031aa   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
0031ac   ffe5
0031ae   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
0031b0   ffe9
0031b2   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
0031b4   fff3
0031b6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0031b8   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0031ba   f020
                                           ;	.line	281; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = nibble2hex(val >> 8);
0031bc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0031be   0f01     addlw   0x01             	ADDLW	0x01
0031c0   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0031c2   0e00     movlw   0x00             	MOVLW	0x00
0031c4   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0031c6   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0031c8   0e00     movlw   0x00             	MOVLW	0x00
0031ca   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0031cc   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0031ce   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0031d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0031d2   ec81     call    0x003f02, 0x0    	CALL	_nibble2hex
0031d4   f01f
0031d6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0031d8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0031da   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0031dc   ffe5
0031de   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0031e0   ffe9
0031e2   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0031e4   fff3
0031e6   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0031e8   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0031ea   f020
                                           ;	.line	282; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = nibble2hex(val >> 4);
0031ec   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0031ee   0f02     addlw   0x02             	ADDLW	0x02
0031f0   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0031f2   0e00     movlw   0x00             	MOVLW	0x00
0031f4   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0031f6   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0031f8   0e00     movlw   0x00             	MOVLW	0x00
0031fa   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0031fc   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0031fe   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
003200   0b0f     andlw   0x0f             	ANDLW	0x0f
003202   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
003204   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
003206   0bf0     andlw   0xf0             	ANDLW	0xf0
003208   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
00320a   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00320c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00320e   ec81     call    0x003f02, 0x0    	CALL	_nibble2hex
003210   f01f
003212   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
003214   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003216   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
003218   ffe5
00321a   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
00321c   ffe9
00321e   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
003220   fff3
003222   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
003224   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
003226   f020
                                           ;	.line	283; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = nibble2hex(val);
003228   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00322a   0f03     addlw   0x03             	ADDLW	0x03
00322c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00322e   0e00     movlw   0x00             	MOVLW	0x00
003230   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
003232   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
003234   0e00     movlw   0x00             	MOVLW	0x00
003236   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
003238   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00323a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00323c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00323e   ec81     call    0x003f02, 0x0    	CALL	_nibble2hex
003240   f01f
003242   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
003244   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003246   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003248   ffe5
00324a   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
00324c   ffe9
00324e   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
003250   fff3
003252   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
003254   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
003256   f020
                                           ;	.line	284; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = 0;
003258   0e04     movlw   0x04             	MOVLW	0x04
00325a   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
00325c   0e00     movlw   0x00             	MOVLW	0x00
00325e   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
003260   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
003262   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003264   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
003266   ffe9
003268   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
00326a   fff3
00326c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00326e   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
003270   f020
003272   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
003274   f008
003276   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
003278   f007
00327a   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
00327c   f006
00327e   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
003280   f005
003282   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
003284   f004
003286   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003288   f003
00328a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00328c   f002
00328e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003290   f001
003292   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003294   f000
003296   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003298   ffd9
00329a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__double2hex	code
                                           _double2hex:
                                           ;	.line	267; ../my_sdcc_lib/rosso_sdcc_conversion.h	void double2hex(uint32_t val, uint8_t *s) {
002f14   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002f16   ffe5
002f18   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002f1a   ffd9
002f1c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002f1e   ffe5
002f20   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002f22   ffe5
002f24   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002f26   ffe5
002f28   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002f2a   ffe5
002f2c   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002f2e   ffe5
002f30   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
002f32   ffe5
002f34   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
002f36   ffe5
002f38   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002f3a   ffe5
002f3c   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
002f3e   ffe5
002f40   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
002f42   ffe5
002f44   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
002f46   ffe5
002f48   0e02     movlw   0x02             	MOVLW	0x02
002f4a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002f4c   f000
002f4e   0e03     movlw   0x03             	MOVLW	0x03
002f50   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002f52   f001
002f54   0e04     movlw   0x04             	MOVLW	0x04
002f56   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
002f58   f002
002f5a   0e05     movlw   0x05             	MOVLW	0x05
002f5c   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
002f5e   f003
002f60   0e06     movlw   0x06             	MOVLW	0x06
002f62   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
002f64   f004
002f66   0e07     movlw   0x07             	MOVLW	0x07
002f68   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
002f6a   f005
002f6c   0e08     movlw   0x08             	MOVLW	0x08
002f6e   cfdb     movff   0xfdb, 0x006     	MOVFF	PLUSW2, r0x06
002f70   f006
                                           ;	.line	268; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = nibble2hex(val >> 28);
002f72   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
002f74   0b0f     andlw   0x0f             	ANDLW	0x0f
002f76   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f78   ec81     call    0x003f02, 0x0    	CALL	_nibble2hex
002f7a   f01f
002f7c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002f7e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002f80   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002f82   ffe5
002f84   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
002f86   ffe9
002f88   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
002f8a   fff3
002f8c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
002f8e   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002f90   f020
                                           ;	.line	269; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = nibble2hex(val >> 24);
002f92   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002f94   0f01     addlw   0x01             	ADDLW	0x01
002f96   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002f98   0e00     movlw   0x00             	MOVLW	0x00
002f9a   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002f9c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002f9e   0e00     movlw   0x00             	MOVLW	0x00
002fa0   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
002fa2   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
002fa4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002fa6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002fa8   ec81     call    0x003f02, 0x0    	CALL	_nibble2hex
002faa   f01f
002fac   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
002fae   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002fb0   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
002fb2   ffe5
002fb4   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
002fb6   ffe9
002fb8   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
002fba   fff3
002fbc   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
002fbe   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002fc0   f020
                                           ;	.line	270; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = nibble2hex(val >> 20);
002fc2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002fc4   0f02     addlw   0x02             	ADDLW	0x02
002fc6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002fc8   0e00     movlw   0x00             	MOVLW	0x00
002fca   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002fcc   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002fce   0e00     movlw   0x00             	MOVLW	0x00
002fd0   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
002fd2   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
002fd4   3802     swapf   0x02, 0x0, 0x0   	SWAPF	r0x02, W
002fd6   0b0f     andlw   0x0f             	ANDLW	0x0f
002fd8   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
002fda   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
002fdc   0bf0     andlw   0xf0             	ANDLW	0xf0
002fde   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
002fe0   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
002fe2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002fe4   ec81     call    0x003f02, 0x0    	CALL	_nibble2hex
002fe6   f01f
002fe8   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
002fea   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002fec   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
002fee   ffe5
002ff0   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
002ff2   ffe9
002ff4   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
002ff6   fff3
002ff8   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
002ffa   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002ffc   f020
                                           ;	.line	271; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = nibble2hex(val >> 16);
002ffe   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003000   0f03     addlw   0x03             	ADDLW	0x03
003002   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
003004   0e00     movlw   0x00             	MOVLW	0x00
003006   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
003008   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00300a   0e00     movlw   0x00             	MOVLW	0x00
00300c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00300e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
003010   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003012   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003014   ec81     call    0x003f02, 0x0    	CALL	_nibble2hex
003016   f01f
003018   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00301a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00301c   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00301e   ffe5
003020   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
003022   ffe9
003024   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
003026   fff3
003028   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00302a   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00302c   f020
                                           ;	.line	272; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = nibble2hex(val >> 12);
00302e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003030   0f04     addlw   0x04             	ADDLW	0x04
003032   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
003034   0e00     movlw   0x00             	MOVLW	0x00
003036   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
003038   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00303a   0e00     movlw   0x00             	MOVLW	0x00
00303c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00303e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
003040   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
003042   0b0f     andlw   0x0f             	ANDLW	0x0f
003044   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
003046   3802     swapf   0x02, 0x0, 0x0   	SWAPF	r0x02, W
003048   0bf0     andlw   0xf0             	ANDLW	0xf0
00304a   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
00304c   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
00304e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003050   ec81     call    0x003f02, 0x0    	CALL	_nibble2hex
003052   f01f
003054   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
003056   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003058   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00305a   ffe5
00305c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00305e   ffe9
003060   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
003062   fff3
003064   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
003066   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
003068   f020
                                           ;	.line	273; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = nibble2hex(val >> 8);
00306a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00306c   0f05     addlw   0x05             	ADDLW	0x05
00306e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
003070   0e00     movlw   0x00             	MOVLW	0x00
003072   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
003074   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
003076   0e00     movlw   0x00             	MOVLW	0x00
003078   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00307a   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00307c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00307e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003080   ec81     call    0x003f02, 0x0    	CALL	_nibble2hex
003082   f01f
003084   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
003086   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003088   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00308a   ffe5
00308c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00308e   ffe9
003090   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
003092   fff3
003094   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
003096   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
003098   f020
                                           ;	.line	274; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = nibble2hex(val >> 4);
00309a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00309c   0f06     addlw   0x06             	ADDLW	0x06
00309e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0030a0   0e00     movlw   0x00             	MOVLW	0x00
0030a2   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0030a4   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0030a6   0e00     movlw   0x00             	MOVLW	0x00
0030a8   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0030aa   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0030ac   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0030ae   0b0f     andlw   0x0f             	ANDLW	0x0f
0030b0   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0030b2   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
0030b4   0bf0     andlw   0xf0             	ANDLW	0xf0
0030b6   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0030b8   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
0030ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0030bc   ec81     call    0x003f02, 0x0    	CALL	_nibble2hex
0030be   f01f
0030c0   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0030c2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0030c4   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0030c6   ffe5
0030c8   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0030ca   ffe9
0030cc   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0030ce   fff3
0030d0   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0030d2   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0030d4   f020
                                           ;	.line	275; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = nibble2hex(val);
0030d6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0030d8   0f07     addlw   0x07             	ADDLW	0x07
0030da   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0030dc   0e00     movlw   0x00             	MOVLW	0x00
0030de   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0030e0   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0030e2   0e00     movlw   0x00             	MOVLW	0x00
0030e4   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0030e6   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0030e8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0030ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0030ec   ec81     call    0x003f02, 0x0    	CALL	_nibble2hex
0030ee   f01f
0030f0   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0030f2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0030f4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0030f6   ffe5
0030f8   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0030fa   ffe9
0030fc   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0030fe   fff3
003100   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
003102   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
003104   f020
                                           ;	.line	276; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = 0;
003106   0e08     movlw   0x08             	MOVLW	0x08
003108   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00310a   0e00     movlw   0x00             	MOVLW	0x00
00310c   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
00310e   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
003110   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003112   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
003114   ffe9
003116   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
003118   fff3
00311a   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00311c   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00311e   f020
003120   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
003122   f00a
003124   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
003126   f009
003128   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
00312a   f008
00312c   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
00312e   f007
003130   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
003132   f006
003134   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
003136   f005
003138   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
00313a   f004
00313c   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00313e   f003
003140   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003142   f002
003144   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003146   f001
003148   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00314a   f000
00314c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00314e   ffd9
003150   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__double2dec	code
                                           _double2dec:
                                           ;	.line	98; ../my_sdcc_lib/rosso_sdcc_conversion.h	void double2dec(uint32_t val, uint8_t *s) {
00032a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00032c   ffe5
00032e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000330   ffd9
000332   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000334   ffe5
000336   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000338   ffe5
00033a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00033c   ffe5
00033e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
000340   ffe5
000342   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
000344   ffe5
000346   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
000348   ffe5
00034a   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
00034c   ffe5
00034e   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
000350   ffe5
000352   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
000354   ffe5
000356   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
000358   ffe5
00035a   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00035c   ffe5
00035e   0e02     movlw   0x02             	MOVLW	0x02
000360   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000362   f000
000364   0e03     movlw   0x03             	MOVLW	0x03
000366   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
000368   f001
00036a   0e04     movlw   0x04             	MOVLW	0x04
00036c   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
00036e   f002
000370   0e05     movlw   0x05             	MOVLW	0x05
000372   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
000374   f003
000376   0e06     movlw   0x06             	MOVLW	0x06
000378   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
00037a   f004
00037c   0e07     movlw   0x07             	MOVLW	0x07
00037e   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
000380   f005
000382   0e08     movlw   0x08             	MOVLW	0x08
000384   cfdb     movff   0xfdb, 0x006     	MOVFF	PLUSW2, r0x06
000386   f006
                                           ;	.line	99; ../my_sdcc_lib/rosso_sdcc_conversion.h	if (val > 999999999) {
000388   0e3b     movlw   0x3b             	MOVLW	0x3b
00038a   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
00038c   e108     bnz     0x00039e         	BNZ	_00563_DS_
00038e   0e9a     movlw   0x9a             	MOVLW	0x9a
000390   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
000392   e105     bnz     0x00039e         	BNZ	_00563_DS_
000394   0eca     movlw   0xca             	MOVLW	0xca
000396   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
000398   e102     bnz     0x00039e         	BNZ	_00563_DS_
00039a   0e00     movlw   0x00             	MOVLW	0x00
00039c   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00563_DS_:
00039e   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0003a0   ef18     goto    0x000830         	GOTO	_00532_DS_
0003a2   f004
                                           ;	.line	100; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
0003a4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0003a6   0f09     addlw   0x09             	ADDLW	0x09
0003a8   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0003aa   0e00     movlw   0x00             	MOVLW	0x00
0003ac   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0003ae   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0003b0   0e00     movlw   0x00             	MOVLW	0x00
0003b2   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0003b4   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0003b6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0003b8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0003ba   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0003bc   0e0a     movlw   0x0a             	MOVLW	0x0a
0003be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003c0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0003c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003c4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0003c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003c8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0003ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003cc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0003ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003d0   ec4e     call    0x00329c, 0x0    	CALL	__modulong
0003d2   f019
0003d4   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0003d6   0e08     movlw   0x08             	MOVLW	0x08
0003d8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0003da   0e30     movlw   0x30             	MOVLW	0x30
0003dc   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0003de   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0003e0   ffe5
0003e2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0003e4   ffe9
0003e6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0003e8   fff3
0003ea   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0003ec   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0003ee   f020
                                           ;	.line	101; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0003f0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0003f2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0003f4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0003f6   0e0a     movlw   0x0a             	MOVLW	0x0a
0003f8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003fa   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0003fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003fe   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000400   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000402   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000404   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000406   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000408   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00040a   eceb     call    0x0033d6, 0x0    	CALL	__divulong
00040c   f019
00040e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000410   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000412   f001
000414   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000416   f002
000418   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00041a   f003
00041c   0e08     movlw   0x08             	MOVLW	0x08
00041e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	102; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
000420   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000422   0f08     addlw   0x08             	ADDLW	0x08
000424   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000426   0e00     movlw   0x00             	MOVLW	0x00
000428   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00042a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00042c   0e00     movlw   0x00             	MOVLW	0x00
00042e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000430   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000432   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000434   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000436   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000438   0e0a     movlw   0x0a             	MOVLW	0x0a
00043a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00043c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00043e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000440   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000442   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000444   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000446   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000448   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00044a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00044c   ec4e     call    0x00329c, 0x0    	CALL	__modulong
00044e   f019
000450   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000452   0e08     movlw   0x08             	MOVLW	0x08
000454   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000456   0e30     movlw   0x30             	MOVLW	0x30
000458   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
00045a   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00045c   ffe5
00045e   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000460   ffe9
000462   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000464   fff3
000466   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000468   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00046a   f020
                                           ;	.line	103; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00046c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00046e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000470   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000472   0e0a     movlw   0x0a             	MOVLW	0x0a
000474   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000476   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000478   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00047a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00047c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00047e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000480   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000482   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000484   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000486   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000488   f019
00048a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00048c   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00048e   f001
000490   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000492   f002
000494   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000496   f003
000498   0e08     movlw   0x08             	MOVLW	0x08
00049a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	104; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + (val % 10);
00049c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00049e   0f07     addlw   0x07             	ADDLW	0x07
0004a0   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0004a2   0e00     movlw   0x00             	MOVLW	0x00
0004a4   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0004a6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0004a8   0e00     movlw   0x00             	MOVLW	0x00
0004aa   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0004ac   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0004ae   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0004b0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0004b2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0004b4   0e0a     movlw   0x0a             	MOVLW	0x0a
0004b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004b8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0004ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004bc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0004be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004c0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0004c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004c4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0004c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004c8   ec4e     call    0x00329c, 0x0    	CALL	__modulong
0004ca   f019
0004cc   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0004ce   0e08     movlw   0x08             	MOVLW	0x08
0004d0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0004d2   0e30     movlw   0x30             	MOVLW	0x30
0004d4   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0004d6   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0004d8   ffe5
0004da   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0004dc   ffe9
0004de   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0004e0   fff3
0004e2   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0004e4   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0004e6   f020
                                           ;	.line	105; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0004e8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0004ea   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0004ec   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0004ee   0e0a     movlw   0x0a             	MOVLW	0x0a
0004f0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004f2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0004f4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004f6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0004f8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004fa   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0004fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004fe   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000500   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000502   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000504   f019
000506   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000508   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00050a   f001
00050c   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
00050e   f002
000510   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000512   f003
000514   0e08     movlw   0x08             	MOVLW	0x08
000516   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	106; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = '0' + (val % 10);
000518   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00051a   0f06     addlw   0x06             	ADDLW	0x06
00051c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00051e   0e00     movlw   0x00             	MOVLW	0x00
000520   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000522   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000524   0e00     movlw   0x00             	MOVLW	0x00
000526   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000528   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00052a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00052c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00052e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000530   0e0a     movlw   0x0a             	MOVLW	0x0a
000532   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000534   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000536   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000538   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00053a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00053c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00053e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000540   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000542   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000544   ec4e     call    0x00329c, 0x0    	CALL	__modulong
000546   f019
000548   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00054a   0e08     movlw   0x08             	MOVLW	0x08
00054c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00054e   0e30     movlw   0x30             	MOVLW	0x30
000550   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000552   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000554   ffe5
000556   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000558   ffe9
00055a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00055c   fff3
00055e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000560   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000562   f020
                                           ;	.line	107; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000564   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000566   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000568   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00056a   0e0a     movlw   0x0a             	MOVLW	0x0a
00056c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00056e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000570   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000572   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000574   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000576   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000578   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00057a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00057c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00057e   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000580   f019
000582   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000584   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000586   f001
000588   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
00058a   f002
00058c   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00058e   f003
000590   0e08     movlw   0x08             	MOVLW	0x08
000592   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	108; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = '0' + (val % 10);
000594   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000596   0f05     addlw   0x05             	ADDLW	0x05
000598   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00059a   0e00     movlw   0x00             	MOVLW	0x00
00059c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00059e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0005a0   0e00     movlw   0x00             	MOVLW	0x00
0005a2   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0005a4   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0005a6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0005a8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0005aa   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0005ac   0e0a     movlw   0x0a             	MOVLW	0x0a
0005ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005b0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0005b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005b4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0005b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005b8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0005ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005bc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0005be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005c0   ec4e     call    0x00329c, 0x0    	CALL	__modulong
0005c2   f019
0005c4   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0005c6   0e08     movlw   0x08             	MOVLW	0x08
0005c8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0005ca   0e30     movlw   0x30             	MOVLW	0x30
0005cc   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0005ce   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0005d0   ffe5
0005d2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0005d4   ffe9
0005d6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0005d8   fff3
0005da   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0005dc   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0005de   f020
                                           ;	.line	109; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0005e0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0005e2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0005e4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0005e6   0e0a     movlw   0x0a             	MOVLW	0x0a
0005e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005ea   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0005ec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005ee   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0005f0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005f2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0005f4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005f6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0005f8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005fa   eceb     call    0x0033d6, 0x0    	CALL	__divulong
0005fc   f019
0005fe   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000600   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000602   f001
000604   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000606   f002
000608   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00060a   f003
00060c   0e08     movlw   0x08             	MOVLW	0x08
00060e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	110; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
000610   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000612   0f04     addlw   0x04             	ADDLW	0x04
000614   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000616   0e00     movlw   0x00             	MOVLW	0x00
000618   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00061a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00061c   0e00     movlw   0x00             	MOVLW	0x00
00061e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000620   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000622   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000624   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000626   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000628   0e0a     movlw   0x0a             	MOVLW	0x0a
00062a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00062c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00062e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000630   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000632   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000634   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000636   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000638   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00063a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00063c   ec4e     call    0x00329c, 0x0    	CALL	__modulong
00063e   f019
000640   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000642   0e08     movlw   0x08             	MOVLW	0x08
000644   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000646   0e30     movlw   0x30             	MOVLW	0x30
000648   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
00064a   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00064c   ffe5
00064e   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000650   ffe9
000652   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000654   fff3
000656   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000658   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00065a   f020
                                           ;	.line	111; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00065c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00065e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000660   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000662   0e0a     movlw   0x0a             	MOVLW	0x0a
000664   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000666   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000668   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00066a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00066c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00066e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000670   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000672   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000674   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000676   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000678   f019
00067a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00067c   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00067e   f001
000680   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000682   f002
000684   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000686   f003
000688   0e08     movlw   0x08             	MOVLW	0x08
00068a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	112; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + (val % 10);
00068c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00068e   0f03     addlw   0x03             	ADDLW	0x03
000690   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000692   0e00     movlw   0x00             	MOVLW	0x00
000694   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000696   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000698   0e00     movlw   0x00             	MOVLW	0x00
00069a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00069c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00069e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0006a0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0006a2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0006a4   0e0a     movlw   0x0a             	MOVLW	0x0a
0006a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006a8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0006aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006ac   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0006ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006b0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0006b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006b4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0006b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006b8   ec4e     call    0x00329c, 0x0    	CALL	__modulong
0006ba   f019
0006bc   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0006be   0e08     movlw   0x08             	MOVLW	0x08
0006c0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0006c2   0e30     movlw   0x30             	MOVLW	0x30
0006c4   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0006c6   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0006c8   ffe5
0006ca   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0006cc   ffe9
0006ce   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0006d0   fff3
0006d2   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0006d4   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0006d6   f020
                                           ;	.line	113; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0006d8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0006da   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0006dc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0006de   0e0a     movlw   0x0a             	MOVLW	0x0a
0006e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006e2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0006e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006e6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0006e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006ea   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0006ec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006ee   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0006f0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006f2   eceb     call    0x0033d6, 0x0    	CALL	__divulong
0006f4   f019
0006f6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0006f8   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0006fa   f001
0006fc   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0006fe   f002
000700   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000702   f003
000704   0e08     movlw   0x08             	MOVLW	0x08
000706   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	114; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + (val % 10);
000708   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00070a   0f02     addlw   0x02             	ADDLW	0x02
00070c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00070e   0e00     movlw   0x00             	MOVLW	0x00
000710   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000712   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000714   0e00     movlw   0x00             	MOVLW	0x00
000716   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000718   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00071a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00071c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00071e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000720   0e0a     movlw   0x0a             	MOVLW	0x0a
000722   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000724   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000726   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000728   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00072a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00072c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00072e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000730   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000732   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000734   ec4e     call    0x00329c, 0x0    	CALL	__modulong
000736   f019
000738   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00073a   0e08     movlw   0x08             	MOVLW	0x08
00073c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00073e   0e30     movlw   0x30             	MOVLW	0x30
000740   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000742   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000744   ffe5
000746   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000748   ffe9
00074a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00074c   fff3
00074e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000750   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000752   f020
                                           ;	.line	115; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000754   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000756   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000758   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00075a   0e0a     movlw   0x0a             	MOVLW	0x0a
00075c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00075e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000760   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000762   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000764   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000766   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000768   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00076a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00076c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00076e   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000770   f019
000772   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000774   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000776   f001
000778   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
00077a   f002
00077c   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00077e   f003
000780   0e08     movlw   0x08             	MOVLW	0x08
000782   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	116; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = '0' + (val % 10);
000784   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000786   0f01     addlw   0x01             	ADDLW	0x01
000788   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00078a   0e00     movlw   0x00             	MOVLW	0x00
00078c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00078e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000790   0e00     movlw   0x00             	MOVLW	0x00
000792   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000794   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000796   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000798   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00079a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00079c   0e0a     movlw   0x0a             	MOVLW	0x0a
00079e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007a0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0007a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007a4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0007a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007a8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0007aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007ac   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0007ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007b0   ec4e     call    0x00329c, 0x0    	CALL	__modulong
0007b2   f019
0007b4   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0007b6   0e08     movlw   0x08             	MOVLW	0x08
0007b8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0007ba   0e30     movlw   0x30             	MOVLW	0x30
0007bc   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0007be   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0007c0   ffe5
0007c2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0007c4   ffe9
0007c6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0007c8   fff3
0007ca   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0007cc   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0007ce   f020
                                           ;	.line	117; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0007d0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0007d2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0007d4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0007d6   0e0a     movlw   0x0a             	MOVLW	0x0a
0007d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007da   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0007dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007de   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0007e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007e2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0007e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007e6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0007e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007ea   eceb     call    0x0033d6, 0x0    	CALL	__divulong
0007ec   f019
0007ee   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0007f0   0e08     movlw   0x08             	MOVLW	0x08
0007f2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	118; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = '0' + val;
0007f4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0007f6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0007f8   0e30     movlw   0x30             	MOVLW	0x30
0007fa   2607     addwf   0x07, 0x1, 0x0   	ADDWF	r0x07, F
0007fc   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0007fe   ffe5
000800   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000802   ffe9
000804   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
000806   fff3
000808   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00080a   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00080c   f020
                                           ;	.line	119; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
00080e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000810   0f0a     addlw   0x0a             	ADDLW	0x0a
000812   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000814   0e00     movlw   0x00             	MOVLW	0x00
000816   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000818   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00081a   0e00     movlw   0x00             	MOVLW	0x00
00081c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00081e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000820   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000822   ffe9
000824   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000826   fff3
000828   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00082a   f020
00082c   ef39     goto    0x002272         	GOTO	_00534_DS_
00082e   f011
                                           _00532_DS_:
                                           ;	.line	120; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 99999999) {
000830   0e05     movlw   0x05             	MOVLW	0x05
000832   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
000834   e108     bnz     0x000846         	BNZ	_00564_DS_
000836   0ef5     movlw   0xf5             	MOVLW	0xf5
000838   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
00083a   e105     bnz     0x000846         	BNZ	_00564_DS_
00083c   0ee1     movlw   0xe1             	MOVLW	0xe1
00083e   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
000840   e102     bnz     0x000846         	BNZ	_00564_DS_
000842   0e00     movlw   0x00             	MOVLW	0x00
000844   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00564_DS_:
000846   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
000848   ef40     goto    0x000c80         	GOTO	_00529_DS_
00084a   f006
                                           ;	.line	121; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
00084c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00084e   0f09     addlw   0x09             	ADDLW	0x09
000850   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000852   0e00     movlw   0x00             	MOVLW	0x00
000854   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000856   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000858   0e00     movlw   0x00             	MOVLW	0x00
00085a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00085c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00085e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000860   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000862   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000864   0e0a     movlw   0x0a             	MOVLW	0x0a
000866   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000868   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00086a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00086c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00086e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000870   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000872   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000874   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000876   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000878   ec4e     call    0x00329c, 0x0    	CALL	__modulong
00087a   f019
00087c   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00087e   0e08     movlw   0x08             	MOVLW	0x08
000880   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000882   0e30     movlw   0x30             	MOVLW	0x30
000884   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000886   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000888   ffe5
00088a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00088c   ffe9
00088e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000890   fff3
000892   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000894   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000896   f020
                                           ;	.line	122; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000898   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00089a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00089c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00089e   0e0a     movlw   0x0a             	MOVLW	0x0a
0008a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008a2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0008a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008a6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0008a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008aa   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0008ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008ae   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0008b0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008b2   eceb     call    0x0033d6, 0x0    	CALL	__divulong
0008b4   f019
0008b6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0008b8   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0008ba   f001
0008bc   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0008be   f002
0008c0   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0008c2   f003
0008c4   0e08     movlw   0x08             	MOVLW	0x08
0008c6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	123; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
0008c8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0008ca   0f08     addlw   0x08             	ADDLW	0x08
0008cc   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0008ce   0e00     movlw   0x00             	MOVLW	0x00
0008d0   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0008d2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0008d4   0e00     movlw   0x00             	MOVLW	0x00
0008d6   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0008d8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0008da   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0008dc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0008de   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0008e0   0e0a     movlw   0x0a             	MOVLW	0x0a
0008e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008e4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0008e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008e8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0008ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008ec   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0008ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008f0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0008f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008f4   ec4e     call    0x00329c, 0x0    	CALL	__modulong
0008f6   f019
0008f8   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0008fa   0e08     movlw   0x08             	MOVLW	0x08
0008fc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0008fe   0e30     movlw   0x30             	MOVLW	0x30
000900   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000902   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000904   ffe5
000906   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000908   ffe9
00090a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00090c   fff3
00090e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000910   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000912   f020
                                           ;	.line	124; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000914   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000916   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000918   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00091a   0e0a     movlw   0x0a             	MOVLW	0x0a
00091c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00091e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000920   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000922   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000924   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000926   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000928   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00092a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00092c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00092e   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000930   f019
000932   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000934   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000936   f001
000938   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
00093a   f002
00093c   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00093e   f003
000940   0e08     movlw   0x08             	MOVLW	0x08
000942   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	125; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + (val % 10);
000944   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000946   0f07     addlw   0x07             	ADDLW	0x07
000948   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00094a   0e00     movlw   0x00             	MOVLW	0x00
00094c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00094e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000950   0e00     movlw   0x00             	MOVLW	0x00
000952   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000954   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000956   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000958   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00095a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00095c   0e0a     movlw   0x0a             	MOVLW	0x0a
00095e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000960   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000962   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000964   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000966   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000968   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00096a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00096c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00096e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000970   ec4e     call    0x00329c, 0x0    	CALL	__modulong
000972   f019
000974   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000976   0e08     movlw   0x08             	MOVLW	0x08
000978   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00097a   0e30     movlw   0x30             	MOVLW	0x30
00097c   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
00097e   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000980   ffe5
000982   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000984   ffe9
000986   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000988   fff3
00098a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00098c   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00098e   f020
                                           ;	.line	126; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000990   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000992   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000994   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000996   0e0a     movlw   0x0a             	MOVLW	0x0a
000998   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00099a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00099c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00099e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0009a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009a2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0009a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009a6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0009a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009aa   eceb     call    0x0033d6, 0x0    	CALL	__divulong
0009ac   f019
0009ae   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0009b0   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0009b2   f001
0009b4   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0009b6   f002
0009b8   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0009ba   f003
0009bc   0e08     movlw   0x08             	MOVLW	0x08
0009be   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	127; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = '0' + (val % 10);
0009c0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0009c2   0f06     addlw   0x06             	ADDLW	0x06
0009c4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0009c6   0e00     movlw   0x00             	MOVLW	0x00
0009c8   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0009ca   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0009cc   0e00     movlw   0x00             	MOVLW	0x00
0009ce   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0009d0   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0009d2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0009d4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0009d6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0009d8   0e0a     movlw   0x0a             	MOVLW	0x0a
0009da   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009dc   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0009de   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009e0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0009e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009e4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0009e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009e8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0009ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009ec   ec4e     call    0x00329c, 0x0    	CALL	__modulong
0009ee   f019
0009f0   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0009f2   0e08     movlw   0x08             	MOVLW	0x08
0009f4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0009f6   0e30     movlw   0x30             	MOVLW	0x30
0009f8   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0009fa   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0009fc   ffe5
0009fe   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000a00   ffe9
000a02   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000a04   fff3
000a06   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000a08   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000a0a   f020
                                           ;	.line	128; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000a0c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a0e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a10   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a12   0e0a     movlw   0x0a             	MOVLW	0x0a
000a14   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a16   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000a18   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a1a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000a1c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a1e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000a20   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a22   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000a24   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a26   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000a28   f019
000a2a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000a2c   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000a2e   f001
000a30   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000a32   f002
000a34   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000a36   f003
000a38   0e08     movlw   0x08             	MOVLW	0x08
000a3a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	129; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = '0' + (val % 10);
000a3c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000a3e   0f05     addlw   0x05             	ADDLW	0x05
000a40   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000a42   0e00     movlw   0x00             	MOVLW	0x00
000a44   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000a46   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000a48   0e00     movlw   0x00             	MOVLW	0x00
000a4a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000a4c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000a4e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a50   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a52   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a54   0e0a     movlw   0x0a             	MOVLW	0x0a
000a56   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a58   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000a5a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a5c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000a5e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a60   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000a62   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a64   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000a66   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a68   ec4e     call    0x00329c, 0x0    	CALL	__modulong
000a6a   f019
000a6c   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000a6e   0e08     movlw   0x08             	MOVLW	0x08
000a70   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000a72   0e30     movlw   0x30             	MOVLW	0x30
000a74   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000a76   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000a78   ffe5
000a7a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000a7c   ffe9
000a7e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000a80   fff3
000a82   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000a84   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000a86   f020
                                           ;	.line	130; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000a88   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a8a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a8c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000a8e   0e0a     movlw   0x0a             	MOVLW	0x0a
000a90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a92   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000a94   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a96   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000a98   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a9a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000a9c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a9e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000aa0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000aa2   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000aa4   f019
000aa6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000aa8   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000aaa   f001
000aac   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000aae   f002
000ab0   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000ab2   f003
000ab4   0e08     movlw   0x08             	MOVLW	0x08
000ab6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	131; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
000ab8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000aba   0f04     addlw   0x04             	ADDLW	0x04
000abc   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000abe   0e00     movlw   0x00             	MOVLW	0x00
000ac0   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000ac2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000ac4   0e00     movlw   0x00             	MOVLW	0x00
000ac6   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000ac8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000aca   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000acc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000ace   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000ad0   0e0a     movlw   0x0a             	MOVLW	0x0a
000ad2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ad4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000ad6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ad8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000ada   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000adc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000ade   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ae0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000ae2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ae4   ec4e     call    0x00329c, 0x0    	CALL	__modulong
000ae6   f019
000ae8   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000aea   0e08     movlw   0x08             	MOVLW	0x08
000aec   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000aee   0e30     movlw   0x30             	MOVLW	0x30
000af0   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000af2   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000af4   ffe5
000af6   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000af8   ffe9
000afa   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000afc   fff3
000afe   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000b00   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000b02   f020
                                           ;	.line	132; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000b04   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b06   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b08   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b0a   0e0a     movlw   0x0a             	MOVLW	0x0a
000b0c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b0e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000b10   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b12   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000b14   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b16   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000b18   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b1a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000b1c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b1e   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000b20   f019
000b22   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000b24   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000b26   f001
000b28   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000b2a   f002
000b2c   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000b2e   f003
000b30   0e08     movlw   0x08             	MOVLW	0x08
000b32   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	133; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + (val % 10);
000b34   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000b36   0f03     addlw   0x03             	ADDLW	0x03
000b38   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000b3a   0e00     movlw   0x00             	MOVLW	0x00
000b3c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000b3e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000b40   0e00     movlw   0x00             	MOVLW	0x00
000b42   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000b44   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000b46   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b48   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b4a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b4c   0e0a     movlw   0x0a             	MOVLW	0x0a
000b4e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b50   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000b52   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b54   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000b56   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b58   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000b5a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b5c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000b5e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b60   ec4e     call    0x00329c, 0x0    	CALL	__modulong
000b62   f019
000b64   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000b66   0e08     movlw   0x08             	MOVLW	0x08
000b68   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000b6a   0e30     movlw   0x30             	MOVLW	0x30
000b6c   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000b6e   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000b70   ffe5
000b72   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000b74   ffe9
000b76   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000b78   fff3
000b7a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000b7c   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000b7e   f020
                                           ;	.line	134; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000b80   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b82   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b84   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b86   0e0a     movlw   0x0a             	MOVLW	0x0a
000b88   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b8a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000b8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b8e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000b90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b92   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000b94   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b96   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000b98   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b9a   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000b9c   f019
000b9e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000ba0   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000ba2   f001
000ba4   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000ba6   f002
000ba8   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000baa   f003
000bac   0e08     movlw   0x08             	MOVLW	0x08
000bae   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	135; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + (val % 10);
000bb0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000bb2   0f02     addlw   0x02             	ADDLW	0x02
000bb4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000bb6   0e00     movlw   0x00             	MOVLW	0x00
000bb8   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000bba   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000bbc   0e00     movlw   0x00             	MOVLW	0x00
000bbe   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000bc0   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000bc2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000bc4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000bc6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000bc8   0e0a     movlw   0x0a             	MOVLW	0x0a
000bca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bcc   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000bce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bd0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000bd2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bd4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000bd6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bd8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000bda   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bdc   ec4e     call    0x00329c, 0x0    	CALL	__modulong
000bde   f019
000be0   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000be2   0e08     movlw   0x08             	MOVLW	0x08
000be4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000be6   0e30     movlw   0x30             	MOVLW	0x30
000be8   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000bea   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000bec   ffe5
000bee   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000bf0   ffe9
000bf2   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000bf4   fff3
000bf6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000bf8   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000bfa   f020
                                           ;	.line	136; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000bfc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000bfe   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000c00   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000c02   0e0a     movlw   0x0a             	MOVLW	0x0a
000c04   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c06   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000c08   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c0a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000c0c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c0e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000c10   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c12   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000c14   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c16   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000c18   f019
000c1a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000c1c   0e08     movlw   0x08             	MOVLW	0x08
000c1e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	137; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = '0' + val;
000c20   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000c22   0f01     addlw   0x01             	ADDLW	0x01
000c24   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000c26   0e00     movlw   0x00             	MOVLW	0x00
000c28   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000c2a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000c2c   0e00     movlw   0x00             	MOVLW	0x00
000c2e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000c30   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000c32   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000c34   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000c36   0e30     movlw   0x30             	MOVLW	0x30
000c38   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000c3a   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000c3c   ffe5
000c3e   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000c40   ffe9
000c42   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000c44   fff3
000c46   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000c48   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000c4a   f020
                                           ;	.line	138; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
000c4c   0e20     movlw   0x20             	MOVLW	0x20
000c4e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c50   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000c52   ffe9
000c54   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
000c56   fff3
000c58   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000c5a   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000c5c   f020
                                           ;	.line	139; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
000c5e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000c60   0f0a     addlw   0x0a             	ADDLW	0x0a
000c62   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000c64   0e00     movlw   0x00             	MOVLW	0x00
000c66   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000c68   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000c6a   0e00     movlw   0x00             	MOVLW	0x00
000c6c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000c6e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000c70   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000c72   ffe9
000c74   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000c76   fff3
000c78   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000c7a   f020
000c7c   ef39     goto    0x002272         	GOTO	_00534_DS_
000c7e   f011
                                           _00529_DS_:
                                           ;	.line	140; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 9999999) {
000c80   0e00     movlw   0x00             	MOVLW	0x00
000c82   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
000c84   e108     bnz     0x000c96         	BNZ	_00565_DS_
000c86   0e98     movlw   0x98             	MOVLW	0x98
000c88   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
000c8a   e105     bnz     0x000c96         	BNZ	_00565_DS_
000c8c   0e96     movlw   0x96             	MOVLW	0x96
000c8e   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
000c90   e102     bnz     0x000c96         	BNZ	_00565_DS_
000c92   0e80     movlw   0x80             	MOVLW	0x80
000c94   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00565_DS_:
000c96   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
000c98   d1ee     bra     0x001076         	BRA	_00526_DS_
                                           ;	.line	141; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
000c9a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000c9c   0f09     addlw   0x09             	ADDLW	0x09
000c9e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000ca0   0e00     movlw   0x00             	MOVLW	0x00
000ca2   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000ca4   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000ca6   0e00     movlw   0x00             	MOVLW	0x00
000ca8   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000caa   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000cac   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000cae   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000cb0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000cb2   0e0a     movlw   0x0a             	MOVLW	0x0a
000cb4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cb6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000cb8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cba   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000cbc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cbe   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000cc0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cc2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000cc4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cc6   ec4e     call    0x00329c, 0x0    	CALL	__modulong
000cc8   f019
000cca   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000ccc   0e08     movlw   0x08             	MOVLW	0x08
000cce   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000cd0   0e30     movlw   0x30             	MOVLW	0x30
000cd2   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000cd4   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000cd6   ffe5
000cd8   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000cda   ffe9
000cdc   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000cde   fff3
000ce0   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000ce2   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000ce4   f020
                                           ;	.line	142; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000ce6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000ce8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000cea   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000cec   0e0a     movlw   0x0a             	MOVLW	0x0a
000cee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cf0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000cf2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cf4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000cf6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cf8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000cfa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cfc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000cfe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d00   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000d02   f019
000d04   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000d06   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000d08   f001
000d0a   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000d0c   f002
000d0e   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000d10   f003
000d12   0e08     movlw   0x08             	MOVLW	0x08
000d14   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	143; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
000d16   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000d18   0f08     addlw   0x08             	ADDLW	0x08
000d1a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000d1c   0e00     movlw   0x00             	MOVLW	0x00
000d1e   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000d20   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000d22   0e00     movlw   0x00             	MOVLW	0x00
000d24   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000d26   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000d28   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000d2a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000d2c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000d2e   0e0a     movlw   0x0a             	MOVLW	0x0a
000d30   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d32   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000d34   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d36   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000d38   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d3a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000d3c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d3e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000d40   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d42   ec4e     call    0x00329c, 0x0    	CALL	__modulong
000d44   f019
000d46   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000d48   0e08     movlw   0x08             	MOVLW	0x08
000d4a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000d4c   0e30     movlw   0x30             	MOVLW	0x30
000d4e   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000d50   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000d52   ffe5
000d54   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000d56   ffe9
000d58   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000d5a   fff3
000d5c   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000d5e   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000d60   f020
                                           ;	.line	144; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000d62   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000d64   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000d66   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000d68   0e0a     movlw   0x0a             	MOVLW	0x0a
000d6a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d6c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000d6e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d70   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000d72   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d74   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000d76   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d78   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000d7a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d7c   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000d7e   f019
000d80   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000d82   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000d84   f001
000d86   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000d88   f002
000d8a   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000d8c   f003
000d8e   0e08     movlw   0x08             	MOVLW	0x08
000d90   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	145; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + (val % 10);
000d92   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000d94   0f07     addlw   0x07             	ADDLW	0x07
000d96   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000d98   0e00     movlw   0x00             	MOVLW	0x00
000d9a   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000d9c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000d9e   0e00     movlw   0x00             	MOVLW	0x00
000da0   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000da2   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000da4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000da6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000da8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000daa   0e0a     movlw   0x0a             	MOVLW	0x0a
000dac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000dae   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000db0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000db2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000db4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000db6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000db8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000dba   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000dbc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000dbe   ec4e     call    0x00329c, 0x0    	CALL	__modulong
000dc0   f019
000dc2   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000dc4   0e08     movlw   0x08             	MOVLW	0x08
000dc6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000dc8   0e30     movlw   0x30             	MOVLW	0x30
000dca   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000dcc   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000dce   ffe5
000dd0   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000dd2   ffe9
000dd4   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000dd6   fff3
000dd8   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000dda   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000ddc   f020
                                           ;	.line	146; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000dde   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000de0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000de2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000de4   0e0a     movlw   0x0a             	MOVLW	0x0a
000de6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000de8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000dea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000dec   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000dee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000df0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000df2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000df4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000df6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000df8   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000dfa   f019
000dfc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000dfe   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000e00   f001
000e02   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000e04   f002
000e06   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000e08   f003
000e0a   0e08     movlw   0x08             	MOVLW	0x08
000e0c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	147; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = '0' + (val % 10);
000e0e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000e10   0f06     addlw   0x06             	ADDLW	0x06
000e12   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000e14   0e00     movlw   0x00             	MOVLW	0x00
000e16   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000e18   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000e1a   0e00     movlw   0x00             	MOVLW	0x00
000e1c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000e1e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000e20   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000e22   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000e24   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000e26   0e0a     movlw   0x0a             	MOVLW	0x0a
000e28   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e2a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000e2c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e2e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000e30   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e32   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000e34   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e36   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000e38   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e3a   ec4e     call    0x00329c, 0x0    	CALL	__modulong
000e3c   f019
000e3e   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000e40   0e08     movlw   0x08             	MOVLW	0x08
000e42   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000e44   0e30     movlw   0x30             	MOVLW	0x30
000e46   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000e48   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000e4a   ffe5
000e4c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000e4e   ffe9
000e50   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000e52   fff3
000e54   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000e56   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000e58   f020
                                           ;	.line	148; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000e5a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000e5c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000e5e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000e60   0e0a     movlw   0x0a             	MOVLW	0x0a
000e62   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e64   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000e66   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e68   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000e6a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e6c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000e6e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e70   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000e72   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e74   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000e76   f019
000e78   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000e7a   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000e7c   f001
000e7e   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000e80   f002
000e82   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000e84   f003
000e86   0e08     movlw   0x08             	MOVLW	0x08
000e88   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	149; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = '0' + (val % 10);
000e8a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000e8c   0f05     addlw   0x05             	ADDLW	0x05
000e8e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000e90   0e00     movlw   0x00             	MOVLW	0x00
000e92   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000e94   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000e96   0e00     movlw   0x00             	MOVLW	0x00
000e98   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000e9a   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000e9c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000e9e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000ea0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000ea2   0e0a     movlw   0x0a             	MOVLW	0x0a
000ea4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ea6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000ea8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000eaa   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000eac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000eae   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000eb0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000eb2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000eb4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000eb6   ec4e     call    0x00329c, 0x0    	CALL	__modulong
000eb8   f019
000eba   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000ebc   0e08     movlw   0x08             	MOVLW	0x08
000ebe   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000ec0   0e30     movlw   0x30             	MOVLW	0x30
000ec2   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000ec4   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000ec6   ffe5
000ec8   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000eca   ffe9
000ecc   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000ece   fff3
000ed0   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000ed2   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000ed4   f020
                                           ;	.line	150; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000ed6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000ed8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000eda   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000edc   0e0a     movlw   0x0a             	MOVLW	0x0a
000ede   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ee0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000ee2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ee4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000ee6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ee8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000eea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000eec   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000eee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ef0   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000ef2   f019
000ef4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000ef6   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000ef8   f001
000efa   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000efc   f002
000efe   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000f00   f003
000f02   0e08     movlw   0x08             	MOVLW	0x08
000f04   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	151; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
000f06   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000f08   0f04     addlw   0x04             	ADDLW	0x04
000f0a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000f0c   0e00     movlw   0x00             	MOVLW	0x00
000f0e   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000f10   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000f12   0e00     movlw   0x00             	MOVLW	0x00
000f14   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000f16   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000f18   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f1a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f1c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f1e   0e0a     movlw   0x0a             	MOVLW	0x0a
000f20   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f22   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000f24   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f26   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000f28   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f2a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000f2c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f2e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000f30   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f32   ec4e     call    0x00329c, 0x0    	CALL	__modulong
000f34   f019
000f36   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000f38   0e08     movlw   0x08             	MOVLW	0x08
000f3a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000f3c   0e30     movlw   0x30             	MOVLW	0x30
000f3e   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000f40   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000f42   ffe5
000f44   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000f46   ffe9
000f48   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000f4a   fff3
000f4c   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000f4e   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000f50   f020
                                           ;	.line	152; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000f52   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f54   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f56   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f58   0e0a     movlw   0x0a             	MOVLW	0x0a
000f5a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f5c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000f5e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f60   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000f62   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f64   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000f66   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f68   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000f6a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f6c   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000f6e   f019
000f70   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000f72   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000f74   f001
000f76   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
000f78   f002
000f7a   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
000f7c   f003
000f7e   0e08     movlw   0x08             	MOVLW	0x08
000f80   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	153; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + (val % 10);
000f82   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000f84   0f03     addlw   0x03             	ADDLW	0x03
000f86   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000f88   0e00     movlw   0x00             	MOVLW	0x00
000f8a   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000f8c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000f8e   0e00     movlw   0x00             	MOVLW	0x00
000f90   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
000f92   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000f94   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f96   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f98   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000f9a   0e0a     movlw   0x0a             	MOVLW	0x0a
000f9c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f9e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000fa0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fa2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000fa4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fa6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000fa8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000faa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000fac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fae   ec4e     call    0x00329c, 0x0    	CALL	__modulong
000fb0   f019
000fb2   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000fb4   0e08     movlw   0x08             	MOVLW	0x08
000fb6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000fb8   0e30     movlw   0x30             	MOVLW	0x30
000fba   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000fbc   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
000fbe   ffe5
000fc0   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
000fc2   ffe9
000fc4   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
000fc6   fff3
000fc8   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000fca   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
000fcc   f020
                                           ;	.line	154; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
000fce   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000fd0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000fd2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000fd4   0e0a     movlw   0x0a             	MOVLW	0x0a
000fd6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fd8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000fda   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fdc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000fde   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fe0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000fe2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fe4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000fe6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fe8   eceb     call    0x0033d6, 0x0    	CALL	__divulong
000fea   f019
000fec   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000fee   0e08     movlw   0x08             	MOVLW	0x08
000ff0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	155; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + val;
000ff2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000ff4   0f02     addlw   0x02             	ADDLW	0x02
000ff6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000ff8   0e00     movlw   0x00             	MOVLW	0x00
000ffa   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000ffc   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000ffe   0e00     movlw   0x00             	MOVLW	0x00
001000   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001002   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001004   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001006   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001008   0e30     movlw   0x30             	MOVLW	0x30
00100a   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
00100c   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00100e   ffe5
001010   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001012   ffe9
001014   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001016   fff3
001018   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00101a   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00101c   f020
                                           ;	.line	156; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
00101e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001020   0f01     addlw   0x01             	ADDLW	0x01
001022   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001024   0e00     movlw   0x00             	MOVLW	0x00
001026   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001028   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00102a   0e00     movlw   0x00             	MOVLW	0x00
00102c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00102e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001030   0e20     movlw   0x20             	MOVLW	0x20
001032   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001034   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001036   ffe9
001038   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00103a   fff3
00103c   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00103e   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001040   f020
                                           ;	.line	157; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
001042   0e20     movlw   0x20             	MOVLW	0x20
001044   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001046   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001048   ffe9
00104a   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
00104c   fff3
00104e   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001050   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001052   f020
                                           ;	.line	158; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
001054   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001056   0f0a     addlw   0x0a             	ADDLW	0x0a
001058   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00105a   0e00     movlw   0x00             	MOVLW	0x00
00105c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00105e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001060   0e00     movlw   0x00             	MOVLW	0x00
001062   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001064   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001066   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001068   ffe9
00106a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00106c   fff3
00106e   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001070   f020
001072   ef39     goto    0x002272         	GOTO	_00534_DS_
001074   f011
                                           _00526_DS_:
                                           ;	.line	159; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 999999) {
001076   0e00     movlw   0x00             	MOVLW	0x00
001078   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
00107a   e108     bnz     0x00108c         	BNZ	_00566_DS_
00107c   0e0f     movlw   0x0f             	MOVLW	0x0f
00107e   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
001080   e105     bnz     0x00108c         	BNZ	_00566_DS_
001082   0e42     movlw   0x42             	MOVLW	0x42
001084   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001086   e102     bnz     0x00108c         	BNZ	_00566_DS_
001088   0e40     movlw   0x40             	MOVLW	0x40
00108a   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00566_DS_:
00108c   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00108e   d1c2     bra     0x001414         	BRA	_00523_DS_
                                           ;	.line	160; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
001090   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001092   0f09     addlw   0x09             	ADDLW	0x09
001094   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001096   0e00     movlw   0x00             	MOVLW	0x00
001098   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00109a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00109c   0e00     movlw   0x00             	MOVLW	0x00
00109e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0010a0   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0010a2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0010a4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0010a6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0010a8   0e0a     movlw   0x0a             	MOVLW	0x0a
0010aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010ac   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0010ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010b0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0010b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010b4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0010b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010b8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0010ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010bc   ec4e     call    0x00329c, 0x0    	CALL	__modulong
0010be   f019
0010c0   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0010c2   0e08     movlw   0x08             	MOVLW	0x08
0010c4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0010c6   0e30     movlw   0x30             	MOVLW	0x30
0010c8   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0010ca   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0010cc   ffe5
0010ce   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0010d0   ffe9
0010d2   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0010d4   fff3
0010d6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0010d8   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0010da   f020
                                           ;	.line	161; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0010dc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0010de   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0010e0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0010e2   0e0a     movlw   0x0a             	MOVLW	0x0a
0010e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010e6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0010e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010ea   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0010ec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010ee   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0010f0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010f2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0010f4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010f6   eceb     call    0x0033d6, 0x0    	CALL	__divulong
0010f8   f019
0010fa   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0010fc   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0010fe   f001
001100   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001102   f002
001104   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001106   f003
001108   0e08     movlw   0x08             	MOVLW	0x08
00110a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	162; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
00110c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00110e   0f08     addlw   0x08             	ADDLW	0x08
001110   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001112   0e00     movlw   0x00             	MOVLW	0x00
001114   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001116   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001118   0e00     movlw   0x00             	MOVLW	0x00
00111a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00111c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00111e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001120   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001122   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001124   0e0a     movlw   0x0a             	MOVLW	0x0a
001126   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001128   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00112a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00112c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00112e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001130   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001132   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001134   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001136   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001138   ec4e     call    0x00329c, 0x0    	CALL	__modulong
00113a   f019
00113c   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00113e   0e08     movlw   0x08             	MOVLW	0x08
001140   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001142   0e30     movlw   0x30             	MOVLW	0x30
001144   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001146   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001148   ffe5
00114a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00114c   ffe9
00114e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001150   fff3
001152   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001154   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001156   f020
                                           ;	.line	163; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001158   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00115a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00115c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00115e   0e0a     movlw   0x0a             	MOVLW	0x0a
001160   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001162   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001164   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001166   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001168   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00116a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00116c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00116e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001170   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001172   eceb     call    0x0033d6, 0x0    	CALL	__divulong
001174   f019
001176   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001178   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00117a   f001
00117c   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
00117e   f002
001180   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001182   f003
001184   0e08     movlw   0x08             	MOVLW	0x08
001186   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	164; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + (val % 10);
001188   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00118a   0f07     addlw   0x07             	ADDLW	0x07
00118c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00118e   0e00     movlw   0x00             	MOVLW	0x00
001190   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001192   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001194   0e00     movlw   0x00             	MOVLW	0x00
001196   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001198   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00119a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00119c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00119e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0011a0   0e0a     movlw   0x0a             	MOVLW	0x0a
0011a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011a4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0011a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011a8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0011aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011ac   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0011ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011b0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0011b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011b4   ec4e     call    0x00329c, 0x0    	CALL	__modulong
0011b6   f019
0011b8   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0011ba   0e08     movlw   0x08             	MOVLW	0x08
0011bc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0011be   0e30     movlw   0x30             	MOVLW	0x30
0011c0   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0011c2   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0011c4   ffe5
0011c6   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0011c8   ffe9
0011ca   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0011cc   fff3
0011ce   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0011d0   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0011d2   f020
                                           ;	.line	165; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0011d4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0011d6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0011d8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0011da   0e0a     movlw   0x0a             	MOVLW	0x0a
0011dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011de   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0011e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011e2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0011e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011e6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0011e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011ea   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0011ec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011ee   eceb     call    0x0033d6, 0x0    	CALL	__divulong
0011f0   f019
0011f2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0011f4   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0011f6   f001
0011f8   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0011fa   f002
0011fc   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0011fe   f003
001200   0e08     movlw   0x08             	MOVLW	0x08
001202   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	166; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = '0' + (val % 10);
001204   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001206   0f06     addlw   0x06             	ADDLW	0x06
001208   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00120a   0e00     movlw   0x00             	MOVLW	0x00
00120c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00120e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001210   0e00     movlw   0x00             	MOVLW	0x00
001212   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001214   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001216   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001218   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00121a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00121c   0e0a     movlw   0x0a             	MOVLW	0x0a
00121e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001220   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001222   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001224   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001226   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001228   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00122a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00122c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00122e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001230   ec4e     call    0x00329c, 0x0    	CALL	__modulong
001232   f019
001234   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001236   0e08     movlw   0x08             	MOVLW	0x08
001238   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00123a   0e30     movlw   0x30             	MOVLW	0x30
00123c   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
00123e   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001240   ffe5
001242   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001244   ffe9
001246   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001248   fff3
00124a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00124c   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00124e   f020
                                           ;	.line	167; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001250   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001252   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001254   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001256   0e0a     movlw   0x0a             	MOVLW	0x0a
001258   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00125a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00125c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00125e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001260   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001262   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001264   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001266   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001268   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00126a   eceb     call    0x0033d6, 0x0    	CALL	__divulong
00126c   f019
00126e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001270   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001272   f001
001274   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001276   f002
001278   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00127a   f003
00127c   0e08     movlw   0x08             	MOVLW	0x08
00127e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	168; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = '0' + (val % 10);
001280   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001282   0f05     addlw   0x05             	ADDLW	0x05
001284   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001286   0e00     movlw   0x00             	MOVLW	0x00
001288   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00128a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00128c   0e00     movlw   0x00             	MOVLW	0x00
00128e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001290   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001292   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001294   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001296   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001298   0e0a     movlw   0x0a             	MOVLW	0x0a
00129a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00129c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00129e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012a0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0012a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012a4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0012a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012a8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0012aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012ac   ec4e     call    0x00329c, 0x0    	CALL	__modulong
0012ae   f019
0012b0   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0012b2   0e08     movlw   0x08             	MOVLW	0x08
0012b4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0012b6   0e30     movlw   0x30             	MOVLW	0x30
0012b8   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0012ba   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0012bc   ffe5
0012be   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0012c0   ffe9
0012c2   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0012c4   fff3
0012c6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0012c8   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0012ca   f020
                                           ;	.line	169; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0012cc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0012ce   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0012d0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0012d2   0e0a     movlw   0x0a             	MOVLW	0x0a
0012d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012d6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0012d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012da   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0012dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012de   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0012e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012e2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0012e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012e6   eceb     call    0x0033d6, 0x0    	CALL	__divulong
0012e8   f019
0012ea   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0012ec   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0012ee   f001
0012f0   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0012f2   f002
0012f4   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0012f6   f003
0012f8   0e08     movlw   0x08             	MOVLW	0x08
0012fa   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	170; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
0012fc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0012fe   0f04     addlw   0x04             	ADDLW	0x04
001300   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001302   0e00     movlw   0x00             	MOVLW	0x00
001304   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001306   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001308   0e00     movlw   0x00             	MOVLW	0x00
00130a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00130c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00130e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001310   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001312   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001314   0e0a     movlw   0x0a             	MOVLW	0x0a
001316   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001318   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00131a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00131c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00131e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001320   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001322   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001324   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001326   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001328   ec4e     call    0x00329c, 0x0    	CALL	__modulong
00132a   f019
00132c   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00132e   0e08     movlw   0x08             	MOVLW	0x08
001330   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001332   0e30     movlw   0x30             	MOVLW	0x30
001334   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001336   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001338   ffe5
00133a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00133c   ffe9
00133e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001340   fff3
001342   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001344   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001346   f020
                                           ;	.line	171; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001348   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00134a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00134c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00134e   0e0a     movlw   0x0a             	MOVLW	0x0a
001350   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001352   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001354   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001356   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001358   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00135a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00135c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00135e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001360   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001362   eceb     call    0x0033d6, 0x0    	CALL	__divulong
001364   f019
001366   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001368   0e08     movlw   0x08             	MOVLW	0x08
00136a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	172; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + val;
00136c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00136e   0f03     addlw   0x03             	ADDLW	0x03
001370   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001372   0e00     movlw   0x00             	MOVLW	0x00
001374   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001376   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001378   0e00     movlw   0x00             	MOVLW	0x00
00137a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00137c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00137e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001380   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001382   0e30     movlw   0x30             	MOVLW	0x30
001384   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001386   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001388   ffe5
00138a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00138c   ffe9
00138e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001390   fff3
001392   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001394   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001396   f020
                                           ;	.line	173; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
001398   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00139a   0f02     addlw   0x02             	ADDLW	0x02
00139c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00139e   0e00     movlw   0x00             	MOVLW	0x00
0013a0   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0013a2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0013a4   0e00     movlw   0x00             	MOVLW	0x00
0013a6   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0013a8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0013aa   0e20     movlw   0x20             	MOVLW	0x20
0013ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013ae   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0013b0   ffe9
0013b2   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0013b4   fff3
0013b6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0013b8   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0013ba   f020
                                           ;	.line	174; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
0013bc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0013be   0f01     addlw   0x01             	ADDLW	0x01
0013c0   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0013c2   0e00     movlw   0x00             	MOVLW	0x00
0013c4   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0013c6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0013c8   0e00     movlw   0x00             	MOVLW	0x00
0013ca   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0013cc   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0013ce   0e20     movlw   0x20             	MOVLW	0x20
0013d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013d2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0013d4   ffe9
0013d6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0013d8   fff3
0013da   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0013dc   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0013de   f020
                                           ;	.line	175; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
0013e0   0e20     movlw   0x20             	MOVLW	0x20
0013e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013e4   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0013e6   ffe9
0013e8   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
0013ea   fff3
0013ec   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0013ee   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0013f0   f020
                                           ;	.line	176; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
0013f2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0013f4   0f0a     addlw   0x0a             	ADDLW	0x0a
0013f6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0013f8   0e00     movlw   0x00             	MOVLW	0x00
0013fa   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0013fc   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0013fe   0e00     movlw   0x00             	MOVLW	0x00
001400   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001402   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001404   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001406   ffe9
001408   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00140a   fff3
00140c   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00140e   f020
001410   ef39     goto    0x002272         	GOTO	_00534_DS_
001412   f011
                                           _00523_DS_:
                                           ;	.line	177; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 99999) {
001414   0e00     movlw   0x00             	MOVLW	0x00
001416   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
001418   e108     bnz     0x00142a         	BNZ	_00567_DS_
00141a   0e01     movlw   0x01             	MOVLW	0x01
00141c   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
00141e   e105     bnz     0x00142a         	BNZ	_00567_DS_
001420   0e86     movlw   0x86             	MOVLW	0x86
001422   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001424   e102     bnz     0x00142a         	BNZ	_00567_DS_
001426   0ea0     movlw   0xa0             	MOVLW	0xa0
001428   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00567_DS_:
00142a   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00142c   d196     bra     0x00175a         	BRA	_00520_DS_
                                           ;	.line	178; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
00142e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001430   0f09     addlw   0x09             	ADDLW	0x09
001432   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001434   0e00     movlw   0x00             	MOVLW	0x00
001436   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001438   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00143a   0e00     movlw   0x00             	MOVLW	0x00
00143c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00143e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001440   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001442   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001444   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001446   0e0a     movlw   0x0a             	MOVLW	0x0a
001448   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00144a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00144c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00144e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001450   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001452   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001454   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001456   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001458   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00145a   ec4e     call    0x00329c, 0x0    	CALL	__modulong
00145c   f019
00145e   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001460   0e08     movlw   0x08             	MOVLW	0x08
001462   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001464   0e30     movlw   0x30             	MOVLW	0x30
001466   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001468   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00146a   ffe5
00146c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00146e   ffe9
001470   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001472   fff3
001474   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001476   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001478   f020
                                           ;	.line	179; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00147a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00147c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00147e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001480   0e0a     movlw   0x0a             	MOVLW	0x0a
001482   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001484   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001486   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001488   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00148a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00148c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00148e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001490   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001492   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001494   eceb     call    0x0033d6, 0x0    	CALL	__divulong
001496   f019
001498   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00149a   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00149c   f001
00149e   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0014a0   f002
0014a2   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0014a4   f003
0014a6   0e08     movlw   0x08             	MOVLW	0x08
0014a8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	180; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
0014aa   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0014ac   0f08     addlw   0x08             	ADDLW	0x08
0014ae   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0014b0   0e00     movlw   0x00             	MOVLW	0x00
0014b2   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0014b4   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0014b6   0e00     movlw   0x00             	MOVLW	0x00
0014b8   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0014ba   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0014bc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0014be   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0014c0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0014c2   0e0a     movlw   0x0a             	MOVLW	0x0a
0014c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014c6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0014c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014ca   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0014cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014ce   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0014d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014d2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0014d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014d6   ec4e     call    0x00329c, 0x0    	CALL	__modulong
0014d8   f019
0014da   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0014dc   0e08     movlw   0x08             	MOVLW	0x08
0014de   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0014e0   0e30     movlw   0x30             	MOVLW	0x30
0014e2   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0014e4   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0014e6   ffe5
0014e8   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0014ea   ffe9
0014ec   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0014ee   fff3
0014f0   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0014f2   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0014f4   f020
                                           ;	.line	181; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0014f6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0014f8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0014fa   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0014fc   0e0a     movlw   0x0a             	MOVLW	0x0a
0014fe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001500   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001502   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001504   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001506   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001508   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00150a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00150c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00150e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001510   eceb     call    0x0033d6, 0x0    	CALL	__divulong
001512   f019
001514   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001516   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001518   f001
00151a   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
00151c   f002
00151e   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001520   f003
001522   0e08     movlw   0x08             	MOVLW	0x08
001524   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	182; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + (val % 10);
001526   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001528   0f07     addlw   0x07             	ADDLW	0x07
00152a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00152c   0e00     movlw   0x00             	MOVLW	0x00
00152e   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001530   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001532   0e00     movlw   0x00             	MOVLW	0x00
001534   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001536   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001538   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00153a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00153c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00153e   0e0a     movlw   0x0a             	MOVLW	0x0a
001540   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001542   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001544   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001546   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001548   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00154a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00154c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00154e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001550   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001552   ec4e     call    0x00329c, 0x0    	CALL	__modulong
001554   f019
001556   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001558   0e08     movlw   0x08             	MOVLW	0x08
00155a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00155c   0e30     movlw   0x30             	MOVLW	0x30
00155e   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001560   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001562   ffe5
001564   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001566   ffe9
001568   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00156a   fff3
00156c   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00156e   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001570   f020
                                           ;	.line	183; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001572   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001574   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001576   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001578   0e0a     movlw   0x0a             	MOVLW	0x0a
00157a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00157c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00157e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001580   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001582   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001584   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001586   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001588   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00158a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00158c   eceb     call    0x0033d6, 0x0    	CALL	__divulong
00158e   f019
001590   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001592   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001594   f001
001596   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001598   f002
00159a   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00159c   f003
00159e   0e08     movlw   0x08             	MOVLW	0x08
0015a0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	184; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = '0' + (val % 10);
0015a2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0015a4   0f06     addlw   0x06             	ADDLW	0x06
0015a6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0015a8   0e00     movlw   0x00             	MOVLW	0x00
0015aa   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0015ac   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0015ae   0e00     movlw   0x00             	MOVLW	0x00
0015b0   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0015b2   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0015b4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0015b6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0015b8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0015ba   0e0a     movlw   0x0a             	MOVLW	0x0a
0015bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015be   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0015c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015c2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0015c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015c6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0015c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015ca   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0015cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015ce   ec4e     call    0x00329c, 0x0    	CALL	__modulong
0015d0   f019
0015d2   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0015d4   0e08     movlw   0x08             	MOVLW	0x08
0015d6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0015d8   0e30     movlw   0x30             	MOVLW	0x30
0015da   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0015dc   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0015de   ffe5
0015e0   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0015e2   ffe9
0015e4   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0015e6   fff3
0015e8   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0015ea   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0015ec   f020
                                           ;	.line	185; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0015ee   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0015f0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0015f2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0015f4   0e0a     movlw   0x0a             	MOVLW	0x0a
0015f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015f8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0015fa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015fc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0015fe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001600   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001602   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001604   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001606   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001608   eceb     call    0x0033d6, 0x0    	CALL	__divulong
00160a   f019
00160c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00160e   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001610   f001
001612   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001614   f002
001616   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001618   f003
00161a   0e08     movlw   0x08             	MOVLW	0x08
00161c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	186; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = '0' + (val % 10);
00161e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001620   0f05     addlw   0x05             	ADDLW	0x05
001622   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001624   0e00     movlw   0x00             	MOVLW	0x00
001626   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001628   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00162a   0e00     movlw   0x00             	MOVLW	0x00
00162c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00162e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001630   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001632   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001634   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001636   0e0a     movlw   0x0a             	MOVLW	0x0a
001638   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00163a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00163c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00163e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001640   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001642   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001644   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001646   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001648   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00164a   ec4e     call    0x00329c, 0x0    	CALL	__modulong
00164c   f019
00164e   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001650   0e08     movlw   0x08             	MOVLW	0x08
001652   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001654   0e30     movlw   0x30             	MOVLW	0x30
001656   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001658   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00165a   ffe5
00165c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00165e   ffe9
001660   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001662   fff3
001664   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001666   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001668   f020
                                           ;	.line	187; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00166a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00166c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00166e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001670   0e0a     movlw   0x0a             	MOVLW	0x0a
001672   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001674   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001676   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001678   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00167a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00167c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00167e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001680   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001682   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001684   eceb     call    0x0033d6, 0x0    	CALL	__divulong
001686   f019
001688   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00168a   0e08     movlw   0x08             	MOVLW	0x08
00168c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	188; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + val;
00168e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001690   0f04     addlw   0x04             	ADDLW	0x04
001692   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001694   0e00     movlw   0x00             	MOVLW	0x00
001696   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001698   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00169a   0e00     movlw   0x00             	MOVLW	0x00
00169c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00169e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0016a0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0016a2   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0016a4   0e30     movlw   0x30             	MOVLW	0x30
0016a6   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0016a8   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0016aa   ffe5
0016ac   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0016ae   ffe9
0016b0   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0016b2   fff3
0016b4   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0016b6   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0016b8   f020
                                           ;	.line	189; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = ' ';
0016ba   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0016bc   0f03     addlw   0x03             	ADDLW	0x03
0016be   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0016c0   0e00     movlw   0x00             	MOVLW	0x00
0016c2   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0016c4   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0016c6   0e00     movlw   0x00             	MOVLW	0x00
0016c8   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0016ca   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0016cc   0e20     movlw   0x20             	MOVLW	0x20
0016ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0016d0   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0016d2   ffe9
0016d4   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0016d6   fff3
0016d8   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0016da   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0016dc   f020
                                           ;	.line	190; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
0016de   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0016e0   0f02     addlw   0x02             	ADDLW	0x02
0016e2   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0016e4   0e00     movlw   0x00             	MOVLW	0x00
0016e6   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0016e8   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0016ea   0e00     movlw   0x00             	MOVLW	0x00
0016ec   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0016ee   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0016f0   0e20     movlw   0x20             	MOVLW	0x20
0016f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0016f4   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0016f6   ffe9
0016f8   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0016fa   fff3
0016fc   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0016fe   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001700   f020
                                           ;	.line	191; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
001702   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001704   0f01     addlw   0x01             	ADDLW	0x01
001706   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001708   0e00     movlw   0x00             	MOVLW	0x00
00170a   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00170c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00170e   0e00     movlw   0x00             	MOVLW	0x00
001710   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001712   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001714   0e20     movlw   0x20             	MOVLW	0x20
001716   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001718   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00171a   ffe9
00171c   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00171e   fff3
001720   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001722   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001724   f020
                                           ;	.line	192; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
001726   0e20     movlw   0x20             	MOVLW	0x20
001728   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00172a   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
00172c   ffe9
00172e   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
001730   fff3
001732   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001734   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001736   f020
                                           ;	.line	193; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
001738   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00173a   0f0a     addlw   0x0a             	ADDLW	0x0a
00173c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00173e   0e00     movlw   0x00             	MOVLW	0x00
001740   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001742   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001744   0e00     movlw   0x00             	MOVLW	0x00
001746   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001748   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00174a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00174c   ffe9
00174e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001750   fff3
001752   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001754   f020
001756   ef39     goto    0x002272         	GOTO	_00534_DS_
001758   f011
                                           _00520_DS_:
                                           ;	.line	194; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 9999) {
00175a   0e00     movlw   0x00             	MOVLW	0x00
00175c   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
00175e   e108     bnz     0x001770         	BNZ	_00568_DS_
001760   0e00     movlw   0x00             	MOVLW	0x00
001762   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
001764   e105     bnz     0x001770         	BNZ	_00568_DS_
001766   0e27     movlw   0x27             	MOVLW	0x27
001768   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
00176a   e102     bnz     0x001770         	BNZ	_00568_DS_
00176c   0e10     movlw   0x10             	MOVLW	0x10
00176e   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00568_DS_:
001770   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
001772   d16a     bra     0x001a48         	BRA	_00517_DS_
                                           ;	.line	195; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
001774   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001776   0f09     addlw   0x09             	ADDLW	0x09
001778   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00177a   0e00     movlw   0x00             	MOVLW	0x00
00177c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00177e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001780   0e00     movlw   0x00             	MOVLW	0x00
001782   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001784   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001786   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001788   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00178a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00178c   0e0a     movlw   0x0a             	MOVLW	0x0a
00178e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001790   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001792   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001794   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001796   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001798   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00179a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00179c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00179e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017a0   ec4e     call    0x00329c, 0x0    	CALL	__modulong
0017a2   f019
0017a4   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0017a6   0e08     movlw   0x08             	MOVLW	0x08
0017a8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0017aa   0e30     movlw   0x30             	MOVLW	0x30
0017ac   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0017ae   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0017b0   ffe5
0017b2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0017b4   ffe9
0017b6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0017b8   fff3
0017ba   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0017bc   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0017be   f020
                                           ;	.line	196; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0017c0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0017c2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0017c4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0017c6   0e0a     movlw   0x0a             	MOVLW	0x0a
0017c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017ca   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0017cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017ce   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0017d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017d2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0017d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017d6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0017d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017da   eceb     call    0x0033d6, 0x0    	CALL	__divulong
0017dc   f019
0017de   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0017e0   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0017e2   f001
0017e4   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0017e6   f002
0017e8   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0017ea   f003
0017ec   0e08     movlw   0x08             	MOVLW	0x08
0017ee   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	197; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
0017f0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0017f2   0f08     addlw   0x08             	ADDLW	0x08
0017f4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0017f6   0e00     movlw   0x00             	MOVLW	0x00
0017f8   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0017fa   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0017fc   0e00     movlw   0x00             	MOVLW	0x00
0017fe   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001800   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001802   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001804   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001806   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001808   0e0a     movlw   0x0a             	MOVLW	0x0a
00180a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00180c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00180e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001810   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001812   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001814   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001816   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001818   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00181a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00181c   ec4e     call    0x00329c, 0x0    	CALL	__modulong
00181e   f019
001820   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001822   0e08     movlw   0x08             	MOVLW	0x08
001824   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001826   0e30     movlw   0x30             	MOVLW	0x30
001828   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
00182a   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00182c   ffe5
00182e   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001830   ffe9
001832   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001834   fff3
001836   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001838   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00183a   f020
                                           ;	.line	198; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00183c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00183e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001840   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001842   0e0a     movlw   0x0a             	MOVLW	0x0a
001844   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001846   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001848   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00184a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00184c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00184e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001850   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001852   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001854   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001856   eceb     call    0x0033d6, 0x0    	CALL	__divulong
001858   f019
00185a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00185c   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00185e   f001
001860   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001862   f002
001864   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001866   f003
001868   0e08     movlw   0x08             	MOVLW	0x08
00186a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	199; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + (val % 10);
00186c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00186e   0f07     addlw   0x07             	ADDLW	0x07
001870   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001872   0e00     movlw   0x00             	MOVLW	0x00
001874   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001876   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001878   0e00     movlw   0x00             	MOVLW	0x00
00187a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00187c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00187e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001880   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001882   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001884   0e0a     movlw   0x0a             	MOVLW	0x0a
001886   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001888   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00188a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00188c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00188e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001890   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001892   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001894   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001896   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001898   ec4e     call    0x00329c, 0x0    	CALL	__modulong
00189a   f019
00189c   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00189e   0e08     movlw   0x08             	MOVLW	0x08
0018a0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0018a2   0e30     movlw   0x30             	MOVLW	0x30
0018a4   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0018a6   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0018a8   ffe5
0018aa   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0018ac   ffe9
0018ae   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0018b0   fff3
0018b2   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0018b4   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0018b6   f020
                                           ;	.line	200; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0018b8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0018ba   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0018bc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0018be   0e0a     movlw   0x0a             	MOVLW	0x0a
0018c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018c2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0018c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018c6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0018c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018ca   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0018cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018ce   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0018d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018d2   eceb     call    0x0033d6, 0x0    	CALL	__divulong
0018d4   f019
0018d6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0018d8   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0018da   f001
0018dc   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0018de   f002
0018e0   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0018e2   f003
0018e4   0e08     movlw   0x08             	MOVLW	0x08
0018e6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	201; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = '0' + (val % 10);
0018e8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0018ea   0f06     addlw   0x06             	ADDLW	0x06
0018ec   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0018ee   0e00     movlw   0x00             	MOVLW	0x00
0018f0   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0018f2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0018f4   0e00     movlw   0x00             	MOVLW	0x00
0018f6   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0018f8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0018fa   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0018fc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0018fe   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001900   0e0a     movlw   0x0a             	MOVLW	0x0a
001902   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001904   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001906   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001908   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00190a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00190c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00190e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001910   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001912   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001914   ec4e     call    0x00329c, 0x0    	CALL	__modulong
001916   f019
001918   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00191a   0e08     movlw   0x08             	MOVLW	0x08
00191c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00191e   0e30     movlw   0x30             	MOVLW	0x30
001920   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001922   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001924   ffe5
001926   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001928   ffe9
00192a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00192c   fff3
00192e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001930   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001932   f020
                                           ;	.line	202; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001934   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001936   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001938   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00193a   0e0a     movlw   0x0a             	MOVLW	0x0a
00193c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00193e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001940   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001942   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001944   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001946   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001948   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00194a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00194c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00194e   eceb     call    0x0033d6, 0x0    	CALL	__divulong
001950   f019
001952   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001954   0e08     movlw   0x08             	MOVLW	0x08
001956   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	203; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = '0' + val;
001958   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00195a   0f05     addlw   0x05             	ADDLW	0x05
00195c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00195e   0e00     movlw   0x00             	MOVLW	0x00
001960   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001962   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001964   0e00     movlw   0x00             	MOVLW	0x00
001966   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001968   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00196a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00196c   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00196e   0e30     movlw   0x30             	MOVLW	0x30
001970   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001972   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001974   ffe5
001976   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001978   ffe9
00197a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00197c   fff3
00197e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001980   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001982   f020
                                           ;	.line	204; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = ' ';
001984   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001986   0f04     addlw   0x04             	ADDLW	0x04
001988   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00198a   0e00     movlw   0x00             	MOVLW	0x00
00198c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00198e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001990   0e00     movlw   0x00             	MOVLW	0x00
001992   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001994   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001996   0e20     movlw   0x20             	MOVLW	0x20
001998   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00199a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00199c   ffe9
00199e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0019a0   fff3
0019a2   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0019a4   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0019a6   f020
                                           ;	.line	205; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = ' ';
0019a8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0019aa   0f03     addlw   0x03             	ADDLW	0x03
0019ac   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0019ae   0e00     movlw   0x00             	MOVLW	0x00
0019b0   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0019b2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0019b4   0e00     movlw   0x00             	MOVLW	0x00
0019b6   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0019b8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0019ba   0e20     movlw   0x20             	MOVLW	0x20
0019bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0019be   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0019c0   ffe9
0019c2   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0019c4   fff3
0019c6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0019c8   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0019ca   f020
                                           ;	.line	206; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
0019cc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0019ce   0f02     addlw   0x02             	ADDLW	0x02
0019d0   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0019d2   0e00     movlw   0x00             	MOVLW	0x00
0019d4   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0019d6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0019d8   0e00     movlw   0x00             	MOVLW	0x00
0019da   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0019dc   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0019de   0e20     movlw   0x20             	MOVLW	0x20
0019e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0019e2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0019e4   ffe9
0019e6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0019e8   fff3
0019ea   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0019ec   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0019ee   f020
                                           ;	.line	207; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
0019f0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0019f2   0f01     addlw   0x01             	ADDLW	0x01
0019f4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0019f6   0e00     movlw   0x00             	MOVLW	0x00
0019f8   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0019fa   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0019fc   0e00     movlw   0x00             	MOVLW	0x00
0019fe   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001a00   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001a02   0e20     movlw   0x20             	MOVLW	0x20
001a04   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a06   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001a08   ffe9
001a0a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001a0c   fff3
001a0e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001a10   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001a12   f020
                                           ;	.line	208; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
001a14   0e20     movlw   0x20             	MOVLW	0x20
001a16   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a18   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001a1a   ffe9
001a1c   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
001a1e   fff3
001a20   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001a22   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001a24   f020
                                           ;	.line	209; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
001a26   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001a28   0f0a     addlw   0x0a             	ADDLW	0x0a
001a2a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001a2c   0e00     movlw   0x00             	MOVLW	0x00
001a2e   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001a30   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001a32   0e00     movlw   0x00             	MOVLW	0x00
001a34   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001a36   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001a38   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001a3a   ffe9
001a3c   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001a3e   fff3
001a40   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001a42   f020
001a44   ef39     goto    0x002272         	GOTO	_00534_DS_
001a46   f011
                                           _00517_DS_:
                                           ;	.line	210; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 999) {
001a48   0e00     movlw   0x00             	MOVLW	0x00
001a4a   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
001a4c   e108     bnz     0x001a5e         	BNZ	_00569_DS_
001a4e   0e00     movlw   0x00             	MOVLW	0x00
001a50   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
001a52   e105     bnz     0x001a5e         	BNZ	_00569_DS_
001a54   0e03     movlw   0x03             	MOVLW	0x03
001a56   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001a58   e102     bnz     0x001a5e         	BNZ	_00569_DS_
001a5a   0ee8     movlw   0xe8             	MOVLW	0xe8
001a5c   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00569_DS_:
001a5e   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
001a60   d13e     bra     0x001cde         	BRA	_00514_DS_
                                           ;	.line	211; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
001a62   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001a64   0f09     addlw   0x09             	ADDLW	0x09
001a66   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001a68   0e00     movlw   0x00             	MOVLW	0x00
001a6a   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001a6c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001a6e   0e00     movlw   0x00             	MOVLW	0x00
001a70   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001a72   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001a74   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001a76   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001a78   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001a7a   0e0a     movlw   0x0a             	MOVLW	0x0a
001a7c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a7e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001a80   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a82   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001a84   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a86   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001a88   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a8a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001a8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a8e   ec4e     call    0x00329c, 0x0    	CALL	__modulong
001a90   f019
001a92   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001a94   0e08     movlw   0x08             	MOVLW	0x08
001a96   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001a98   0e30     movlw   0x30             	MOVLW	0x30
001a9a   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001a9c   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001a9e   ffe5
001aa0   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001aa2   ffe9
001aa4   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001aa6   fff3
001aa8   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001aaa   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001aac   f020
                                           ;	.line	212; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001aae   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001ab0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001ab2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001ab4   0e0a     movlw   0x0a             	MOVLW	0x0a
001ab6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ab8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001aba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001abc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001abe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ac0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001ac2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ac4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001ac6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ac8   eceb     call    0x0033d6, 0x0    	CALL	__divulong
001aca   f019
001acc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001ace   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001ad0   f001
001ad2   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001ad4   f002
001ad6   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001ad8   f003
001ada   0e08     movlw   0x08             	MOVLW	0x08
001adc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	213; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
001ade   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001ae0   0f08     addlw   0x08             	ADDLW	0x08
001ae2   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001ae4   0e00     movlw   0x00             	MOVLW	0x00
001ae6   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001ae8   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001aea   0e00     movlw   0x00             	MOVLW	0x00
001aec   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001aee   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001af0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001af2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001af4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001af6   0e0a     movlw   0x0a             	MOVLW	0x0a
001af8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001afa   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001afc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001afe   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001b00   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b02   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001b04   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b06   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b08   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b0a   ec4e     call    0x00329c, 0x0    	CALL	__modulong
001b0c   f019
001b0e   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001b10   0e08     movlw   0x08             	MOVLW	0x08
001b12   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001b14   0e30     movlw   0x30             	MOVLW	0x30
001b16   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001b18   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001b1a   ffe5
001b1c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001b1e   ffe9
001b20   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001b22   fff3
001b24   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001b26   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001b28   f020
                                           ;	.line	214; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001b2a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001b2c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001b2e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001b30   0e0a     movlw   0x0a             	MOVLW	0x0a
001b32   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b34   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001b36   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b38   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001b3a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b3c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001b3e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b40   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b42   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b44   eceb     call    0x0033d6, 0x0    	CALL	__divulong
001b46   f019
001b48   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001b4a   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001b4c   f001
001b4e   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001b50   f002
001b52   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001b54   f003
001b56   0e08     movlw   0x08             	MOVLW	0x08
001b58   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	215; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + (val % 10);
001b5a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001b5c   0f07     addlw   0x07             	ADDLW	0x07
001b5e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001b60   0e00     movlw   0x00             	MOVLW	0x00
001b62   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001b64   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001b66   0e00     movlw   0x00             	MOVLW	0x00
001b68   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001b6a   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001b6c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001b6e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001b70   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001b72   0e0a     movlw   0x0a             	MOVLW	0x0a
001b74   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b76   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001b78   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b7a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001b7c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b7e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001b80   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b82   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b84   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b86   ec4e     call    0x00329c, 0x0    	CALL	__modulong
001b88   f019
001b8a   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001b8c   0e08     movlw   0x08             	MOVLW	0x08
001b8e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001b90   0e30     movlw   0x30             	MOVLW	0x30
001b92   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001b94   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001b96   ffe5
001b98   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001b9a   ffe9
001b9c   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001b9e   fff3
001ba0   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001ba2   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001ba4   f020
                                           ;	.line	216; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001ba6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001ba8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001baa   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001bac   0e0a     movlw   0x0a             	MOVLW	0x0a
001bae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bb0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001bb2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bb4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001bb6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bb8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001bba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bbc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001bbe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bc0   eceb     call    0x0033d6, 0x0    	CALL	__divulong
001bc2   f019
001bc4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001bc6   0e08     movlw   0x08             	MOVLW	0x08
001bc8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	217; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = '0' + val;
001bca   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001bcc   0f06     addlw   0x06             	ADDLW	0x06
001bce   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001bd0   0e00     movlw   0x00             	MOVLW	0x00
001bd2   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001bd4   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001bd6   0e00     movlw   0x00             	MOVLW	0x00
001bd8   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001bda   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001bdc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001bde   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001be0   0e30     movlw   0x30             	MOVLW	0x30
001be2   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001be4   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001be6   ffe5
001be8   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001bea   ffe9
001bec   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001bee   fff3
001bf0   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001bf2   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001bf4   f020
                                           ;	.line	218; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = ' ';
001bf6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001bf8   0f05     addlw   0x05             	ADDLW	0x05
001bfa   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001bfc   0e00     movlw   0x00             	MOVLW	0x00
001bfe   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001c00   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001c02   0e00     movlw   0x00             	MOVLW	0x00
001c04   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001c06   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001c08   0e20     movlw   0x20             	MOVLW	0x20
001c0a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c0c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001c0e   ffe9
001c10   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001c12   fff3
001c14   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001c16   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001c18   f020
                                           ;	.line	219; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = ' ';
001c1a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001c1c   0f04     addlw   0x04             	ADDLW	0x04
001c1e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001c20   0e00     movlw   0x00             	MOVLW	0x00
001c22   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001c24   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001c26   0e00     movlw   0x00             	MOVLW	0x00
001c28   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001c2a   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001c2c   0e20     movlw   0x20             	MOVLW	0x20
001c2e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c30   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001c32   ffe9
001c34   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001c36   fff3
001c38   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001c3a   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001c3c   f020
                                           ;	.line	220; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = ' ';
001c3e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001c40   0f03     addlw   0x03             	ADDLW	0x03
001c42   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001c44   0e00     movlw   0x00             	MOVLW	0x00
001c46   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001c48   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001c4a   0e00     movlw   0x00             	MOVLW	0x00
001c4c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001c4e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001c50   0e20     movlw   0x20             	MOVLW	0x20
001c52   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c54   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001c56   ffe9
001c58   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001c5a   fff3
001c5c   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001c5e   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001c60   f020
                                           ;	.line	221; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
001c62   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001c64   0f02     addlw   0x02             	ADDLW	0x02
001c66   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001c68   0e00     movlw   0x00             	MOVLW	0x00
001c6a   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001c6c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001c6e   0e00     movlw   0x00             	MOVLW	0x00
001c70   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001c72   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001c74   0e20     movlw   0x20             	MOVLW	0x20
001c76   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c78   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001c7a   ffe9
001c7c   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001c7e   fff3
001c80   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001c82   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001c84   f020
                                           ;	.line	222; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
001c86   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001c88   0f01     addlw   0x01             	ADDLW	0x01
001c8a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001c8c   0e00     movlw   0x00             	MOVLW	0x00
001c8e   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001c90   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001c92   0e00     movlw   0x00             	MOVLW	0x00
001c94   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001c96   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001c98   0e20     movlw   0x20             	MOVLW	0x20
001c9a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c9c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001c9e   ffe9
001ca0   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001ca2   fff3
001ca4   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001ca6   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001ca8   f020
                                           ;	.line	223; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
001caa   0e20     movlw   0x20             	MOVLW	0x20
001cac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001cae   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001cb0   ffe9
001cb2   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
001cb4   fff3
001cb6   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001cb8   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001cba   f020
                                           ;	.line	224; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
001cbc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001cbe   0f0a     addlw   0x0a             	ADDLW	0x0a
001cc0   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001cc2   0e00     movlw   0x00             	MOVLW	0x00
001cc4   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001cc6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001cc8   0e00     movlw   0x00             	MOVLW	0x00
001cca   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001ccc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001cce   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001cd0   ffe9
001cd2   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001cd4   fff3
001cd6   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001cd8   f020
001cda   ef39     goto    0x002272         	GOTO	_00534_DS_
001cdc   f011
                                           _00514_DS_:
                                           ;	.line	225; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 99) {
001cde   0e00     movlw   0x00             	MOVLW	0x00
001ce0   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
001ce2   e108     bnz     0x001cf4         	BNZ	_00570_DS_
001ce4   0e00     movlw   0x00             	MOVLW	0x00
001ce6   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
001ce8   e105     bnz     0x001cf4         	BNZ	_00570_DS_
001cea   0e00     movlw   0x00             	MOVLW	0x00
001cec   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001cee   e102     bnz     0x001cf4         	BNZ	_00570_DS_
001cf0   0e64     movlw   0x64             	MOVLW	0x64
001cf2   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00570_DS_:
001cf4   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
001cf6   d111     bra     0x001f1a         	BRA	_00511_DS_
                                           ;	.line	226; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
001cf8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001cfa   0f09     addlw   0x09             	ADDLW	0x09
001cfc   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001cfe   0e00     movlw   0x00             	MOVLW	0x00
001d00   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001d02   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001d04   0e00     movlw   0x00             	MOVLW	0x00
001d06   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001d08   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001d0a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d0c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d0e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d10   0e0a     movlw   0x0a             	MOVLW	0x0a
001d12   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d14   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001d16   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d18   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001d1a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d1c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d1e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d20   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001d22   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d24   ec4e     call    0x00329c, 0x0    	CALL	__modulong
001d26   f019
001d28   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001d2a   0e08     movlw   0x08             	MOVLW	0x08
001d2c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001d2e   0e30     movlw   0x30             	MOVLW	0x30
001d30   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001d32   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001d34   ffe5
001d36   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001d38   ffe9
001d3a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001d3c   fff3
001d3e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001d40   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001d42   f020
                                           ;	.line	227; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001d44   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d46   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d48   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d4a   0e0a     movlw   0x0a             	MOVLW	0x0a
001d4c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d4e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001d50   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d52   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001d54   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d56   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d58   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d5a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001d5c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d5e   eceb     call    0x0033d6, 0x0    	CALL	__divulong
001d60   f019
001d62   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001d64   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001d66   f001
001d68   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001d6a   f002
001d6c   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001d6e   f003
001d70   0e08     movlw   0x08             	MOVLW	0x08
001d72   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	228; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + (val % 10);
001d74   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001d76   0f08     addlw   0x08             	ADDLW	0x08
001d78   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001d7a   0e00     movlw   0x00             	MOVLW	0x00
001d7c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001d7e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001d80   0e00     movlw   0x00             	MOVLW	0x00
001d82   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001d84   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001d86   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d88   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d8a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001d8c   0e0a     movlw   0x0a             	MOVLW	0x0a
001d8e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d90   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001d92   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d94   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001d96   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d98   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d9a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d9c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001d9e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001da0   ec4e     call    0x00329c, 0x0    	CALL	__modulong
001da2   f019
001da4   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001da6   0e08     movlw   0x08             	MOVLW	0x08
001da8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001daa   0e30     movlw   0x30             	MOVLW	0x30
001dac   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001dae   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001db0   ffe5
001db2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001db4   ffe9
001db6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001db8   fff3
001dba   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001dbc   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001dbe   f020
                                           ;	.line	229; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001dc0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001dc2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001dc4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001dc6   0e0a     movlw   0x0a             	MOVLW	0x0a
001dc8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001dca   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001dcc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001dce   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001dd0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001dd2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001dd4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001dd6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001dd8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001dda   eceb     call    0x0033d6, 0x0    	CALL	__divulong
001ddc   f019
001dde   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001de0   0e08     movlw   0x08             	MOVLW	0x08
001de2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	230; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = '0' + val;
001de4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001de6   0f07     addlw   0x07             	ADDLW	0x07
001de8   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001dea   0e00     movlw   0x00             	MOVLW	0x00
001dec   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001dee   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001df0   0e00     movlw   0x00             	MOVLW	0x00
001df2   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001df4   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001df6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001df8   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001dfa   0e30     movlw   0x30             	MOVLW	0x30
001dfc   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001dfe   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001e00   ffe5
001e02   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001e04   ffe9
001e06   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001e08   fff3
001e0a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001e0c   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001e0e   f020
                                           ;	.line	231; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = ' ';
001e10   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001e12   0f06     addlw   0x06             	ADDLW	0x06
001e14   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001e16   0e00     movlw   0x00             	MOVLW	0x00
001e18   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001e1a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001e1c   0e00     movlw   0x00             	MOVLW	0x00
001e1e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001e20   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001e22   0e20     movlw   0x20             	MOVLW	0x20
001e24   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e26   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001e28   ffe9
001e2a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001e2c   fff3
001e2e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001e30   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001e32   f020
                                           ;	.line	232; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = ' ';
001e34   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001e36   0f05     addlw   0x05             	ADDLW	0x05
001e38   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001e3a   0e00     movlw   0x00             	MOVLW	0x00
001e3c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001e3e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001e40   0e00     movlw   0x00             	MOVLW	0x00
001e42   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001e44   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001e46   0e20     movlw   0x20             	MOVLW	0x20
001e48   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e4a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001e4c   ffe9
001e4e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001e50   fff3
001e52   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001e54   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001e56   f020
                                           ;	.line	233; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = ' ';
001e58   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001e5a   0f04     addlw   0x04             	ADDLW	0x04
001e5c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001e5e   0e00     movlw   0x00             	MOVLW	0x00
001e60   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001e62   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001e64   0e00     movlw   0x00             	MOVLW	0x00
001e66   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001e68   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001e6a   0e20     movlw   0x20             	MOVLW	0x20
001e6c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e6e   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001e70   ffe9
001e72   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001e74   fff3
001e76   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001e78   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001e7a   f020
                                           ;	.line	234; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = ' ';
001e7c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001e7e   0f03     addlw   0x03             	ADDLW	0x03
001e80   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001e82   0e00     movlw   0x00             	MOVLW	0x00
001e84   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001e86   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001e88   0e00     movlw   0x00             	MOVLW	0x00
001e8a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001e8c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001e8e   0e20     movlw   0x20             	MOVLW	0x20
001e90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e92   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001e94   ffe9
001e96   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001e98   fff3
001e9a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001e9c   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001e9e   f020
                                           ;	.line	235; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
001ea0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001ea2   0f02     addlw   0x02             	ADDLW	0x02
001ea4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001ea6   0e00     movlw   0x00             	MOVLW	0x00
001ea8   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001eaa   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001eac   0e00     movlw   0x00             	MOVLW	0x00
001eae   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001eb0   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001eb2   0e20     movlw   0x20             	MOVLW	0x20
001eb4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001eb6   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001eb8   ffe9
001eba   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001ebc   fff3
001ebe   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001ec0   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001ec2   f020
                                           ;	.line	236; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
001ec4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001ec6   0f01     addlw   0x01             	ADDLW	0x01
001ec8   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001eca   0e00     movlw   0x00             	MOVLW	0x00
001ecc   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001ece   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001ed0   0e00     movlw   0x00             	MOVLW	0x00
001ed2   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001ed4   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001ed6   0e20     movlw   0x20             	MOVLW	0x20
001ed8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001eda   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001edc   ffe9
001ede   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001ee0   fff3
001ee2   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001ee4   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001ee6   f020
                                           ;	.line	237; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
001ee8   0e20     movlw   0x20             	MOVLW	0x20
001eea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001eec   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001eee   ffe9
001ef0   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
001ef2   fff3
001ef4   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001ef6   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001ef8   f020
                                           ;	.line	238; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
001efa   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001efc   0f0a     addlw   0x0a             	ADDLW	0x0a
001efe   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001f00   0e00     movlw   0x00             	MOVLW	0x00
001f02   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001f04   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001f06   0e00     movlw   0x00             	MOVLW	0x00
001f08   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001f0a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001f0c   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001f0e   ffe9
001f10   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001f12   fff3
001f14   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001f16   f020
001f18   d1ac     bra     0x002272         	BRA	_00534_DS_
                                           _00511_DS_:
                                           ;	.line	239; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 9) {
001f1a   0e00     movlw   0x00             	MOVLW	0x00
001f1c   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
001f1e   e108     bnz     0x001f30         	BNZ	_00571_DS_
001f20   0e00     movlw   0x00             	MOVLW	0x00
001f22   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
001f24   e105     bnz     0x001f30         	BNZ	_00571_DS_
001f26   0e00     movlw   0x00             	MOVLW	0x00
001f28   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001f2a   e102     bnz     0x001f30         	BNZ	_00571_DS_
001f2c   0e0a     movlw   0x0a             	MOVLW	0x0a
001f2e   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00571_DS_:
001f30   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
001f32   d0e5     bra     0x0020fe         	BRA	_00508_DS_
                                           ;	.line	240; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + (val % 10);
001f34   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001f36   0f09     addlw   0x09             	ADDLW	0x09
001f38   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001f3a   0e00     movlw   0x00             	MOVLW	0x00
001f3c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001f3e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001f40   0e00     movlw   0x00             	MOVLW	0x00
001f42   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001f44   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001f46   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001f48   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001f4a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001f4c   0e0a     movlw   0x0a             	MOVLW	0x0a
001f4e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f50   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001f52   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f54   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001f56   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f58   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001f5a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f5c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001f5e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f60   ec4e     call    0x00329c, 0x0    	CALL	__modulong
001f62   f019
001f64   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001f66   0e08     movlw   0x08             	MOVLW	0x08
001f68   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001f6a   0e30     movlw   0x30             	MOVLW	0x30
001f6c   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001f6e   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001f70   ffe5
001f72   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001f74   ffe9
001f76   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001f78   fff3
001f7a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001f7c   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001f7e   f020
                                           ;	.line	241; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
001f80   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001f82   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001f84   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001f86   0e0a     movlw   0x0a             	MOVLW	0x0a
001f88   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f8a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001f8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f8e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001f90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f92   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001f94   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f96   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001f98   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f9a   eceb     call    0x0033d6, 0x0    	CALL	__divulong
001f9c   f019
001f9e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001fa0   0e08     movlw   0x08             	MOVLW	0x08
001fa2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	242; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = '0' + val;
001fa4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001fa6   0f08     addlw   0x08             	ADDLW	0x08
001fa8   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001faa   0e00     movlw   0x00             	MOVLW	0x00
001fac   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001fae   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001fb0   0e00     movlw   0x00             	MOVLW	0x00
001fb2   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001fb4   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001fb6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001fb8   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
001fba   0e30     movlw   0x30             	MOVLW	0x30
001fbc   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
001fbe   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001fc0   ffe5
001fc2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001fc4   ffe9
001fc6   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001fc8   fff3
001fca   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001fcc   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001fce   f020
                                           ;	.line	243; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = ' ';
001fd0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001fd2   0f07     addlw   0x07             	ADDLW	0x07
001fd4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001fd6   0e00     movlw   0x00             	MOVLW	0x00
001fd8   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001fda   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001fdc   0e00     movlw   0x00             	MOVLW	0x00
001fde   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001fe0   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001fe2   0e20     movlw   0x20             	MOVLW	0x20
001fe4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001fe6   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001fe8   ffe9
001fea   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001fec   fff3
001fee   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001ff0   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
001ff2   f020
                                           ;	.line	244; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = ' ';
001ff4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001ff6   0f06     addlw   0x06             	ADDLW	0x06
001ff8   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001ffa   0e00     movlw   0x00             	MOVLW	0x00
001ffc   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
001ffe   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002000   0e00     movlw   0x00             	MOVLW	0x00
002002   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
002004   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
002006   0e20     movlw   0x20             	MOVLW	0x20
002008   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00200a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00200c   ffe9
00200e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
002010   fff3
002012   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
002014   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002016   f020
                                           ;	.line	245; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = ' ';
002018   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00201a   0f05     addlw   0x05             	ADDLW	0x05
00201c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00201e   0e00     movlw   0x00             	MOVLW	0x00
002020   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002022   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002024   0e00     movlw   0x00             	MOVLW	0x00
002026   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
002028   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00202a   0e20     movlw   0x20             	MOVLW	0x20
00202c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00202e   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
002030   ffe9
002032   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
002034   fff3
002036   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
002038   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00203a   f020
                                           ;	.line	246; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = ' ';
00203c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00203e   0f04     addlw   0x04             	ADDLW	0x04
002040   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002042   0e00     movlw   0x00             	MOVLW	0x00
002044   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002046   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002048   0e00     movlw   0x00             	MOVLW	0x00
00204a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00204c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00204e   0e20     movlw   0x20             	MOVLW	0x20
002050   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002052   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
002054   ffe9
002056   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
002058   fff3
00205a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00205c   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00205e   f020
                                           ;	.line	247; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = ' ';
002060   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002062   0f03     addlw   0x03             	ADDLW	0x03
002064   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002066   0e00     movlw   0x00             	MOVLW	0x00
002068   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00206a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00206c   0e00     movlw   0x00             	MOVLW	0x00
00206e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
002070   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
002072   0e20     movlw   0x20             	MOVLW	0x20
002074   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002076   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
002078   ffe9
00207a   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00207c   fff3
00207e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
002080   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002082   f020
                                           ;	.line	248; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
002084   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002086   0f02     addlw   0x02             	ADDLW	0x02
002088   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00208a   0e00     movlw   0x00             	MOVLW	0x00
00208c   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00208e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002090   0e00     movlw   0x00             	MOVLW	0x00
002092   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
002094   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
002096   0e20     movlw   0x20             	MOVLW	0x20
002098   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00209a   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00209c   ffe9
00209e   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0020a0   fff3
0020a2   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0020a4   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0020a6   f020
                                           ;	.line	249; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
0020a8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0020aa   0f01     addlw   0x01             	ADDLW	0x01
0020ac   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0020ae   0e00     movlw   0x00             	MOVLW	0x00
0020b0   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0020b2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0020b4   0e00     movlw   0x00             	MOVLW	0x00
0020b6   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0020b8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0020ba   0e20     movlw   0x20             	MOVLW	0x20
0020bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020be   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0020c0   ffe9
0020c2   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0020c4   fff3
0020c6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0020c8   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0020ca   f020
                                           ;	.line	250; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
0020cc   0e20     movlw   0x20             	MOVLW	0x20
0020ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020d0   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0020d2   ffe9
0020d4   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
0020d6   fff3
0020d8   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0020da   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0020dc   f020
                                           ;	.line	251; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
0020de   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0020e0   0f0a     addlw   0x0a             	ADDLW	0x0a
0020e2   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0020e4   0e00     movlw   0x00             	MOVLW	0x00
0020e6   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0020e8   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0020ea   0e00     movlw   0x00             	MOVLW	0x00
0020ec   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0020ee   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0020f0   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0020f2   ffe9
0020f4   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0020f6   fff3
0020f8   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0020fa   f020
0020fc   d0ba     bra     0x002272         	BRA	_00534_DS_
                                           _00508_DS_:
                                           ;	.line	253; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[9] = '0' + val;
0020fe   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002100   0f09     addlw   0x09             	ADDLW	0x09
002102   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002104   0e00     movlw   0x00             	MOVLW	0x00
002106   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002108   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00210a   0e00     movlw   0x00             	MOVLW	0x00
00210c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00210e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
002110   0e30     movlw   0x30             	MOVLW	0x30
002112   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002114   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002116   ffe5
002118   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
00211a   ffe9
00211c   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
00211e   fff3
002120   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
002122   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002124   f020
                                           ;	.line	254; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[8] = ' ';
002126   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002128   0f08     addlw   0x08             	ADDLW	0x08
00212a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00212c   0e00     movlw   0x00             	MOVLW	0x00
00212e   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002130   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002132   0e00     movlw   0x00             	MOVLW	0x00
002134   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
002136   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002138   0e20     movlw   0x20             	MOVLW	0x20
00213a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00213c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00213e   ffe9
002140   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
002142   fff3
002144   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002146   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002148   f020
                                           ;	.line	255; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[7] = ' ';
00214a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00214c   0f07     addlw   0x07             	ADDLW	0x07
00214e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002150   0e00     movlw   0x00             	MOVLW	0x00
002152   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002154   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002156   0e00     movlw   0x00             	MOVLW	0x00
002158   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00215a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00215c   0e20     movlw   0x20             	MOVLW	0x20
00215e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002160   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002162   ffe9
002164   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
002166   fff3
002168   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00216a   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00216c   f020
                                           ;	.line	256; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[6] = ' ';
00216e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002170   0f06     addlw   0x06             	ADDLW	0x06
002172   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002174   0e00     movlw   0x00             	MOVLW	0x00
002176   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002178   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00217a   0e00     movlw   0x00             	MOVLW	0x00
00217c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00217e   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002180   0e20     movlw   0x20             	MOVLW	0x20
002182   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002184   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002186   ffe9
002188   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
00218a   fff3
00218c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00218e   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002190   f020
                                           ;	.line	257; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = ' ';
002192   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002194   0f05     addlw   0x05             	ADDLW	0x05
002196   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002198   0e00     movlw   0x00             	MOVLW	0x00
00219a   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00219c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00219e   0e00     movlw   0x00             	MOVLW	0x00
0021a0   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0021a2   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0021a4   0e20     movlw   0x20             	MOVLW	0x20
0021a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021a8   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0021aa   ffe9
0021ac   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0021ae   fff3
0021b0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0021b2   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0021b4   f020
                                           ;	.line	258; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = ' ';
0021b6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0021b8   0f04     addlw   0x04             	ADDLW	0x04
0021ba   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0021bc   0e00     movlw   0x00             	MOVLW	0x00
0021be   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0021c0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0021c2   0e00     movlw   0x00             	MOVLW	0x00
0021c4   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0021c6   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0021c8   0e20     movlw   0x20             	MOVLW	0x20
0021ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021cc   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0021ce   ffe9
0021d0   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0021d2   fff3
0021d4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0021d6   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0021d8   f020
                                           ;	.line	259; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = ' ';
0021da   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0021dc   0f03     addlw   0x03             	ADDLW	0x03
0021de   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0021e0   0e00     movlw   0x00             	MOVLW	0x00
0021e2   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0021e4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0021e6   0e00     movlw   0x00             	MOVLW	0x00
0021e8   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0021ea   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0021ec   0e20     movlw   0x20             	MOVLW	0x20
0021ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021f0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0021f2   ffe9
0021f4   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0021f6   fff3
0021f8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0021fa   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0021fc   f020
                                           ;	.line	260; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
0021fe   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002200   0f02     addlw   0x02             	ADDLW	0x02
002202   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002204   0e00     movlw   0x00             	MOVLW	0x00
002206   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002208   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00220a   0e00     movlw   0x00             	MOVLW	0x00
00220c   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
00220e   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002210   0e20     movlw   0x20             	MOVLW	0x20
002212   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002214   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002216   ffe9
002218   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
00221a   fff3
00221c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00221e   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002220   f020
                                           ;	.line	261; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
002222   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002224   0f01     addlw   0x01             	ADDLW	0x01
002226   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002228   0e00     movlw   0x00             	MOVLW	0x00
00222a   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
00222c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00222e   0e00     movlw   0x00             	MOVLW	0x00
002230   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
002232   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002234   0e20     movlw   0x20             	MOVLW	0x20
002236   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002238   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00223a   ffe9
00223c   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
00223e   fff3
002240   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002242   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002244   f020
                                           ;	.line	262; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
002246   0e20     movlw   0x20             	MOVLW	0x20
002248   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00224a   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
00224c   ffe9
00224e   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
002250   fff3
002252   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
002254   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002256   f020
                                           ;	.line	263; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[10] = 0;
002258   0e0a     movlw   0x0a             	MOVLW	0x0a
00225a   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00225c   0e00     movlw   0x00             	MOVLW	0x00
00225e   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
002260   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002262   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002264   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
002266   ffe9
002268   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
00226a   fff3
00226c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00226e   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002270   f020
                                           _00534_DS_:
002272   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
002274   f00a
002276   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
002278   f009
00227a   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
00227c   f008
00227e   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
002280   f007
002282   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
002284   f006
002286   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002288   f005
00228a   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
00228c   f004
00228e   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002290   f003
002292   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002294   f002
002296   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002298   f001
00229a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00229c   f000
00229e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0022a0   ffd9
0022a2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__word2dec	code
                                           _word2dec:
                                           ;	.line	49; ../my_sdcc_lib/rosso_sdcc_conversion.h	void word2dec(uint16_t val, uint8_t *s) {
0022a4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0022a6   ffe5
0022a8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0022aa   ffd9
0022ac   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0022ae   ffe5
0022b0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0022b2   ffe5
0022b4   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0022b6   ffe5
0022b8   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0022ba   ffe5
0022bc   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0022be   ffe5
0022c0   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
0022c2   ffe5
0022c4   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
0022c6   ffe5
0022c8   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0022ca   ffe5
0022cc   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0022ce   ffe5
0022d0   0e02     movlw   0x02             	MOVLW	0x02
0022d2   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0022d4   f000
0022d6   0e03     movlw   0x03             	MOVLW	0x03
0022d8   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0022da   f001
0022dc   0e04     movlw   0x04             	MOVLW	0x04
0022de   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0022e0   f002
0022e2   0e05     movlw   0x05             	MOVLW	0x05
0022e4   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
0022e6   f003
0022e8   0e06     movlw   0x06             	MOVLW	0x06
0022ea   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
0022ec   f004
                                           ;	.line	50; ../my_sdcc_lib/rosso_sdcc_conversion.h	if (val > 9999) {
0022ee   0e27     movlw   0x27             	MOVLW	0x27
0022f0   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
0022f2   e102     bnz     0x0022f8         	BNZ	_00499_DS_
0022f4   0e10     movlw   0x10             	MOVLW	0x10
0022f6   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00499_DS_:
0022f8   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0022fa   d0d4     bra     0x0024a4         	BRA	_00483_DS_
                                           ;	.line	51; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
0022fc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0022fe   0f04     addlw   0x04             	ADDLW	0x04
002300   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002302   0e00     movlw   0x00             	MOVLW	0x00
002304   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002306   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002308   0e00     movlw   0x00             	MOVLW	0x00
00230a   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
00230c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00230e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002310   0e0a     movlw   0x0a             	MOVLW	0x0a
002312   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002314   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002316   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002318   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00231a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00231c   ec58     call    0x0036b0, 0x0    	CALL	__moduint
00231e   f01b
002320   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002322   0e04     movlw   0x04             	MOVLW	0x04
002324   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002326   0e30     movlw   0x30             	MOVLW	0x30
002328   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
00232a   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
00232c   ffe5
00232e   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002330   ffe9
002332   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002334   fff3
002336   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
002338   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00233a   f020
                                           ;	.line	52; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00233c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00233e   0e0a     movlw   0x0a             	MOVLW	0x0a
002340   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002342   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002344   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002346   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002348   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00234a   ecb5     call    0x00376a, 0x0    	CALL	__divuint
00234c   f01b
00234e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002350   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002352   f001
002354   0e04     movlw   0x04             	MOVLW	0x04
002356   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	53; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + (val % 10);
002358   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00235a   0f03     addlw   0x03             	ADDLW	0x03
00235c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00235e   0e00     movlw   0x00             	MOVLW	0x00
002360   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002362   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002364   0e00     movlw   0x00             	MOVLW	0x00
002366   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002368   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00236a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00236c   0e0a     movlw   0x0a             	MOVLW	0x0a
00236e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002370   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002372   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002374   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002376   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002378   ec58     call    0x0036b0, 0x0    	CALL	__moduint
00237a   f01b
00237c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00237e   0e04     movlw   0x04             	MOVLW	0x04
002380   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002382   0e30     movlw   0x30             	MOVLW	0x30
002384   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
002386   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
002388   ffe5
00238a   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
00238c   ffe9
00238e   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002390   fff3
002392   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
002394   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002396   f020
                                           ;	.line	54; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
002398   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00239a   0e0a     movlw   0x0a             	MOVLW	0x0a
00239c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00239e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023a2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0023a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023a6   ecb5     call    0x00376a, 0x0    	CALL	__divuint
0023a8   f01b
0023aa   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0023ac   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0023ae   f001
0023b0   0e04     movlw   0x04             	MOVLW	0x04
0023b2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	55; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + (val % 10);
0023b4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0023b6   0f02     addlw   0x02             	ADDLW	0x02
0023b8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0023ba   0e00     movlw   0x00             	MOVLW	0x00
0023bc   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0023be   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0023c0   0e00     movlw   0x00             	MOVLW	0x00
0023c2   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0023c4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0023c6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0023c8   0e0a     movlw   0x0a             	MOVLW	0x0a
0023ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023cc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023d0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0023d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023d4   ec58     call    0x0036b0, 0x0    	CALL	__moduint
0023d6   f01b
0023d8   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0023da   0e04     movlw   0x04             	MOVLW	0x04
0023dc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0023de   0e30     movlw   0x30             	MOVLW	0x30
0023e0   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0023e2   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0023e4   ffe5
0023e6   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0023e8   ffe9
0023ea   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0023ec   fff3
0023ee   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0023f0   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0023f2   f020
                                           ;	.line	56; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0023f4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0023f6   0e0a     movlw   0x0a             	MOVLW	0x0a
0023f8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023fa   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023fe   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002400   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002402   ecb5     call    0x00376a, 0x0    	CALL	__divuint
002404   f01b
002406   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002408   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00240a   f001
00240c   0e04     movlw   0x04             	MOVLW	0x04
00240e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	57; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = '0' + (val % 10);
002410   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002412   0f01     addlw   0x01             	ADDLW	0x01
002414   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002416   0e00     movlw   0x00             	MOVLW	0x00
002418   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00241a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00241c   0e00     movlw   0x00             	MOVLW	0x00
00241e   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002420   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002422   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002424   0e0a     movlw   0x0a             	MOVLW	0x0a
002426   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002428   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00242a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00242c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00242e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002430   ec58     call    0x0036b0, 0x0    	CALL	__moduint
002432   f01b
002434   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002436   0e04     movlw   0x04             	MOVLW	0x04
002438   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00243a   0e30     movlw   0x30             	MOVLW	0x30
00243c   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
00243e   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
002440   ffe5
002442   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002444   ffe9
002446   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002448   fff3
00244a   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00244c   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00244e   f020
                                           ;	.line	58; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
002450   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002452   0e0a     movlw   0x0a             	MOVLW	0x0a
002454   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002456   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002458   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00245a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00245c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00245e   ecb5     call    0x00376a, 0x0    	CALL	__divuint
002460   f01b
002462   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002464   0e04     movlw   0x04             	MOVLW	0x04
002466   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	59; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = '0' + val;
002468   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00246a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00246c   0e30     movlw   0x30             	MOVLW	0x30
00246e   2605     addwf   0x05, 0x1, 0x0   	ADDWF	r0x05, F
002470   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
002472   ffe5
002474   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
002476   ffe9
002478   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
00247a   fff3
00247c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00247e   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002480   f020
                                           ;	.line	60; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = 0;
002482   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002484   0f05     addlw   0x05             	ADDLW	0x05
002486   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002488   0e00     movlw   0x00             	MOVLW	0x00
00248a   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00248c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00248e   0e00     movlw   0x00             	MOVLW	0x00
002490   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002492   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002494   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002496   ffe9
002498   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
00249a   fff3
00249c   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00249e   f020
0024a0   ef98     goto    0x002930         	GOTO	_00485_DS_
0024a2   f014
                                           _00483_DS_:
                                           ;	.line	61; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 999) {
0024a4   0e03     movlw   0x03             	MOVLW	0x03
0024a6   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
0024a8   e102     bnz     0x0024ae         	BNZ	_00500_DS_
0024aa   0ee8     movlw   0xe8             	MOVLW	0xe8
0024ac   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00500_DS_:
0024ae   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0024b0   d0b7     bra     0x002620         	BRA	_00480_DS_
                                           ;	.line	62; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
0024b2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0024b4   0f04     addlw   0x04             	ADDLW	0x04
0024b6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0024b8   0e00     movlw   0x00             	MOVLW	0x00
0024ba   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0024bc   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0024be   0e00     movlw   0x00             	MOVLW	0x00
0024c0   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0024c2   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0024c4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0024c6   0e0a     movlw   0x0a             	MOVLW	0x0a
0024c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0024ca   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0024cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0024ce   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0024d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0024d2   ec58     call    0x0036b0, 0x0    	CALL	__moduint
0024d4   f01b
0024d6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0024d8   0e04     movlw   0x04             	MOVLW	0x04
0024da   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0024dc   0e30     movlw   0x30             	MOVLW	0x30
0024de   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0024e0   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0024e2   ffe5
0024e4   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0024e6   ffe9
0024e8   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0024ea   fff3
0024ec   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0024ee   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0024f0   f020
                                           ;	.line	63; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0024f2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0024f4   0e0a     movlw   0x0a             	MOVLW	0x0a
0024f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0024f8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0024fa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0024fc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0024fe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002500   ecb5     call    0x00376a, 0x0    	CALL	__divuint
002502   f01b
002504   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002506   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002508   f001
00250a   0e04     movlw   0x04             	MOVLW	0x04
00250c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	64; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + (val % 10);
00250e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002510   0f03     addlw   0x03             	ADDLW	0x03
002512   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002514   0e00     movlw   0x00             	MOVLW	0x00
002516   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002518   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00251a   0e00     movlw   0x00             	MOVLW	0x00
00251c   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
00251e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002520   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002522   0e0a     movlw   0x0a             	MOVLW	0x0a
002524   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002526   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002528   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00252a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00252c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00252e   ec58     call    0x0036b0, 0x0    	CALL	__moduint
002530   f01b
002532   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002534   0e04     movlw   0x04             	MOVLW	0x04
002536   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002538   0e30     movlw   0x30             	MOVLW	0x30
00253a   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
00253c   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
00253e   ffe5
002540   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002542   ffe9
002544   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002546   fff3
002548   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00254a   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00254c   f020
                                           ;	.line	65; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00254e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002550   0e0a     movlw   0x0a             	MOVLW	0x0a
002552   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002554   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002556   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002558   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00255a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00255c   ecb5     call    0x00376a, 0x0    	CALL	__divuint
00255e   f01b
002560   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002562   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002564   f001
002566   0e04     movlw   0x04             	MOVLW	0x04
002568   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	66; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + (val % 10);
00256a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00256c   0f02     addlw   0x02             	ADDLW	0x02
00256e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002570   0e00     movlw   0x00             	MOVLW	0x00
002572   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002574   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002576   0e00     movlw   0x00             	MOVLW	0x00
002578   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
00257a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00257c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00257e   0e0a     movlw   0x0a             	MOVLW	0x0a
002580   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002582   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002584   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002586   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002588   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00258a   ec58     call    0x0036b0, 0x0    	CALL	__moduint
00258c   f01b
00258e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002590   0e04     movlw   0x04             	MOVLW	0x04
002592   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002594   0e30     movlw   0x30             	MOVLW	0x30
002596   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
002598   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
00259a   ffe5
00259c   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
00259e   ffe9
0025a0   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0025a2   fff3
0025a4   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0025a6   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0025a8   f020
                                           ;	.line	67; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0025aa   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0025ac   0e0a     movlw   0x0a             	MOVLW	0x0a
0025ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025b0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0025b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025b4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0025b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025b8   ecb5     call    0x00376a, 0x0    	CALL	__divuint
0025ba   f01b
0025bc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0025be   0e04     movlw   0x04             	MOVLW	0x04
0025c0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	68; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = '0' + val;
0025c2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0025c4   0f01     addlw   0x01             	ADDLW	0x01
0025c6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0025c8   0e00     movlw   0x00             	MOVLW	0x00
0025ca   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0025cc   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0025ce   0e00     movlw   0x00             	MOVLW	0x00
0025d0   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0025d2   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0025d4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0025d6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0025d8   0e30     movlw   0x30             	MOVLW	0x30
0025da   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0025dc   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0025de   ffe5
0025e0   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0025e2   ffe9
0025e4   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0025e6   fff3
0025e8   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0025ea   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0025ec   f020
                                           ;	.line	69; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
0025ee   0e20     movlw   0x20             	MOVLW	0x20
0025f0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025f2   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
0025f4   ffe9
0025f6   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
0025f8   fff3
0025fa   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0025fc   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0025fe   f020
                                           ;	.line	70; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = 0;
002600   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002602   0f05     addlw   0x05             	ADDLW	0x05
002604   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002606   0e00     movlw   0x00             	MOVLW	0x00
002608   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00260a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00260c   0e00     movlw   0x00             	MOVLW	0x00
00260e   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002610   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002612   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002614   ffe9
002616   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002618   fff3
00261a   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00261c   f020
00261e   d188     bra     0x002930         	BRA	_00485_DS_
                                           _00480_DS_:
                                           ;	.line	71; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 99) {
002620   0e00     movlw   0x00             	MOVLW	0x00
002622   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
002624   e102     bnz     0x00262a         	BNZ	_00501_DS_
002626   0e64     movlw   0x64             	MOVLW	0x64
002628   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00501_DS_:
00262a   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00262c   d09b     bra     0x002764         	BRA	_00477_DS_
                                           ;	.line	72; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
00262e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002630   0f04     addlw   0x04             	ADDLW	0x04
002632   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002634   0e00     movlw   0x00             	MOVLW	0x00
002636   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002638   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00263a   0e00     movlw   0x00             	MOVLW	0x00
00263c   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
00263e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002640   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002642   0e0a     movlw   0x0a             	MOVLW	0x0a
002644   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002646   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002648   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00264a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00264c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00264e   ec58     call    0x0036b0, 0x0    	CALL	__moduint
002650   f01b
002652   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002654   0e04     movlw   0x04             	MOVLW	0x04
002656   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002658   0e30     movlw   0x30             	MOVLW	0x30
00265a   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
00265c   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
00265e   ffe5
002660   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002662   ffe9
002664   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002666   fff3
002668   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00266a   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00266c   f020
                                           ;	.line	73; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
00266e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002670   0e0a     movlw   0x0a             	MOVLW	0x0a
002672   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002674   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002676   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002678   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00267a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00267c   ecb5     call    0x00376a, 0x0    	CALL	__divuint
00267e   f01b
002680   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002682   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002684   f001
002686   0e04     movlw   0x04             	MOVLW	0x04
002688   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	74; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + (val % 10);
00268a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00268c   0f03     addlw   0x03             	ADDLW	0x03
00268e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002690   0e00     movlw   0x00             	MOVLW	0x00
002692   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002694   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002696   0e00     movlw   0x00             	MOVLW	0x00
002698   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
00269a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00269c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00269e   0e0a     movlw   0x0a             	MOVLW	0x0a
0026a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026a2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0026a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026a6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0026a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026aa   ec58     call    0x0036b0, 0x0    	CALL	__moduint
0026ac   f01b
0026ae   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0026b0   0e04     movlw   0x04             	MOVLW	0x04
0026b2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0026b4   0e30     movlw   0x30             	MOVLW	0x30
0026b6   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0026b8   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0026ba   ffe5
0026bc   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0026be   ffe9
0026c0   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0026c2   fff3
0026c4   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0026c6   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0026c8   f020
                                           ;	.line	75; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0026ca   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0026cc   0e0a     movlw   0x0a             	MOVLW	0x0a
0026ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026d0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0026d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026d4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0026d6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026d8   ecb5     call    0x00376a, 0x0    	CALL	__divuint
0026da   f01b
0026dc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0026de   0e04     movlw   0x04             	MOVLW	0x04
0026e0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	76; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + val;
0026e2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0026e4   0f02     addlw   0x02             	ADDLW	0x02
0026e6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0026e8   0e00     movlw   0x00             	MOVLW	0x00
0026ea   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0026ec   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0026ee   0e00     movlw   0x00             	MOVLW	0x00
0026f0   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0026f2   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0026f4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0026f6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0026f8   0e30     movlw   0x30             	MOVLW	0x30
0026fa   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0026fc   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0026fe   ffe5
002700   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002702   ffe9
002704   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002706   fff3
002708   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00270a   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00270c   f020
                                           ;	.line	77; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
00270e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002710   0f01     addlw   0x01             	ADDLW	0x01
002712   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002714   0e00     movlw   0x00             	MOVLW	0x00
002716   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002718   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00271a   0e00     movlw   0x00             	MOVLW	0x00
00271c   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
00271e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002720   0e20     movlw   0x20             	MOVLW	0x20
002722   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002724   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002726   ffe9
002728   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
00272a   fff3
00272c   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00272e   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002730   f020
                                           ;	.line	78; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
002732   0e20     movlw   0x20             	MOVLW	0x20
002734   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002736   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
002738   ffe9
00273a   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
00273c   fff3
00273e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002740   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002742   f020
                                           ;	.line	79; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = 0;
002744   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002746   0f05     addlw   0x05             	ADDLW	0x05
002748   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00274a   0e00     movlw   0x00             	MOVLW	0x00
00274c   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00274e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002750   0e00     movlw   0x00             	MOVLW	0x00
002752   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002754   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002756   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002758   ffe9
00275a   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
00275c   fff3
00275e   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002760   f020
002762   d0e6     bra     0x002930         	BRA	_00485_DS_
                                           _00477_DS_:
                                           ;	.line	80; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 9) {
002764   0e00     movlw   0x00             	MOVLW	0x00
002766   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
002768   e102     bnz     0x00276e         	BNZ	_00502_DS_
00276a   0e0a     movlw   0x0a             	MOVLW	0x0a
00276c   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00502_DS_:
00276e   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
002770   d07f     bra     0x002870         	BRA	_00474_DS_
                                           ;	.line	81; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + (val % 10);
002772   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002774   0f04     addlw   0x04             	ADDLW	0x04
002776   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002778   0e00     movlw   0x00             	MOVLW	0x00
00277a   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00277c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00277e   0e00     movlw   0x00             	MOVLW	0x00
002780   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002782   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002784   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002786   0e0a     movlw   0x0a             	MOVLW	0x0a
002788   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00278a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00278c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00278e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002790   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002792   ec58     call    0x0036b0, 0x0    	CALL	__moduint
002794   f01b
002796   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002798   0e04     movlw   0x04             	MOVLW	0x04
00279a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00279c   0e30     movlw   0x30             	MOVLW	0x30
00279e   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0027a0   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0027a2   ffe5
0027a4   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0027a6   ffe9
0027a8   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0027aa   fff3
0027ac   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0027ae   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0027b0   f020
                                           ;	.line	82; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
0027b2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0027b4   0e0a     movlw   0x0a             	MOVLW	0x0a
0027b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0027b8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0027ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0027bc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0027be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0027c0   ecb5     call    0x00376a, 0x0    	CALL	__divuint
0027c2   f01b
0027c4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0027c6   0e04     movlw   0x04             	MOVLW	0x04
0027c8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	83; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = '0' + val;
0027ca   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0027cc   0f03     addlw   0x03             	ADDLW	0x03
0027ce   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0027d0   0e00     movlw   0x00             	MOVLW	0x00
0027d2   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0027d4   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0027d6   0e00     movlw   0x00             	MOVLW	0x00
0027d8   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0027da   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0027dc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0027de   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0027e0   0e30     movlw   0x30             	MOVLW	0x30
0027e2   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0027e4   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0027e6   ffe5
0027e8   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0027ea   ffe9
0027ec   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0027ee   fff3
0027f0   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0027f2   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0027f4   f020
                                           ;	.line	84; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
0027f6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0027f8   0f02     addlw   0x02             	ADDLW	0x02
0027fa   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0027fc   0e00     movlw   0x00             	MOVLW	0x00
0027fe   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002800   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002802   0e00     movlw   0x00             	MOVLW	0x00
002804   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002806   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002808   0e20     movlw   0x20             	MOVLW	0x20
00280a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00280c   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
00280e   ffe9
002810   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002812   fff3
002814   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
002816   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002818   f020
                                           ;	.line	85; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
00281a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00281c   0f01     addlw   0x01             	ADDLW	0x01
00281e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002820   0e00     movlw   0x00             	MOVLW	0x00
002822   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002824   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002826   0e00     movlw   0x00             	MOVLW	0x00
002828   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
00282a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00282c   0e20     movlw   0x20             	MOVLW	0x20
00282e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002830   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002832   ffe9
002834   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002836   fff3
002838   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00283a   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00283c   f020
                                           ;	.line	86; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
00283e   0e20     movlw   0x20             	MOVLW	0x20
002840   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002842   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
002844   ffe9
002846   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
002848   fff3
00284a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00284c   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00284e   f020
                                           ;	.line	87; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = 0;
002850   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002852   0f05     addlw   0x05             	ADDLW	0x05
002854   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002856   0e00     movlw   0x00             	MOVLW	0x00
002858   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00285a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00285c   0e00     movlw   0x00             	MOVLW	0x00
00285e   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002860   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002862   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002864   ffe9
002866   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002868   fff3
00286a   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00286c   f020
00286e   d060     bra     0x002930         	BRA	_00485_DS_
                                           _00474_DS_:
                                           ;	.line	89; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[4] = '0' + val;
002870   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002872   0f04     addlw   0x04             	ADDLW	0x04
002874   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002876   0e00     movlw   0x00             	MOVLW	0x00
002878   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00287a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00287c   0e00     movlw   0x00             	MOVLW	0x00
00287e   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002880   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002882   0e30     movlw   0x30             	MOVLW	0x30
002884   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002886   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002888   ffe5
00288a   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
00288c   ffe9
00288e   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
002890   fff3
002892   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
002894   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002896   f020
                                           ;	.line	90; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = ' ';
002898   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00289a   0f03     addlw   0x03             	ADDLW	0x03
00289c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00289e   0e00     movlw   0x00             	MOVLW	0x00
0028a0   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0028a2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0028a4   0e00     movlw   0x00             	MOVLW	0x00
0028a6   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0028a8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0028aa   0e20     movlw   0x20             	MOVLW	0x20
0028ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0028ae   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0028b0   ffe9
0028b2   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0028b4   fff3
0028b6   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0028b8   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0028ba   f020
                                           ;	.line	91; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = ' ';
0028bc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0028be   0f02     addlw   0x02             	ADDLW	0x02
0028c0   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0028c2   0e00     movlw   0x00             	MOVLW	0x00
0028c4   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0028c6   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0028c8   0e00     movlw   0x00             	MOVLW	0x00
0028ca   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0028cc   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0028ce   0e20     movlw   0x20             	MOVLW	0x20
0028d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0028d2   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0028d4   ffe9
0028d6   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0028d8   fff3
0028da   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0028dc   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
0028de   f020
                                           ;	.line	92; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
0028e0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0028e2   0f01     addlw   0x01             	ADDLW	0x01
0028e4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0028e6   0e00     movlw   0x00             	MOVLW	0x00
0028e8   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
0028ea   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0028ec   0e00     movlw   0x00             	MOVLW	0x00
0028ee   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
0028f0   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0028f2   0e20     movlw   0x20             	MOVLW	0x20
0028f4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0028f6   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0028f8   ffe9
0028fa   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0028fc   fff3
0028fe   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
002900   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002902   f020
                                           ;	.line	93; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
002904   0e20     movlw   0x20             	MOVLW	0x20
002906   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002908   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
00290a   ffe9
00290c   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
00290e   fff3
002910   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002912   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002914   f020
                                           ;	.line	94; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[5] = 0;
002916   0e05     movlw   0x05             	MOVLW	0x05
002918   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
00291a   0e00     movlw   0x00             	MOVLW	0x00
00291c   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00291e   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
002920   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002922   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
002924   ffe9
002926   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
002928   fff3
00292a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00292c   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
00292e   f020
                                           _00485_DS_:
002930   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
002932   f008
002934   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
002936   f007
002938   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
00293a   f006
00293c   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
00293e   f005
002940   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002942   f004
002944   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002946   f003
002948   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00294a   f002
00294c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00294e   f001
002950   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002952   f000
002954   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002956   ffd9
002958   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__byte2dec	code
                                           _byte2dec:
                                           ;	.line	27; ../my_sdcc_lib/rosso_sdcc_conversion.h	void byte2dec(uint8_t val, uint8_t *s) {
002caa   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002cac   ffe5
002cae   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002cb0   ffd9
002cb2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002cb4   ffe5
002cb6   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002cb8   ffe5
002cba   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002cbc   ffe5
002cbe   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002cc0   ffe5
002cc2   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002cc4   ffe5
002cc6   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
002cc8   ffe5
002cca   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
002ccc   ffe5
002cce   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002cd0   ffe5
002cd2   0e02     movlw   0x02             	MOVLW	0x02
002cd4   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002cd6   f000
002cd8   0e03     movlw   0x03             	MOVLW	0x03
002cda   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002cdc   f001
002cde   0e04     movlw   0x04             	MOVLW	0x04
002ce0   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
002ce2   f002
002ce4   0e05     movlw   0x05             	MOVLW	0x05
002ce6   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
002ce8   f003
                                           ;	.line	28; ../my_sdcc_lib/rosso_sdcc_conversion.h	if (val > 99) {
002cea   0e64     movlw   0x64             	MOVLW	0x64
002cec   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
002cee   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
002cf0   d069     bra     0x002dc4         	BRA	_00457_DS_
                                           ;	.line	29; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + (val % 10);
002cf2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002cf4   0f02     addlw   0x02             	ADDLW	0x02
002cf6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002cf8   0e00     movlw   0x00             	MOVLW	0x00
002cfa   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
002cfc   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002cfe   0e00     movlw   0x00             	MOVLW	0x00
002d00   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002d02   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002d04   0e0a     movlw   0x0a             	MOVLW	0x0a
002d06   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d08   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002d0a   ffe5
002d0c   ecd5     call    0x003baa, 0x0    	CALL	__moduchar
002d0e   f01d
002d10   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002d12   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002d14   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002d16   0e30     movlw   0x30             	MOVLW	0x30
002d18   2607     addwf   0x07, 0x1, 0x0   	ADDWF	r0x07, F
002d1a   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002d1c   ffe5
002d1e   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
002d20   ffe9
002d22   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
002d24   fff3
002d26   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
002d28   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002d2a   f020
                                           ;	.line	30; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
002d2c   0e0a     movlw   0x0a             	MOVLW	0x0a
002d2e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d30   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002d32   ffe5
002d34   ec9a     call    0x003b34, 0x0    	CALL	__divuchar
002d36   f01d
002d38   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002d3a   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002d3c   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
                                           ;	.line	31; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = '0' + (val % 10);
002d3e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002d40   0f01     addlw   0x01             	ADDLW	0x01
002d42   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002d44   0e00     movlw   0x00             	MOVLW	0x00
002d46   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
002d48   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002d4a   0e00     movlw   0x00             	MOVLW	0x00
002d4c   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002d4e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002d50   0e0a     movlw   0x0a             	MOVLW	0x0a
002d52   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d54   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002d56   ffe5
002d58   ecd5     call    0x003baa, 0x0    	CALL	__moduchar
002d5a   f01d
002d5c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002d5e   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002d60   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002d62   0e30     movlw   0x30             	MOVLW	0x30
002d64   2607     addwf   0x07, 0x1, 0x0   	ADDWF	r0x07, F
002d66   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002d68   ffe5
002d6a   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
002d6c   ffe9
002d6e   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
002d70   fff3
002d72   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
002d74   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002d76   f020
                                           ;	.line	32; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
002d78   0e0a     movlw   0x0a             	MOVLW	0x0a
002d7a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d7c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002d7e   ffe5
002d80   ec9a     call    0x003b34, 0x0    	CALL	__divuchar
002d82   f01d
002d84   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002d86   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002d88   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
                                           ;	.line	33; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = '0' + val;
002d8a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002d8c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002d8e   0e30     movlw   0x30             	MOVLW	0x30
002d90   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
002d92   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002d94   ffe5
002d96   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
002d98   ffe9
002d9a   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
002d9c   fff3
002d9e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002da0   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002da2   f020
                                           ;	.line	34; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = 0;
002da4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002da6   0f03     addlw   0x03             	ADDLW	0x03
002da8   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002daa   0e00     movlw   0x00             	MOVLW	0x00
002dac   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
002dae   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002db0   0e00     movlw   0x00             	MOVLW	0x00
002db2   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002db4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002db6   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
002db8   ffe9
002dba   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
002dbc   fff3
002dbe   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002dc0   f020
002dc2   d095     bra     0x002eee         	BRA	_00459_DS_
                                           _00457_DS_:
                                           ;	.line	35; ../my_sdcc_lib/rosso_sdcc_conversion.h	} else if (val > 9) {
002dc4   0e0a     movlw   0x0a             	MOVLW	0x0a
002dc6   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
002dc8   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
002dca   d055     bra     0x002e76         	BRA	_00454_DS_
                                           ;	.line	36; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + (val % 10);
002dcc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002dce   0f02     addlw   0x02             	ADDLW	0x02
002dd0   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002dd2   0e00     movlw   0x00             	MOVLW	0x00
002dd4   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
002dd6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002dd8   0e00     movlw   0x00             	MOVLW	0x00
002dda   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002ddc   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002dde   0e0a     movlw   0x0a             	MOVLW	0x0a
002de0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002de2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002de4   ffe5
002de6   ecd5     call    0x003baa, 0x0    	CALL	__moduchar
002de8   f01d
002dea   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002dec   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002dee   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002df0   0e30     movlw   0x30             	MOVLW	0x30
002df2   2607     addwf   0x07, 0x1, 0x0   	ADDWF	r0x07, F
002df4   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002df6   ffe5
002df8   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
002dfa   ffe9
002dfc   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
002dfe   fff3
002e00   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
002e02   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002e04   f020
                                           ;	.line	37; ../my_sdcc_lib/rosso_sdcc_conversion.h	val /= 10;
002e06   0e0a     movlw   0x0a             	MOVLW	0x0a
002e08   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e0a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002e0c   ffe5
002e0e   ec9a     call    0x003b34, 0x0    	CALL	__divuchar
002e10   f01d
002e12   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002e14   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002e16   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
                                           ;	.line	38; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = '0' + val;
002e18   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002e1a   0f01     addlw   0x01             	ADDLW	0x01
002e1c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002e1e   0e00     movlw   0x00             	MOVLW	0x00
002e20   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
002e22   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002e24   0e00     movlw   0x00             	MOVLW	0x00
002e26   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002e28   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002e2a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002e2c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002e2e   0e30     movlw   0x30             	MOVLW	0x30
002e30   2607     addwf   0x07, 0x1, 0x0   	ADDWF	r0x07, F
002e32   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002e34   ffe5
002e36   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
002e38   ffe9
002e3a   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
002e3c   fff3
002e3e   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
002e40   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002e42   f020
                                           ;	.line	39; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
002e44   0e20     movlw   0x20             	MOVLW	0x20
002e46   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e48   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
002e4a   ffe9
002e4c   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
002e4e   fff3
002e50   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002e52   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002e54   f020
                                           ;	.line	40; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = 0;
002e56   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002e58   0f03     addlw   0x03             	ADDLW	0x03
002e5a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002e5c   0e00     movlw   0x00             	MOVLW	0x00
002e5e   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
002e60   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002e62   0e00     movlw   0x00             	MOVLW	0x00
002e64   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002e66   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002e68   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
002e6a   ffe9
002e6c   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
002e6e   fff3
002e70   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002e72   f020
002e74   d03c     bra     0x002eee         	BRA	_00459_DS_
                                           _00454_DS_:
                                           ;	.line	42; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[2] = '0' + val;
002e76   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002e78   0f02     addlw   0x02             	ADDLW	0x02
002e7a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002e7c   0e00     movlw   0x00             	MOVLW	0x00
002e7e   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
002e80   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002e82   0e00     movlw   0x00             	MOVLW	0x00
002e84   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002e86   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002e88   0e30     movlw   0x30             	MOVLW	0x30
002e8a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002e8c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002e8e   ffe5
002e90   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
002e92   ffe9
002e94   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
002e96   fff3
002e98   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
002e9a   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002e9c   f020
                                           ;	.line	43; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[1] = ' ';
002e9e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002ea0   0f01     addlw   0x01             	ADDLW	0x01
002ea2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002ea4   0e00     movlw   0x00             	MOVLW	0x00
002ea6   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
002ea8   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002eaa   0e00     movlw   0x00             	MOVLW	0x00
002eac   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
002eae   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002eb0   0e20     movlw   0x20             	MOVLW	0x20
002eb2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002eb4   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002eb6   ffe9
002eb8   c004     movff   0x004, 0xff3     	MOVFF	r0x04, PRODL
002eba   fff3
002ebc   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
002ebe   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002ec0   f020
                                           ;	.line	44; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[0] = ' ';
002ec2   0e20     movlw   0x20             	MOVLW	0x20
002ec4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ec6   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
002ec8   ffe9
002eca   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
002ecc   fff3
002ece   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002ed0   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002ed2   f020
                                           ;	.line	45; ../my_sdcc_lib/rosso_sdcc_conversion.h	s[3] = 0;
002ed4   0e03     movlw   0x03             	MOVLW	0x03
002ed6   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
002ed8   0e00     movlw   0x00             	MOVLW	0x00
002eda   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002edc   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
002ede   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002ee0   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
002ee2   ffe9
002ee4   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
002ee6   fff3
002ee8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002eea   ecce     call    0x00419c, 0x0    	CALL	__gptrput1
002eec   f020
                                           _00459_DS_:
002eee   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
002ef0   f007
002ef2   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
002ef4   f006
002ef6   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002ef8   f005
002efa   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002efc   f004
002efe   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002f00   f003
002f02   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002f04   f002
002f06   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002f08   f001
002f0a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002f0c   f000
002f0e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002f10   ffd9
002f12   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__nibble2hex	code
                                           _nibble2hex:
                                           ;	.line	19; ../my_sdcc_lib/rosso_sdcc_conversion.h	uint8_t nibble2hex(uint8_t val) {
003f02   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003f04   ffe5
003f06   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003f08   ffd9
003f0a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003f0c   ffe5
003f0e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003f10   ffe5
003f12   0e02     movlw   0x02             	MOVLW	0x02
003f14   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003f16   f000
                                           ;	.line	21; ../my_sdcc_lib/rosso_sdcc_conversion.h	s = '0' + (val & 0xf);
003f18   0e0f     movlw   0x0f             	MOVLW	0x0f
003f1a   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
003f1c   0e30     movlw   0x30             	MOVLW	0x30
003f1e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
                                           ;	.line	22; ../my_sdcc_lib/rosso_sdcc_conversion.h	if (s > '9')
003f20   0e3a     movlw   0x3a             	MOVLW	0x3a
003f22   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
003f24   e305     bnc     0x003f30         	BNC	_00441_DS_
                                           ;	.line	23; ../my_sdcc_lib/rosso_sdcc_conversion.h	s += 'A' - '9' - 1;
003f26   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003f28   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003f2a   0e07     movlw   0x07             	MOVLW	0x07
003f2c   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
003f2e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00441_DS_:
                                           ;	.line	24; ../my_sdcc_lib/rosso_sdcc_conversion.h	return s;
003f30   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003f32   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003f34   f001
003f36   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003f38   f000
003f3a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003f3c   ffd9
003f3e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__bcdtodec	code
                                           _bcdtodec:
                                           ;	.line	15; ../my_sdcc_lib/rosso_sdcc_conversion.h	uint8_t bcdtodec(uint8_t pValue) {
004076   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004078   ffe5
00407a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00407c   ffd9
00407e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004080   ffe5
004082   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004084   ffe5
004086   0e02     movlw   0x02             	MOVLW	0x02
004088   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00408a   f000
                                           ;	.line	16; ../my_sdcc_lib/rosso_sdcc_conversion.h	return ((pValue >> 4) * 10 + (pValue & 0x0F));
00408c   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
00408e   0b0f     andlw   0x0f             	ANDLW	0x0f
                                           ; #	MOVWF	r0x01
                                           ; #;;multiply lit val:0x0a by variable r0x01 and store in r0x01
                                           ; #	MOVF	r0x01, W
004090   0d0a     mullw   0x0a             	MULLW	0x0a
004092   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
004094   f001
004096   0e0f     movlw   0x0f             	MOVLW	0x0f
004098   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
00409a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00409c   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
00409e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0040a0   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0040a2   f001
0040a4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0040a6   f000
0040a8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0040aa   ffd9
0040ac   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__dectobcd	code
                                           _dectobcd:
                                           ;	.line	11; ../my_sdcc_lib/rosso_sdcc_conversion.h	uint8_t dectobcd(uint8_t pValue) {
003dc2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003dc4   ffe5
003dc6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003dc8   ffd9
003dca   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003dcc   ffe5
003dce   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003dd0   ffe5
003dd2   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003dd4   ffe5
003dd6   0e02     movlw   0x02             	MOVLW	0x02
003dd8   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003dda   f000
                                           ;	.line	12; ../my_sdcc_lib/rosso_sdcc_conversion.h	return (((pValue / 10) << 4) | (pValue % 10));
003ddc   0e0a     movlw   0x0a             	MOVLW	0x0a
003dde   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003de0   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003de2   ffe5
003de4   ec9a     call    0x003b34, 0x0    	CALL	__divuchar
003de6   f01d
003de8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003dea   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
003dec   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
003dee   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
003df0   0bf0     andlw   0xf0             	ANDLW	0xf0
003df2   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
003df4   0e0a     movlw   0x0a             	MOVLW	0x0a
003df6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003df8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003dfa   ffe5
003dfc   ecd5     call    0x003baa, 0x0    	CALL	__moduchar
003dfe   f01d
003e00   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
003e02   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
003e04   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
003e06   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003e08   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
003e0a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003e0c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003e0e   f002
003e10   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003e12   f001
003e14   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003e16   f000
003e18   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003e1a   ffd9
003e1c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_init	code
                                           _lcd_init:
                                           ;	.line	225; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_init(CHIP chipset) {
00295a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00295c   ffe5
00295e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002960   ffd9
002962   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002964   ffe5
002966   0e02     movlw   0x02             	MOVLW	0x02
002968   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00296a   f000
                                           ;	.line	244; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS_DIR = 0;
00296c   9296     bcf     0x96, 0x1, 0x0   	BCF	_TRISEbits, 1
                                           ;	.line	245; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_EN_DIR = 0;
00296e   9496     bcf     0x96, 0x2, 0x0   	BCF	_TRISEbits, 2
                                           ;	.line	246; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D4_DIR = 0;
002970   9893     bcf     0x93, 0x4, 0x0   	BCF	_TRISBbits, 4
                                           ;	.line	247; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D5_DIR = 0;
002972   9a93     bcf     0x93, 0x5, 0x0   	BCF	_TRISBbits, 5
                                           ;	.line	248; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D6_DIR = 0;
002974   9c93     bcf     0x93, 0x6, 0x0   	BCF	_TRISBbits, 6
                                           ;	.line	249; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D7_DIR = 0;
002976   9e93     bcf     0x93, 0x7, 0x0   	BCF	_TRISBbits, 7
                                           ;	.line	251; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS = 0; // set to control char mode
002978   928d     bcf     0x8d, 0x1, 0x0   	BCF	_LATEbits, 1
                                           ;	.line	252; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (chipset == LCD_HD44780) {
00297a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00297c   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
00297e   d09a     bra     0x002ab4         	BRA	_00414_DS_
                                           ;	.line	253; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_25ms(); // power-up delay (> 15 ms)
002980   0e28     movlw   0x28             	MOVLW	0x28
002982   ecca     call    0x003994, 0x0    	CALL	_delay10ktcy
002984   f01c
                                           ;	.line	254; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011); // function set
002986   0e03     movlw   0x03             	MOVLW	0x03
002988   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00298a   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
00298c   f01d
00298e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	255; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_5ms(); // > 4.1 milliseconds
002990   0e50     movlw   0x50             	MOVLW	0x50
002992   ecb7     call    0x00396e, 0x0    	CALL	_delay1ktcy
002994   f01c
                                           ;	.line	256; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011); // function set
002996   0e03     movlw   0x03             	MOVLW	0x03
002998   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00299a   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
00299c   f01d
00299e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	257; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_100us(); // > 100 us
0029a0   0ea0     movlw   0xa0             	MOVLW	0xa0
0029a2   ecf6     call    0x0039ec, 0x0    	CALL	_delay10tcy
0029a4   f01c
                                           ;	.line	258; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011); // function set
0029a6   0e03     movlw   0x03             	MOVLW	0x03
0029a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029aa   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
0029ac   f01d
0029ae   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	259; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
0029b0   0e38     movlw   0x38             	MOVLW	0x38
0029b2   ecf6     call    0x0039ec, 0x0    	CALL	_delay10tcy
0029b4   f01c
0029b6   0000     nop                      	nop	
0029b8   0000     nop                      	nop	
0029ba   0000     nop                      	nop	
0029bc   0000     nop                      	nop	
0029be   0000     nop                      	nop	
0029c0   0000     nop                      	nop	
0029c2   0000     nop                      	nop	
0029c4   0000     nop                      	nop	
0029c6   0000     nop                      	nop	
0029c8   0000     nop                      	nop	
0029ca   0000     nop                      	nop	
0029cc   0000     nop                      	nop	
0029ce   0000     nop                      	nop	
0029d0   0000     nop                      	nop	
0029d2   0000     nop                      	nop	
0029d4   0000     nop                      	nop	
0029d6   0000     nop                      	nop	
0029d8   0000     nop                      	nop	
0029da   0000     nop                      	nop	
0029dc   0000     nop                      	nop	
0029de   0000     nop                      	nop	
0029e0   0000     nop                      	nop	
0029e2   0000     nop                      	nop	
0029e4   0000     nop                      	nop	
0029e6   0000     nop                      	nop	
0029e8   0000     nop                      	nop	
0029ea   0000     nop                      	nop	
0029ec   0000     nop                      	nop	
0029ee   0000     nop                      	nop	
0029f0   0000     nop                      	nop	
0029f2   0000     nop                      	nop	
0029f4   0000     nop                      	nop	
0029f6   0000     nop                      	nop	
0029f8   0000     nop                      	nop	
0029fa   0000     nop                      	nop	
0029fc   0000     nop                      	nop	
0029fe   0000     nop                      	nop	
002a00   0000     nop                      	nop	
002a02   0000     nop                      	nop	
002a04   0000     nop                      	nop	
002a06   0000     nop                      	nop	
002a08   0000     nop                      	nop	
002a0a   0000     nop                      	nop	
002a0c   0000     nop                      	nop	
002a0e   0000     nop                      	nop	
002a10   0000     nop                      	nop	
002a12   0000     nop                      	nop	
002a14   0000     nop                      	nop	
                                           ;	.line	261; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000010); // select 4-bits mode
002a16   0e02     movlw   0x02             	MOVLW	0x02
002a18   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a1a   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
002a1c   f01d
002a1e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	262; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
002a20   0e38     movlw   0x38             	MOVLW	0x38
002a22   ecf6     call    0x0039ec, 0x0    	CALL	_delay10tcy
002a24   f01c
002a26   0000     nop                      	nop	
002a28   0000     nop                      	nop	
002a2a   0000     nop                      	nop	
002a2c   0000     nop                      	nop	
002a2e   0000     nop                      	nop	
002a30   0000     nop                      	nop	
002a32   0000     nop                      	nop	
002a34   0000     nop                      	nop	
002a36   0000     nop                      	nop	
002a38   0000     nop                      	nop	
002a3a   0000     nop                      	nop	
002a3c   0000     nop                      	nop	
002a3e   0000     nop                      	nop	
002a40   0000     nop                      	nop	
002a42   0000     nop                      	nop	
002a44   0000     nop                      	nop	
002a46   0000     nop                      	nop	
002a48   0000     nop                      	nop	
002a4a   0000     nop                      	nop	
002a4c   0000     nop                      	nop	
002a4e   0000     nop                      	nop	
002a50   0000     nop                      	nop	
002a52   0000     nop                      	nop	
002a54   0000     nop                      	nop	
002a56   0000     nop                      	nop	
002a58   0000     nop                      	nop	
002a5a   0000     nop                      	nop	
002a5c   0000     nop                      	nop	
002a5e   0000     nop                      	nop	
002a60   0000     nop                      	nop	
002a62   0000     nop                      	nop	
002a64   0000     nop                      	nop	
002a66   0000     nop                      	nop	
002a68   0000     nop                      	nop	
002a6a   0000     nop                      	nop	
002a6c   0000     nop                      	nop	
002a6e   0000     nop                      	nop	
002a70   0000     nop                      	nop	
002a72   0000     nop                      	nop	
002a74   0000     nop                      	nop	
002a76   0000     nop                      	nop	
002a78   0000     nop                      	nop	
002a7a   0000     nop                      	nop	
002a7c   0000     nop                      	nop	
002a7e   0000     nop                      	nop	
002a80   0000     nop                      	nop	
002a82   0000     nop                      	nop	
002a84   0000     nop                      	nop	
                                           ;	.line	264; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00101000); // 2 lines, 5x8 dots font
002a86   0e28     movlw   0x28             	MOVLW	0x28
002a88   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a8a   ec57     call    0x0040ae, 0x0    	CALL	__lcd_write_command
002a8c   f020
002a8e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	265; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00011100); // cursor (not data) move right
002a90   0e1c     movlw   0x1c             	MOVLW	0x1c
002a92   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a94   ec57     call    0x0040ae, 0x0    	CALL	__lcd_write_command
002a96   f020
002a98   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	266; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00001100); // display on, cursor off, no blink
002a9a   0e0c     movlw   0x0c             	MOVLW	0x0c
002a9c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a9e   ec57     call    0x0040ae, 0x0    	CALL	__lcd_write_command
002aa0   f020
002aa2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	267; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00000110); // cursor shift right, no data shift
002aa4   0e06     movlw   0x06             	MOVLW	0x06
002aa6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002aa8   ec57     call    0x0040ae, 0x0    	CALL	__lcd_write_command
002aaa   f020
002aac   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	269; ../my_sdcc_lib/rosso_sdcc_lcd4.h	lcd_clear_screen(); // clear display
002aae   ecb1     call    0x004162, 0x0    	CALL	_lcd_clear_screen
002ab0   f020
002ab2   d0f6     bra     0x002ca0         	BRA	_00416_DS_
                                           _00414_DS_:
                                           ;	.line	270; ../my_sdcc_lib/rosso_sdcc_lcd4.h	} else if (chipset == LCD_ST7066U) {
002ab4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002ab6   0a01     xorlw   0x01             	XORLW	0x01
002ab8   e001     bz      0x002abc         	BZ	_00425_DS_
002aba   d0f2     bra     0x002ca0         	BRA	_00416_DS_
                                           _00425_DS_:
                                           ;	.line	271; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011);
002abc   0e03     movlw   0x03             	MOVLW	0x03
002abe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ac0   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
002ac2   f01d
002ac4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	272; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
002ac6   0e40     movlw   0x40             	MOVLW	0x40
002ac8   ecf6     call    0x0039ec, 0x0    	CALL	_delay10tcy
002aca   f01c
                                           ;	.line	273; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000010);
002acc   0e02     movlw   0x02             	MOVLW	0x02
002ace   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ad0   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
002ad2   f01d
002ad4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	274; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00001100);
002ad6   0e0c     movlw   0x0c             	MOVLW	0x0c
002ad8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ada   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
002adc   f01d
002ade   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	275; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
002ae0   0e40     movlw   0x40             	MOVLW	0x40
002ae2   ecf6     call    0x0039ec, 0x0    	CALL	_delay10tcy
002ae4   f01c
                                           ;	.line	276; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000010);
002ae6   0e02     movlw   0x02             	MOVLW	0x02
002ae8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002aea   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
002aec   f01d
002aee   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	277; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00001100);
002af0   0e0c     movlw   0x0c             	MOVLW	0x0c
002af2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002af4   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
002af6   f01d
002af8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	278; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
002afa   0e38     movlw   0x38             	MOVLW	0x38
002afc   ecf6     call    0x0039ec, 0x0    	CALL	_delay10tcy
002afe   f01c
002b00   0000     nop                      	nop	
002b02   0000     nop                      	nop	
002b04   0000     nop                      	nop	
002b06   0000     nop                      	nop	
002b08   0000     nop                      	nop	
002b0a   0000     nop                      	nop	
002b0c   0000     nop                      	nop	
002b0e   0000     nop                      	nop	
002b10   0000     nop                      	nop	
002b12   0000     nop                      	nop	
002b14   0000     nop                      	nop	
002b16   0000     nop                      	nop	
002b18   0000     nop                      	nop	
002b1a   0000     nop                      	nop	
002b1c   0000     nop                      	nop	
002b1e   0000     nop                      	nop	
002b20   0000     nop                      	nop	
002b22   0000     nop                      	nop	
002b24   0000     nop                      	nop	
002b26   0000     nop                      	nop	
002b28   0000     nop                      	nop	
002b2a   0000     nop                      	nop	
002b2c   0000     nop                      	nop	
002b2e   0000     nop                      	nop	
002b30   0000     nop                      	nop	
002b32   0000     nop                      	nop	
002b34   0000     nop                      	nop	
002b36   0000     nop                      	nop	
002b38   0000     nop                      	nop	
002b3a   0000     nop                      	nop	
002b3c   0000     nop                      	nop	
002b3e   0000     nop                      	nop	
002b40   0000     nop                      	nop	
002b42   0000     nop                      	nop	
002b44   0000     nop                      	nop	
002b46   0000     nop                      	nop	
002b48   0000     nop                      	nop	
002b4a   0000     nop                      	nop	
002b4c   0000     nop                      	nop	
002b4e   0000     nop                      	nop	
002b50   0000     nop                      	nop	
002b52   0000     nop                      	nop	
002b54   0000     nop                      	nop	
002b56   0000     nop                      	nop	
002b58   0000     nop                      	nop	
002b5a   0000     nop                      	nop	
002b5c   0000     nop                      	nop	
002b5e   0000     nop                      	nop	
                                           ;	.line	280; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // display on / off
002b60   0e00     movlw   0x00             	MOVLW	0x00
002b62   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b64   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
002b66   f01d
002b68   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	281; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00001100);
002b6a   0e0c     movlw   0x0c             	MOVLW	0x0c
002b6c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b6e   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
002b70   f01d
002b72   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	282; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
002b74   0e38     movlw   0x38             	MOVLW	0x38
002b76   ecf6     call    0x0039ec, 0x0    	CALL	_delay10tcy
002b78   f01c
002b7a   0000     nop                      	nop	
002b7c   0000     nop                      	nop	
002b7e   0000     nop                      	nop	
002b80   0000     nop                      	nop	
002b82   0000     nop                      	nop	
002b84   0000     nop                      	nop	
002b86   0000     nop                      	nop	
002b88   0000     nop                      	nop	
002b8a   0000     nop                      	nop	
002b8c   0000     nop                      	nop	
002b8e   0000     nop                      	nop	
002b90   0000     nop                      	nop	
002b92   0000     nop                      	nop	
002b94   0000     nop                      	nop	
002b96   0000     nop                      	nop	
002b98   0000     nop                      	nop	
002b9a   0000     nop                      	nop	
002b9c   0000     nop                      	nop	
002b9e   0000     nop                      	nop	
002ba0   0000     nop                      	nop	
002ba2   0000     nop                      	nop	
002ba4   0000     nop                      	nop	
002ba6   0000     nop                      	nop	
002ba8   0000     nop                      	nop	
002baa   0000     nop                      	nop	
002bac   0000     nop                      	nop	
002bae   0000     nop                      	nop	
002bb0   0000     nop                      	nop	
002bb2   0000     nop                      	nop	
002bb4   0000     nop                      	nop	
002bb6   0000     nop                      	nop	
002bb8   0000     nop                      	nop	
002bba   0000     nop                      	nop	
002bbc   0000     nop                      	nop	
002bbe   0000     nop                      	nop	
002bc0   0000     nop                      	nop	
002bc2   0000     nop                      	nop	
002bc4   0000     nop                      	nop	
002bc6   0000     nop                      	nop	
002bc8   0000     nop                      	nop	
002bca   0000     nop                      	nop	
002bcc   0000     nop                      	nop	
002bce   0000     nop                      	nop	
002bd0   0000     nop                      	nop	
002bd2   0000     nop                      	nop	
002bd4   0000     nop                      	nop	
002bd6   0000     nop                      	nop	
002bd8   0000     nop                      	nop	
                                           ;	.line	284; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // display clear
002bda   0e00     movlw   0x00             	MOVLW	0x00
002bdc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bde   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
002be0   f01d
002be2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	285; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000001);
002be4   0e01     movlw   0x01             	MOVLW	0x01
002be6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002be8   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
002bea   f01d
002bec   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	286; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
002bee   0ea0     movlw   0xa0             	MOVLW	0xa0
002bf0   ece3     call    0x0039c6, 0x0    	CALL	_delay100tcy
002bf2   f01c
                                           ;	.line	287; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
002bf4   0e50     movlw   0x50             	MOVLW	0x50
002bf6   ece3     call    0x0039c6, 0x0    	CALL	_delay100tcy
002bf8   f01c
                                           ;	.line	288; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
002bfa   0e40     movlw   0x40             	MOVLW	0x40
002bfc   ecf6     call    0x0039ec, 0x0    	CALL	_delay10tcy
002bfe   f01c
                                           ;	.line	289; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // entry mode set
002c00   0e00     movlw   0x00             	MOVLW	0x00
002c02   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c04   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
002c06   f01d
002c08   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	290; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000110);
002c0a   0e06     movlw   0x06             	MOVLW	0x06
002c0c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c0e   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
002c10   f01d
002c12   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	291; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
002c14   0e38     movlw   0x38             	MOVLW	0x38
002c16   ecf6     call    0x0039ec, 0x0    	CALL	_delay10tcy
002c18   f01c
002c1a   0000     nop                      	nop	
002c1c   0000     nop                      	nop	
002c1e   0000     nop                      	nop	
002c20   0000     nop                      	nop	
002c22   0000     nop                      	nop	
002c24   0000     nop                      	nop	
002c26   0000     nop                      	nop	
002c28   0000     nop                      	nop	
002c2a   0000     nop                      	nop	
002c2c   0000     nop                      	nop	
002c2e   0000     nop                      	nop	
002c30   0000     nop                      	nop	
002c32   0000     nop                      	nop	
002c34   0000     nop                      	nop	
002c36   0000     nop                      	nop	
002c38   0000     nop                      	nop	
002c3a   0000     nop                      	nop	
002c3c   0000     nop                      	nop	
002c3e   0000     nop                      	nop	
002c40   0000     nop                      	nop	
002c42   0000     nop                      	nop	
002c44   0000     nop                      	nop	
002c46   0000     nop                      	nop	
002c48   0000     nop                      	nop	
002c4a   0000     nop                      	nop	
002c4c   0000     nop                      	nop	
002c4e   0000     nop                      	nop	
002c50   0000     nop                      	nop	
002c52   0000     nop                      	nop	
002c54   0000     nop                      	nop	
002c56   0000     nop                      	nop	
002c58   0000     nop                      	nop	
002c5a   0000     nop                      	nop	
002c5c   0000     nop                      	nop	
002c5e   0000     nop                      	nop	
002c60   0000     nop                      	nop	
002c62   0000     nop                      	nop	
002c64   0000     nop                      	nop	
002c66   0000     nop                      	nop	
002c68   0000     nop                      	nop	
002c6a   0000     nop                      	nop	
002c6c   0000     nop                      	nop	
002c6e   0000     nop                      	nop	
002c70   0000     nop                      	nop	
002c72   0000     nop                      	nop	
002c74   0000     nop                      	nop	
002c76   0000     nop                      	nop	
002c78   0000     nop                      	nop	
                                           ;	.line	293; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // display clear
002c7a   0e00     movlw   0x00             	MOVLW	0x00
002c7c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c7e   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
002c80   f01d
002c82   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	294; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000001);
002c84   0e01     movlw   0x01             	MOVLW	0x01
002c86   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c88   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
002c8a   f01d
002c8c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	295; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
002c8e   0ea0     movlw   0xa0             	MOVLW	0xa0
002c90   ece3     call    0x0039c6, 0x0    	CALL	_delay100tcy
002c92   f01c
                                           ;	.line	296; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
002c94   0e50     movlw   0x50             	MOVLW	0x50
002c96   ece3     call    0x0039c6, 0x0    	CALL	_delay100tcy
002c98   f01c
                                           ;	.line	297; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
002c9a   0e40     movlw   0x40             	MOVLW	0x40
002c9c   ecf6     call    0x0039ec, 0x0    	CALL	_delay10tcy
002c9e   f01c
                                           _00416_DS_:
002ca0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002ca2   f000
002ca4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002ca6   ffd9
002ca8   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_progress	code
                                           _lcd_progress:
                                           ;	.line	217; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_progress(uint8_t line, uint8_t amount, uint8_t pattern) {
00381a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00381c   ffe5
00381e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003820   ffd9
003822   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003824   ffe5
003826   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003828   ffe5
00382a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00382c   ffe5
00382e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003830   ffe5
003832   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
003834   ffe5
003836   0e02     movlw   0x02             	MOVLW	0x02
003838   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00383a   f000
00383c   0e03     movlw   0x03             	MOVLW	0x03
00383e   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003840   f001
003842   0e04     movlw   0x04             	MOVLW	0x04
003844   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
003846   f002
                                           ;	.line	219; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_POS = _lcd_line2index(line);
003848   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00384a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00384c   ec3a     call    0x003e74, 0x0    	CALL	__lcd_line2index
00384e   f01f
003850   010f     movlb   0xf              	BANKSEL	_LCD_POS
003852   6f14     movwf   0x14, 0x1        	MOVWF	_LCD_POS, B
003854   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	220; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
003856   ecea     call    0x0041d4, 0x0    	CALL	__lcd_restore_cursor
003858   f020
                                           ;	.line	221; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < amount; i++) lcd_write_char(pattern);
00385a   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00384_DS_:
00385c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00385e   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
003860   e207     bc      0x003870         	BC	_00381_DS_
003862   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003864   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003866   ec82     call    0x000304, 0x0    	CALL	_lcd_write_char
003868   f001
00386a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00386c   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
00386e   d7f6     bra     0x00385c         	BRA	_00384_DS_
                                           _00381_DS_:
                                           ;	.line	222; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < LCD_NR_CHARS - amount; i++) lcd_write_char(' ');
003870   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00387_DS_:
003872   c001     movff   0x001, 0x002     	MOVFF	r0x01, r0x02
003874   f002
003876   6a03     clrf    0x03, 0x0        	CLRF	r0x03
003878   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00387a   0810     sublw   0x10             	SUBLW	0x10
00387c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00387e   0e00     movlw   0x00             	MOVLW	0x00
003880   5603     subfwb  0x03, 0x1, 0x0   	SUBFWB	r0x03, F
003882   c000     movff   0x000, 0x004     	MOVFF	r0x00, r0x04
003884   f004
003886   0f80     addlw   0x80             	ADDLW	0x80
003888   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
00388a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00388c   0f80     addlw   0x80             	ADDLW	0x80
00388e   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
003890   e102     bnz     0x003896         	BNZ	_00406_DS_
003892   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003894   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
                                           _00406_DS_:
003896   e207     bc      0x0038a6         	BC	_00389_DS_
003898   0e20     movlw   0x20             	MOVLW	0x20
00389a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00389c   ec82     call    0x000304, 0x0    	CALL	_lcd_write_char
00389e   f001
0038a0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0038a2   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
0038a4   d7e6     bra     0x003872         	BRA	_00387_DS_
                                           _00389_DS_:
0038a6   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0038a8   f004
0038aa   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0038ac   f003
0038ae   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0038b0   f002
0038b2   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0038b4   f001
0038b6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0038b8   f000
0038ba   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0038bc   ffd9
0038be   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_clear_line	code
                                           _lcd_clear_line:
                                           ;	.line	206; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_clear_line(uint8_t line) {
003ebc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003ebe   ffe5
003ec0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003ec2   ffd9
003ec4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003ec6   ffe5
003ec8   0e02     movlw   0x02             	MOVLW	0x02
003eca   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003ecc   f000
                                           ;	.line	209; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_POS = _lcd_line2index(line);
003ece   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003ed0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003ed2   ec3a     call    0x003e74, 0x0    	CALL	__lcd_line2index
003ed4   f01f
003ed6   010f     movlb   0xf              	BANKSEL	_LCD_POS
003ed8   6f14     movwf   0x14, 0x1        	MOVWF	_LCD_POS, B
003eda   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	210; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
003edc   ecea     call    0x0041d4, 0x0    	CALL	__lcd_restore_cursor
003ede   f020
                                           ;	.line	212; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < LCD_NR_CHARS; i++) lcd_write_char(' ');
003ee0   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00365_DS_:
003ee2   0e20     movlw   0x20             	MOVLW	0x20
003ee4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003ee6   ec82     call    0x000304, 0x0    	CALL	_lcd_write_char
003ee8   f001
003eea   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003eec   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
003eee   0e10     movlw   0x10             	MOVLW	0x10
003ef0   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
003ef2   e3f7     bnc     0x003ee2         	BNC	_00365_DS_
                                           ;	.line	214; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
003ef4   ecea     call    0x0041d4, 0x0    	CALL	__lcd_restore_cursor
003ef6   f020
003ef8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003efa   f000
003efc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003efe   ffd9
003f00   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_home	code
                                           _lcd_home:
                                           ;	.line	200; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(LCD_RETURN_HOME);
004144   0e02     movlw   0x02             	MOVLW	0x02
004146   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004148   ec57     call    0x0040ae, 0x0    	CALL	__lcd_write_command
00414a   f020
00414c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	201; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
00414e   0ea0     movlw   0xa0             	MOVLW	0xa0
004150   ece3     call    0x0039c6, 0x0    	CALL	_delay100tcy
004152   f01c
                                           ;	.line	202; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
004154   0e50     movlw   0x50             	MOVLW	0x50
004156   ece3     call    0x0039c6, 0x0    	CALL	_delay100tcy
004158   f01c
                                           ;	.line	203; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_300us();
00415a   0e30     movlw   0x30             	MOVLW	0x30
00415c   ece3     call    0x0039c6, 0x0    	CALL	_delay100tcy
00415e   f01c
004160   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_blink_display	code
                                           _lcd_cursor_blink_display:
                                           ;	.line	190; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_blink_display(bit_t cursor, bit_t blink, bit_t display) {
003d5e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003d60   ffe5
003d62   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003d64   ffd9
003d66   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003d68   ffe5
003d6a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003d6c   ffe5
003d6e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003d70   ffe5
003d72   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003d74   ffe5
003d76   0e02     movlw   0x02             	MOVLW	0x02
003d78   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003d7a   f000
003d7c   0e03     movlw   0x03             	MOVLW	0x03
003d7e   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003d80   f001
003d82   0e04     movlw   0x04             	MOVLW	0x04
003d84   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
003d86   f002
                                           ;	.line	192; ../my_sdcc_lib/rosso_sdcc_lcd4.h	reg = LCD_DISPLAY_ONOFF;
003d88   0e08     movlw   0x08             	MOVLW	0x08
003d8a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
                                           ;	.line	193; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (display) reg = reg + 4;
003d8c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003d8e   e002     bz      0x003d94         	BZ	_00349_DS_
003d90   0e0c     movlw   0x0c             	MOVLW	0x0c
003d92   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
                                           _00349_DS_:
                                           ;	.line	194; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (cursor) reg = reg + 2;
003d94   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003d96   e002     bz      0x003d9c         	BZ	_00351_DS_
003d98   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
003d9a   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
                                           _00351_DS_:
                                           ;	.line	195; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (blink) reg = reg + 1;
003d9c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003d9e   e001     bz      0x003da2         	BZ	_00353_DS_
003da0   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
                                           _00353_DS_:
                                           ;	.line	196; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(reg);
003da2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003da4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003da6   ec57     call    0x0040ae, 0x0    	CALL	__lcd_write_command
003da8   f020
003daa   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003dac   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003dae   f003
003db0   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003db2   f002
003db4   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003db6   f001
003db8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003dba   f000
003dbc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003dbe   ffd9
003dc0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_clear_screen	code
                                           _lcd_clear_screen:
                                           ;	.line	184; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(LCD_CLEAR_DISPLAY);
004162   0e01     movlw   0x01             	MOVLW	0x01
004164   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004166   ec57     call    0x0040ae, 0x0    	CALL	__lcd_write_command
004168   f020
00416a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	185; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
00416c   0ea0     movlw   0xa0             	MOVLW	0xa0
00416e   ece3     call    0x0039c6, 0x0    	CALL	_delay100tcy
004170   f01c
                                           ;	.line	186; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
004172   0e50     movlw   0x50             	MOVLW	0x50
004174   ece3     call    0x0039c6, 0x0    	CALL	_delay100tcy
004176   f01c
                                           ;	.line	187; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_300us();
004178   0e30     movlw   0x30             	MOVLW	0x30
00417a   ece3     call    0x0039c6, 0x0    	CALL	_delay100tcy
00417c   f01c
00417e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_shift_right	code
                                           _lcd_cursor_shift_right:
                                           ;	.line	176; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_shift_right(uint8_t nr) {
003f40   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003f42   ffe5
003f44   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003f46   ffd9
003f48   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003f4a   ffe5
003f4c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003f4e   ffe5
003f50   0e02     movlw   0x02             	MOVLW	0x02
003f52   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003f54   f000
                                           ;	.line	178; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
003f56   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003f58   e00b     bz      0x003f70         	BZ	_00326_DS_
                                           ;	.line	179; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_CURSOR_SHIFT_R_VAL);
003f5a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00324_DS_:
003f5c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003f5e   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
003f60   e207     bc      0x003f70         	BC	_00326_DS_
003f62   0e14     movlw   0x14             	MOVLW	0x14
003f64   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003f66   ec57     call    0x0040ae, 0x0    	CALL	__lcd_write_command
003f68   f020
003f6a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003f6c   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
003f6e   d7f6     bra     0x003f5c         	BRA	_00324_DS_
                                           _00326_DS_:
003f70   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003f72   f001
003f74   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003f76   f000
003f78   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003f7a   ffd9
003f7c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_shift_left	code
                                           _lcd_cursor_shift_left:
                                           ;	.line	169; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_shift_left(uint8_t nr) {
003f7e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003f80   ffe5
003f82   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003f84   ffd9
003f86   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003f88   ffe5
003f8a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003f8c   ffe5
003f8e   0e02     movlw   0x02             	MOVLW	0x02
003f90   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003f92   f000
                                           ;	.line	171; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
003f94   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003f96   e00b     bz      0x003fae         	BZ	_00303_DS_
                                           ;	.line	172; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_CURSOR_SHIFT_L_VAL);
003f98   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00301_DS_:
003f9a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003f9c   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
003f9e   e207     bc      0x003fae         	BC	_00303_DS_
003fa0   0e10     movlw   0x10             	MOVLW	0x10
003fa2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003fa4   ec57     call    0x0040ae, 0x0    	CALL	__lcd_write_command
003fa6   f020
003fa8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003faa   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
003fac   d7f6     bra     0x003f9a         	BRA	_00301_DS_
                                           _00303_DS_:
003fae   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003fb0   f001
003fb2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003fb4   f000
003fb6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003fb8   ffd9
003fba   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_shift_right	code
                                           _lcd_shift_right:
                                           ;	.line	162; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_shift_right(uint8_t nr) {
003fbc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003fbe   ffe5
003fc0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003fc2   ffd9
003fc4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003fc6   ffe5
003fc8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003fca   ffe5
003fcc   0e02     movlw   0x02             	MOVLW	0x02
003fce   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003fd0   f000
                                           ;	.line	164; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
003fd2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003fd4   e00b     bz      0x003fec         	BZ	_00280_DS_
                                           ;	.line	165; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_DISPLAY_SHIFT_RIGHT);
003fd6   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00278_DS_:
003fd8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003fda   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
003fdc   e207     bc      0x003fec         	BC	_00280_DS_
003fde   0e1c     movlw   0x1c             	MOVLW	0x1c
003fe0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003fe2   ec57     call    0x0040ae, 0x0    	CALL	__lcd_write_command
003fe4   f020
003fe6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003fe8   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
003fea   d7f6     bra     0x003fd8         	BRA	_00278_DS_
                                           _00280_DS_:
003fec   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003fee   f001
003ff0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003ff2   f000
003ff4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003ff6   ffd9
003ff8   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_shift_left	code
                                           _lcd_shift_left:
                                           ;	.line	155; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_shift_left(uint8_t nr) {
003ffa   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003ffc   ffe5
003ffe   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004000   ffd9
004002   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004004   ffe5
004006   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004008   ffe5
00400a   0e02     movlw   0x02             	MOVLW	0x02
00400c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00400e   f000
                                           ;	.line	157; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
004010   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004012   e00b     bz      0x00402a         	BZ	_00257_DS_
                                           ;	.line	158; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_DISPLAY_SHIFT_LEFT);
004014   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00255_DS_:
004016   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004018   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
00401a   e207     bc      0x00402a         	BC	_00257_DS_
00401c   0e18     movlw   0x18             	MOVLW	0x18
00401e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004020   ec57     call    0x0040ae, 0x0    	CALL	__lcd_write_command
004022   f020
004024   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004026   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
004028   d7f6     bra     0x004016         	BRA	_00255_DS_
                                           _00257_DS_:
00402a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00402c   f001
00402e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004030   f000
004032   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004034   ffd9
004036   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_position	code
                                           _lcd_cursor_position:
                                           ;	.line	150; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_position(uint8_t line, uint8_t pos) {
004038   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00403a   ffe5
00403c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00403e   ffd9
004040   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004042   ffe5
004044   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004046   ffe5
004048   0e02     movlw   0x02             	MOVLW	0x02
00404a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00404c   f000
00404e   0e03     movlw   0x03             	MOVLW	0x03
004050   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
004052   f001
                                           ;	.line	151; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_POS = pos + _lcd_line2index(line);
004054   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004056   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004058   ec3a     call    0x003e74, 0x0    	CALL	__lcd_line2index
00405a   f01f
00405c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00405e   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
004060   010f     movlb   0xf              	BANKSEL	_LCD_POS
004062   6f14     movwf   0x14, 0x1        	MOVWF	_LCD_POS, B
                                           ;	.line	152; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
004064   ecea     call    0x0041d4, 0x0    	CALL	__lcd_restore_cursor
004066   f020
004068   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00406a   f001
00406c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00406e   f000
004070   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004072   ffd9
004074   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_write_strF	code
                                           _lcd_write_strF:
                                           ;	.line	143; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_write_strF(const uint8_t *data){
003c8e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003c90   ffe5
003c92   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003c94   ffd9
003c96   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003c98   ffe5
003c9a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003c9c   ffe5
003c9e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003ca0   ffe5
003ca2   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003ca4   ffe5
003ca6   0e02     movlw   0x02             	MOVLW	0x02
003ca8   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003caa   f000
003cac   0e03     movlw   0x03             	MOVLW	0x03
003cae   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003cb0   f001
003cb2   0e04     movlw   0x04             	MOVLW	0x04
003cb4   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
003cb6   f002
                                           _00229_DS_:
                                           ;	.line	144; ../my_sdcc_lib/rosso_sdcc_lcd4.h	while(*data){
003cb8   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003cba   ffe9
003cbc   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
003cbe   fff3
003cc0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003cc2   ec91     call    0x004122, 0x0    	CALL	__gptrget1
003cc4   f020
003cc6   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
003cc8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003cca   e00a     bz      0x003ce0         	BZ	_00232_DS_
                                           ;	.line	145; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_data(*data);
003ccc   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003cce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003cd0   ec6b     call    0x0040d6, 0x0    	CALL	__lcd_write_data
003cd2   f020
003cd4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	146; ../my_sdcc_lib/rosso_sdcc_lcd4.h	*data++;
003cd6   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
003cd8   e3ef     bnc     0x003cb8         	BNC	_00229_DS_
003cda   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
003cdc   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
                                           _00241_DS_:
003cde   d7ec     bra     0x003cb8         	BRA	_00229_DS_
                                           _00232_DS_:
003ce0   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003ce2   f003
003ce4   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003ce6   f002
003ce8   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003cea   f001
003cec   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003cee   f000
003cf0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003cf2   ffd9
003cf4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_write_str	code
                                           _lcd_write_str:
                                           ;	.line	136; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_write_str(uint8_t *data){
003cf6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003cf8   ffe5
003cfa   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003cfc   ffd9
003cfe   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003d00   ffe5
003d02   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003d04   ffe5
003d06   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003d08   ffe5
003d0a   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003d0c   ffe5
003d0e   0e02     movlw   0x02             	MOVLW	0x02
003d10   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003d12   f000
003d14   0e03     movlw   0x03             	MOVLW	0x03
003d16   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003d18   f001
003d1a   0e04     movlw   0x04             	MOVLW	0x04
003d1c   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
003d1e   f002
                                           _00212_DS_:
                                           ;	.line	137; ../my_sdcc_lib/rosso_sdcc_lcd4.h	while(*data){
003d20   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003d22   ffe9
003d24   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
003d26   fff3
003d28   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003d2a   ec91     call    0x004122, 0x0    	CALL	__gptrget1
003d2c   f020
003d2e   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
003d30   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003d32   e00a     bz      0x003d48         	BZ	_00215_DS_
                                           ;	.line	138; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_data(*data);
003d34   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003d36   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003d38   ec6b     call    0x0040d6, 0x0    	CALL	__lcd_write_data
003d3a   f020
003d3c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	139; ../my_sdcc_lib/rosso_sdcc_lcd4.h	*data++;
003d3e   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
003d40   e3ef     bnc     0x003d20         	BNC	_00212_DS_
003d42   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
003d44   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
                                           _00224_DS_:
003d46   d7ec     bra     0x003d20         	BRA	_00212_DS_
                                           _00215_DS_:
003d48   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003d4a   f003
003d4c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003d4e   f002
003d50   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003d52   f001
003d54   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003d56   f000
003d58   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003d5a   ffd9
003d5c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_write_char	code
                                           _lcd_write_char:
                                           ;	.line	132; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_write_char(uint8_t data) {
000304   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000306   ffe5
000308   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00030a   ffd9
00030c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00030e   ffe5
000310   0e02     movlw   0x02             	MOVLW	0x02
000312   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000314   f000
                                           ;	.line	133; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_data(data);
000316   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000318   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00031a   ec6b     call    0x0040d6, 0x0    	CALL	__lcd_write_data
00031c   f020
00031e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000320   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000322   f000
000324   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000326   ffd9
000328   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_restore_cursor	code
                                           __lcd_restore_cursor:
                                           ;	.line	129; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(LCD_SET_DDRAM_ADDRESS | LCD_POS);
0041d4   0e80     movlw   0x80             	MOVLW	0x80
0041d6   010f     movlb   0xf              	BANKSEL	_LCD_POS
0041d8   1114     iorwf   0x14, 0x0, 0x1   	IORWF	_LCD_POS, W, B
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
0041da   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0041dc   ec57     call    0x0040ae, 0x0    	CALL	__lcd_write_command
0041de   f020
0041e0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0041e2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_line2index	code
                                           __lcd_line2index:
                                           ;	.line	117; ../my_sdcc_lib/rosso_sdcc_lcd4.h	uint8_t _lcd_line2index(uint8_t line) {
003e74   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003e76   ffe5
003e78   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003e7a   ffd9
003e7c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003e7e   ffe5
003e80   0e02     movlw   0x02             	MOVLW	0x02
003e82   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003e84   f000
                                           ;	.line	119; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (line < LCD_NR_LINES) {
003e86   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
003e88   e213     bc      0x003eb0         	BC	_00173_DS_
                                           ;	.line	120; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (line == 0) return 0x00;
003e8a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003e8c   e102     bnz     0x003e92         	BNZ	_00170_DS_
003e8e   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
003e90   d010     bra     0x003eb2         	BRA	_00174_DS_
                                           _00170_DS_:
                                           ;	.line	121; ../my_sdcc_lib/rosso_sdcc_lcd4.h	else if (line == 1) return 0x40;
003e92   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003e94   0a01     xorlw   0x01             	XORLW	0x01
003e96   e102     bnz     0x003e9c         	BNZ	_00167_DS_
003e98   0e40     movlw   0x40             	MOVLW	0x40
003e9a   d00b     bra     0x003eb2         	BRA	_00174_DS_
                                           _00167_DS_:
                                           ;	.line	122; ../my_sdcc_lib/rosso_sdcc_lcd4.h	else if (line == 2) return 0x00 + LCD_NR_CHARS;
003e9c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003e9e   0a02     xorlw   0x02             	XORLW	0x02
003ea0   e102     bnz     0x003ea6         	BNZ	_00164_DS_
003ea2   0e10     movlw   0x10             	MOVLW	0x10
003ea4   d006     bra     0x003eb2         	BRA	_00174_DS_
                                           _00164_DS_:
                                           ;	.line	123; ../my_sdcc_lib/rosso_sdcc_lcd4.h	else if (line == 3) return 0x40 + LCD_NR_CHARS;
003ea6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003ea8   0a03     xorlw   0x03             	XORLW	0x03
003eaa   e102     bnz     0x003eb0         	BNZ	_00173_DS_
003eac   0e50     movlw   0x50             	MOVLW	0x50
003eae   d001     bra     0x003eb2         	BRA	_00174_DS_
                                           _00173_DS_:
                                           ;	.line	125; ../my_sdcc_lib/rosso_sdcc_lcd4.h	return 0x00;
003eb0   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
                                           _00174_DS_:
003eb2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003eb4   f000
003eb6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003eb8   ffd9
003eba   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_write_command	code
                                           __lcd_write_command:
                                           ;	.line	112; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void _lcd_write_command(uint8_t value) {
0040ae   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0040b0   ffe5
0040b2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0040b4   ffd9
0040b6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0040b8   ffe5
0040ba   0e02     movlw   0x02             	MOVLW	0x02
0040bc   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0040be   f000
                                           ;	.line	113; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS = 0; // select command mode
0040c0   928d     bcf     0x8d, 0x1, 0x0   	BCF	_LATEbits, 1
                                           ;	.line	114; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write(value); // write byte
0040c2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0040c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0040c6   ec60     call    0x0038c0, 0x0    	CALL	___lcd_write
0040c8   f01c
0040ca   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0040cc   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0040ce   f000
0040d0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0040d2   ffd9
0040d4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_write_data	code
                                           __lcd_write_data:
                                           ;	.line	107; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void _lcd_write_data(uint8_t value) {
0040d6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0040d8   ffe5
0040da   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0040dc   ffd9
0040de   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0040e0   ffe5
0040e2   0e02     movlw   0x02             	MOVLW	0x02
0040e4   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0040e6   f000
                                           ;	.line	108; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS = 1; // select data mode
0040e8   828d     bsf     0x8d, 0x1, 0x0   	BSF	_LATEbits, 1
                                           ;	.line	109; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write(value); // write byte
0040ea   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0040ec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0040ee   ec60     call    0x0038c0, 0x0    	CALL	___lcd_write
0040f0   f01c
0040f2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0040f4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0040f6   f000
0040f8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0040fa   ffd9
0040fc   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main____lcd_write	code
                                           ___lcd_write:
                                           ;	.line	100; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void __lcd_write(uint8_t value) {
0038c0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0038c2   ffe5
0038c4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0038c6   ffd9
0038c8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0038ca   ffe5
0038cc   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0038ce   ffe5
0038d0   0e02     movlw   0x02             	MOVLW	0x02
0038d2   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0038d4   f000
                                           ;	.line	101; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(value >> 4); // write high nibble
0038d6   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0038d8   0b0f     andlw   0x0f             	ANDLW	0x0f
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x01, W
0038da   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0038dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0038de   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
0038e0   f01d
0038e2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	102; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(value); // write low nibble
0038e4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0038e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0038e8   ec51     call    0x003aa2, 0x0    	CALL	___lcd_write_nibble
0038ea   f01d
0038ec   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	103; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
0038ee   0e38     movlw   0x38             	MOVLW	0x38
0038f0   ecf6     call    0x0039ec, 0x0    	CALL	_delay10tcy
0038f2   f01c
0038f4   0000     nop                      	nop	
0038f6   0000     nop                      	nop	
0038f8   0000     nop                      	nop	
0038fa   0000     nop                      	nop	
0038fc   0000     nop                      	nop	
0038fe   0000     nop                      	nop	
003900   0000     nop                      	nop	
003902   0000     nop                      	nop	
003904   0000     nop                      	nop	
003906   0000     nop                      	nop	
003908   0000     nop                      	nop	
00390a   0000     nop                      	nop	
00390c   0000     nop                      	nop	
00390e   0000     nop                      	nop	
003910   0000     nop                      	nop	
003912   0000     nop                      	nop	
003914   0000     nop                      	nop	
003916   0000     nop                      	nop	
003918   0000     nop                      	nop	
00391a   0000     nop                      	nop	
00391c   0000     nop                      	nop	
00391e   0000     nop                      	nop	
003920   0000     nop                      	nop	
003922   0000     nop                      	nop	
003924   0000     nop                      	nop	
003926   0000     nop                      	nop	
003928   0000     nop                      	nop	
00392a   0000     nop                      	nop	
00392c   0000     nop                      	nop	
00392e   0000     nop                      	nop	
003930   0000     nop                      	nop	
003932   0000     nop                      	nop	
003934   0000     nop                      	nop	
003936   0000     nop                      	nop	
003938   0000     nop                      	nop	
00393a   0000     nop                      	nop	
00393c   0000     nop                      	nop	
00393e   0000     nop                      	nop	
003940   0000     nop                      	nop	
003942   0000     nop                      	nop	
003944   0000     nop                      	nop	
003946   0000     nop                      	nop	
003948   0000     nop                      	nop	
00394a   0000     nop                      	nop	
00394c   0000     nop                      	nop	
00394e   0000     nop                      	nop	
003950   0000     nop                      	nop	
003952   0000     nop                      	nop	
003954   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003956   f001
003958   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00395a   f000
00395c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00395e   ffd9
003960   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main____lcd_write_nibble	code
                                           ___lcd_write_nibble:
                                           ;	.line	88; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void __lcd_write_nibble(uint8_t value) {
003aa2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003aa4   ffe5
003aa6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003aa8   ffd9
003aaa   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003aac   ffe5
003aae   0e02     movlw   0x02             	MOVLW	0x02
003ab0   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003ab2   f000
                                           ;	.line	90; ../my_sdcc_lib/rosso_sdcc_lcd4.h	nibble.val = value;
003ab4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003ab6   010f     movlb   0xf              	BANKSEL	___lcd_write_nibble_nibble_1_14
003ab8   6f13     movwf   0x13, 0x1        	MOVWF	___lcd_write_nibble_nibble_1_14, B
                                           ;	.line	91; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D4 = nibble.bits.b0;
003aba   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
003abc   b113     btfsc   0x13, 0x0, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_14, 0, B
003abe   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
003ac0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003ac2   0b01     andlw   0x01             	ANDLW	0x01
003ac4   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
003ac6   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
003ac8   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
003aca   0bef     andlw   0xef             	ANDLW	0xef
003acc   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
003ace   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	92; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D5 = nibble.bits.b1;
003ad0   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
003ad2   b313     btfsc   0x13, 0x1, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_14, 1, B
003ad4   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
003ad6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003ad8   0b01     andlw   0x01             	ANDLW	0x01
003ada   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
003adc   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
003ade   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
003ae0   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
003ae2   0bdf     andlw   0xdf             	ANDLW	0xdf
003ae4   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
003ae6   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	93; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D6 = nibble.bits.b2;
003ae8   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
003aea   b513     btfsc   0x13, 0x2, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_14, 2, B
003aec   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
003aee   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003af0   0b01     andlw   0x01             	ANDLW	0x01
003af2   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
003af4   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
003af6   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
003af8   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
003afa   0bbf     andlw   0xbf             	ANDLW	0xbf
003afc   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
003afe   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	94; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D7 = nibble.bits.b3;
003b00   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
003b02   b713     btfsc   0x13, 0x3, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_14, 3, B
003b04   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
003b06   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003b08   0b01     andlw   0x01             	ANDLW	0x01
003b0a   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
003b0c   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
003b0e   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
003b10   0b7f     andlw   0x7f             	ANDLW	0x7f
003b12   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
003b14   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	95; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_EN = 1;
003b16   848d     bsf     0x8d, 0x2, 0x0   	BSF	_LATEbits, 2
003b18   0000     nop                      	nop	
003b1a   0000     nop                      	nop	
003b1c   0000     nop                      	nop	
003b1e   0000     nop                      	nop	
003b20   0000     nop                      	nop	
003b22   0000     nop                      	nop	
003b24   0000     nop                      	nop	
003b26   0000     nop                      	nop	
                                           ;	.line	97; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_EN = 0;
003b28   948d     bcf     0x8d, 0x2, 0x0   	BCF	_LATEbits, 2
003b2a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003b2c   f000
003b2e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003b30   ffd9
003b32   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___delay_ms	code
                                           __delay_ms:
                                           ;	.line	174; ../my_sdcc_lib/rosso_sdcc.h	void _delay_ms(uint16_t x){
003e1e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003e20   ffe5
003e22   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003e24   ffd9
003e26   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003e28   ffe5
003e2a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003e2c   ffe5
003e2e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003e30   ffe5
003e32   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003e34   ffe5
003e36   0e02     movlw   0x02             	MOVLW	0x02
003e38   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003e3a   f000
003e3c   0e03     movlw   0x03             	MOVLW	0x03
003e3e   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003e40   f001
                                           ;	.line	176; ../my_sdcc_lib/rosso_sdcc.h	for(i=0; i<x; i++){
003e42   6a02     clrf    0x02, 0x0        	CLRF	r0x02
003e44   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           _00125_DS_:
003e46   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003e48   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
003e4a   e102     bnz     0x003e50         	BNZ	_00136_DS_
003e4c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003e4e   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
                                           _00136_DS_:
003e50   e206     bc      0x003e5e         	BC	_00127_DS_
                                           ;	.line	177; ../my_sdcc_lib/rosso_sdcc.h	delay_1ms();
003e52   0ea0     movlw   0xa0             	MOVLW	0xa0
003e54   ece3     call    0x0039c6, 0x0    	CALL	_delay100tcy
003e56   f01c
                                           ;	.line	176; ../my_sdcc_lib/rosso_sdcc.h	for(i=0; i<x; i++){
003e58   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
003e5a   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
003e5c   d7f4     bra     0x003e46         	BRA	_00125_DS_
                                           _00127_DS_:
003e5e   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003e60   f003
003e62   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003e64   f002
003e66   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003e68   f001
003e6a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003e6c   f000
003e6e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003e70   ffd9
003e72   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___delay_us	code
                                           __delay_us:
                                           ;	.line	167; ../my_sdcc_lib/rosso_sdcc.h	void _delay_us(uint16_t x){
003c1e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003c20   ffe5
003c22   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003c24   ffd9
003c26   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003c28   ffe5
003c2a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003c2c   ffe5
003c2e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003c30   ffe5
003c32   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003c34   ffe5
003c36   0e02     movlw   0x02             	MOVLW	0x02
003c38   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003c3a   f000
003c3c   0e03     movlw   0x03             	MOVLW	0x03
003c3e   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003c40   f001
                                           ;	.line	169; ../my_sdcc_lib/rosso_sdcc.h	for(i=0; i<x; i++){
003c42   6a02     clrf    0x02, 0x0        	CLRF	r0x02
003c44   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           _00107_DS_:
003c46   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003c48   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
003c4a   e102     bnz     0x003c50         	BNZ	_00118_DS_
003c4c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003c4e   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
                                           _00118_DS_:
003c50   e213     bc      0x003c78         	BC	_00109_DS_
003c52   0000     nop                      	nop	
003c54   0000     nop                      	nop	
003c56   0000     nop                      	nop	
003c58   0000     nop                      	nop	
003c5a   0000     nop                      	nop	
003c5c   0000     nop                      	nop	
003c5e   0000     nop                      	nop	
003c60   0000     nop                      	nop	
003c62   0000     nop                      	nop	
003c64   0000     nop                      	nop	
003c66   0000     nop                      	nop	
003c68   0000     nop                      	nop	
003c6a   0000     nop                      	nop	
003c6c   0000     nop                      	nop	
003c6e   0000     nop                      	nop	
003c70   0000     nop                      	nop	
                                           ;	.line	169; ../my_sdcc_lib/rosso_sdcc.h	for(i=0; i<x; i++){
003c72   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
003c74   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
003c76   d7e7     bra     0x003c46         	BRA	_00107_DS_
                                           _00109_DS_:
003c78   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003c7a   f003
003c7c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003c7e   f002
003c80   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003c82   f001
003c84   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003c86   f000
003c88   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003c8a   ffd9
003c8c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block for Ival
                                           	code
                                           _sf:
003962   4520     rlncf   0x20, 0x0, 0x1   	DB	0x20, 0x45, 0x4e, 0x47, 0x00, 0x00
003964   474e     rlncf   0x4e, 0x1, 0x1   
003966   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_0:
003968   4520     rlncf   0x20, 0x0, 0x1   	DB	0x20, 0x45, 0x4e, 0x47, 0x00, 0x00
00396a   474e     rlncf   0x4e, 0x1, 0x1   
00396c   0000     nop                      


                                           ; Statistics:
                                           ; code size:	14648 (0x3938) bytes (11.18%)
                                           ;           	 7324 (0x1c9c) words
                                           ; udata size:	    6 (0x0006) bytes ( 0.16%)
                                           ; access size:	   11 (0x000b) bytes


                                           	end
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
