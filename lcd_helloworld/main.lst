gplink-1.4.3 #1207 (May 12 2016)
Copyright (c) 1998-2016 gputils project
Listing File Generated: 5-22-2016  02:06:37
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.5.6 #9604 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	___uflags
                                           	global	__entry
                                           	global	__startup
                                           	global	_main
                                           	global	_LCD_POS
                                           	global	_s
                                           	global	_sr
                                           	global	__delay_us
                                           	global	__delay_ms
                                           	global	___lcd_write_nibble
                                           	global	___lcd_write
                                           	global	__lcd_write_data
                                           	global	__lcd_write_command
                                           	global	__lcd_line2index
                                           	global	__lcd_restore_cursor
                                           	global	_lcd_write_char
                                           	global	_lcd_write_str
                                           	global	_lcd_write_strF
                                           	global	_lcd_cursor_position
                                           	global	_lcd_shift_left
                                           	global	_lcd_shift_right
                                           	global	_lcd_cursor_shift_left
                                           	global	_lcd_cursor_shift_right
                                           	global	_lcd_clear_screen
                                           	global	_lcd_cursor_blink_display
                                           	global	_lcd_home
                                           	global	_lcd_clear_line
                                           	global	_lcd_progress
                                           	global	_lcd_init
                                           	global	_sf

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrget1
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_stack_end
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_delay10tcy
                                           	extern	_delay100tcy
                                           	extern	_delay1ktcy
                                           	extern	_delay10ktcy
                                           	extern	_uitoa
                                           	extern	_cinit

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           	idata
                                           ___uflags	db	0x00
                                           _sr	db	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21
                                           	db	0x00, 0x00


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1

                                           udata_main_0	udata
                                           ___lcd_write_nibble_nibble_1_14	res	1

                                           udata_main_1	udata
                                           _LCD_POS	res	1

                                           udata_main_2	udata
                                           _s	res	4

                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_main___entry	code	0X000300
                                           __entry:
000300   ef1b     goto    0x000e36         	goto	__startup
000302   f007
                                           	
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
000a8c   010f     movlb   0xf              	BANKSEL	_ANSELA
                                           ;	.line	32; main.c	AllDigital(); /* all pins digital */
000a8e   6b38     clrf    0x38, 0x1        	CLRF	_ANSELA, B
000a90   010f     movlb   0xf              	BANKSEL	_ANSELB
000a92   6b39     clrf    0x39, 0x1        	CLRF	_ANSELB, B
000a94   010f     movlb   0xf              	BANKSEL	_ANSELC
000a96   6b3a     clrf    0x3a, 0x1        	CLRF	_ANSELC, B
000a98   010f     movlb   0xf              	BANKSEL	_ANSELD
000a9a   6b3b     clrf    0x3b, 0x1        	CLRF	_ANSELD, B
000a9c   010f     movlb   0xf              	BANKSEL	_ANSELE
000a9e   6b3c     clrf    0x3c, 0x1        	CLRF	_ANSELE, B
000aa0   6ac2     clrf    0xc2, 0x0        	CLRF	_ADCON0
000aa2   6ac1     clrf    0xc1, 0x0        	CLRF	_ADCON1
000aa4   6ac0     clrf    0xc0, 0x0        	CLRF	_ADCON2
000aa6   6a79     clrf    0x79, 0x0        	CLRF	_CM1CON0
000aa8   6a78     clrf    0x78, 0x0        	CLRF	_CM2CON0
000aaa   6a77     clrf    0x77, 0x0        	CLRF	_CM2CON1
                                           ;	.line	34; main.c	OnBoardLED_dir = 0; /* output */
000aac   9494     bcf     0x94, 0x2, 0x0   	BCF	_TRISCbits, 2
                                           ;	.line	35; main.c	OnBoardButton_dir = 1; /* input */
000aae   8892     bsf     0x92, 0x4, 0x0   	BSF	_TRISAbits, 4
                                           ;	.line	36; main.c	OnBoardLED = 0;
000ab0   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	38; main.c	lcd_init(LCD_HD44780);
000ab2   0e00     movlw   0x00             	MOVLW	0x00
000ab4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000ab6   ec95     call    0x00032a, 0x0    	CALL	_lcd_init
000ab8   f001
000aba   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	39; main.c	lcd_cursor_position(0, 0);
000abc   0e00     movlw   0x00             	MOVLW	0x00
000abe   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000ac0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000ac2   ecfa     call    0x0013f4, 0x0    	CALL	_lcd_cursor_position
000ac4   f009
000ac6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000ac8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	40; main.c	lcd_write_str(sr);  /* reading the string from the RAM */
000aca   0e80     movlw   0x80             	MOVLW	0x80
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
000acc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ace   0e0f     movlw   0x0f             	MOVLW	HIGH(_sr)
000ad0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ad2   0e21     movlw   0x21             	MOVLW	LOW(_sr)
000ad4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ad6   eca4     call    0x001148, 0x0    	CALL	_lcd_write_str
000ad8   f008
000ada   0e03     movlw   0x03             	MOVLW	0x03
000adc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	41; main.c	lcd_write_strF(sf); /* reading the string from the FLASH */
000ade   0e00     movlw   0x00             	MOVLW	UPPER(_sf)
000ae0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ae2   0e0c     movlw   0x0c             	MOVLW	HIGH(_sf)
000ae4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ae6   0e46     movlw   0x46             	MOVLW	LOW(_sf)
000ae8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000aea   ec70     call    0x0010e0, 0x0    	CALL	_lcd_write_strF
000aec   f008
000aee   0e03     movlw   0x03             	MOVLW	0x03
000af0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	42; main.c	while (1) {
000af2   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00426_DS_:
                                           ;	.line	43; main.c	counter += 1; /* count up to 255 and start again from zer0 */
000af4   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
                                           ;	.line	44; main.c	lcd_cursor_position(1, 0);
000af6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000af8   0e01     movlw   0x01             	MOVLW	0x01
000afa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000afc   ecfa     call    0x0013f4, 0x0    	CALL	_lcd_cursor_position
000afe   f009
000b00   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000b02   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	45; main.c	uitoa(counter, s, 10);
000b04   c000     movff   0x000, 0x001     	MOVFF	r0x00, r0x01
000b06   f001
000b08   0e0a     movlw   0x0a             	MOVLW	0x0a
000b0a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b0c   0e0f     movlw   0x0f             	MOVLW	HIGH(_s)
000b0e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b10   0e2f     movlw   0x2f             	MOVLW	LOW(_s)
000b12   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b14   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
000b16   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000b18   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b1a   ec36     call    0x00106c, 0x0    	CALL	_uitoa
000b1c   f008
000b1e   0e05     movlw   0x05             	MOVLW	0x05
000b20   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	46; main.c	if(counter < 10) {
000b22   0e0a     movlw   0x0a             	MOVLW	0x0a
000b24   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
000b26   e20a     bc      0x000b3c         	BC	_00421_DS_
                                           ;	.line	47; main.c	lcd_write_str("  ");
000b28   0e00     movlw   0x00             	MOVLW	UPPER(___str_0)
000b2a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b2c   0e0c     movlw   0x0c             	MOVLW	HIGH(___str_0)
000b2e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b30   0e4c     movlw   0x4c             	MOVLW	LOW(___str_0)
000b32   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b34   eca4     call    0x001148, 0x0    	CALL	_lcd_write_str
000b36   f008
000b38   0e03     movlw   0x03             	MOVLW	0x03
000b3a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00421_DS_:
                                           ;	.line	49; main.c	if((counter > 9) && (counter < 100)) { 
000b3c   0e0a     movlw   0x0a             	MOVLW	0x0a
000b3e   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
000b40   e30d     bnc     0x000b5c         	BNC	_00423_DS_
000b42   0e64     movlw   0x64             	MOVLW	0x64
000b44   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
000b46   e20a     bc      0x000b5c         	BC	_00423_DS_
                                           ;	.line	50; main.c	lcd_write_str(" ");
000b48   0e00     movlw   0x00             	MOVLW	UPPER(___str_1)
000b4a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b4c   0e0c     movlw   0x0c             	MOVLW	HIGH(___str_1)
000b4e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b50   0e50     movlw   0x50             	MOVLW	LOW(___str_1)
000b52   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b54   eca4     call    0x001148, 0x0    	CALL	_lcd_write_str
000b56   f008
000b58   0e03     movlw   0x03             	MOVLW	0x03
000b5a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00423_DS_:
                                           ;	.line	52; main.c	lcd_write_str(s);
000b5c   0e80     movlw   0x80             	MOVLW	0x80
                                           ; #	MOVWF	r0x03
                                           ; #	MOVF	r0x03, W
000b5e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b60   0e0f     movlw   0x0f             	MOVLW	HIGH(_s)
000b62   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b64   0e2f     movlw   0x2f             	MOVLW	LOW(_s)
000b66   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b68   eca4     call    0x001148, 0x0    	CALL	_lcd_write_str
000b6a   f008
000b6c   0e03     movlw   0x03             	MOVLW	0x03
000b6e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	53; main.c	delay_150ms();
000b70   0ef0     movlw   0xf0             	MOVLW	0xf0
000b72   ec3f     call    0x000c7e, 0x0    	CALL	_delay10ktcy
000b74   f006
                                           ;	.line	54; main.c	delay_150ms();
000b76   0ef0     movlw   0xf0             	MOVLW	0xf0
000b78   ec3f     call    0x000c7e, 0x0    	CALL	_delay10ktcy
000b7a   f006
000b7c   d7bb     bra     0x000af4         	BRA	_00426_DS_
000b7e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___startup	code
                                           __startup:
                                           	;	Initialize the stack pointer
000e36   ee11     lfsr    0x1, 0x1ff       	lfsr	1, _stack_end
000e38   f0ff
000e3a   ee21     lfsr    0x2, 0x1ff       	lfsr	2, _stack_end
000e3c   f0ff
                                           	;	1st silicon does not do this on POR
000e3e   6af8     clrf    0xf8, 0x0        	clrf	_TBLPTRU, 0
                                           	;	Initialize the flash memory access configuration.
                                           	;	This is harmless for non-flash devices, so we do it on all parts.
000e40   8ea6     bsf     0xa6, 0x7, 0x0   	bsf	0xa6, 7, 0 ; EECON1.EEPGD = 1, TBLPTR accesses program memory
000e42   9ca6     bcf     0xa6, 0x6, 0x0   	bcf	0xa6, 6, 0 ; EECON1.CFGS = 0, TBLPTR accesses program memory
                                           	;	TBLPTR = &cinit
000e44   0e1c     movlw   0x1c             	movlw	low(_cinit)
000e46   6ef6     movwf   0xf6, 0x0        	movwf	_TBLPTRL, 0
000e48   0e15     movlw   0x15             	movlw	high(_cinit)
000e4a   6ef7     movwf   0xf7, 0x0        	movwf	_TBLPTRH, 0
000e4c   0e00     movlw   0x00             	movlw	upper(_cinit)
000e4e   6ef8     movwf   0xf8, 0x0        	movwf	_TBLPTRU, 0
                                           	;	0x05 = cinit.num_init
000e50   0009     tblrd*+                  	tblrd*+
000e52   cff5     movff   0xff5, 0x005     	movff	_TABLAT, 0x05
000e54   f005
000e56   0009     tblrd*+                  	tblrd*+
000e58   cff5     movff   0xff5, 0x006     	movff	_TABLAT, (0x05 + 1)
000e5a   f006
                                           	;	while (0x05)
000e5c   d034     bra     0x000ec6         	bra	entry_loop_dec
                                           entry_loop:
                                           	;	Count down so we only have to look up the data in _cinit once.
                                           	;	At this point we know that TBLPTR points to the top of the current
                                           	;	entry in _cinit, so we can just start reading the from, to, and
                                           	;	size values.
                                           	;	Read the source address low.
                                           	;	0x00 = 0x07 ->from;
000e5e   0009     tblrd*+                  	tblrd*+
000e60   cff5     movff   0xff5, 0x000     	movff	_TABLAT, 0x00
000e62   f000
                                           	;	source address high
000e64   0009     tblrd*+                  	tblrd*+
000e66   cff5     movff   0xff5, 0x001     	movff	_TABLAT, (0x00 + 1)
000e68   f001
                                           	;	source address upper
000e6a   0009     tblrd*+                  	tblrd*+
000e6c   cff5     movff   0xff5, 0x002     	movff	_TABLAT, (0x00 + 2)
000e6e   f002
                                           	;	Skip 0 byte since it is stored as 0 32bit int.
000e70   0009     tblrd*+                  	tblrd*+
                                           	;	Read the destination address directly into FSR0
                                           	;	destination address low.
                                           	;	FSR0 = (unsigned short)0x07 ->to;
000e72   0009     tblrd*+                  	tblrd*+
000e74   cff5     movff   0xff5, 0xfe9     	movff	_TABLAT, _FSR0L
000e76   ffe9
                                           	;	destination address high
000e78   0009     tblrd*+                  	tblrd*+
000e7a   cff5     movff   0xff5, 0xfea     	movff	_TABLAT, _FSR0H
000e7c   ffea
                                           	;	Skip two bytes since it is stored as 0 32bit int.
000e7e   0009     tblrd*+                  	tblrd*+
000e80   0009     tblrd*+                  	tblrd*+
                                           	;	Read the size of data to transfer to destination address.
                                           	;	0x03 = (unsigned short)0x07 ->size;
000e82   0009     tblrd*+                  	tblrd*+
000e84   cff5     movff   0xff5, 0x003     	movff	_TABLAT, 0x03
000e86   f003
000e88   0009     tblrd*+                  	tblrd*+
000e8a   cff5     movff   0xff5, 0x004     	movff	_TABLAT, (0x03 + 1)
000e8c   f004
                                           	;	Skip two bytes since it is stored as 0 32bit int.
000e8e   0009     tblrd*+                  	tblrd*+
000e90   0009     tblrd*+                  	tblrd*+
                                           	;	0x00 = 0x07 ->from;
                                           	;	FSR0 = (unsigned short)0x07 ->to;
                                           	;	0x03 = (unsigned short)0x07 ->size;
                                           	;	The table pointer now points to the next entry. Save it
                                           	;	off since we will be using the table pointer to do the copying
                                           	;	for the entry.
                                           	;	0x07 = TBLPTR
000e92   cff6     movff   0xff6, 0x007     	movff	_TBLPTRL, 0x07
000e94   f007
000e96   cff7     movff   0xff7, 0x008     	movff	_TBLPTRH, (0x07 + 1)
000e98   f008
000e9a   cff8     movff   0xff8, 0x009     	movff	_TBLPTRU, (0x07 + 2)
000e9c   f009
                                           	;	Now assign the source address to the table pointer.
                                           	;	TBLPTR = 0x00
000e9e   c000     movff   0x000, 0xff6     	movff	0x00, _TBLPTRL
000ea0   fff6
000ea2   c001     movff   0x001, 0xff7     	movff	(0x00 + 1), _TBLPTRH
000ea4   fff7
000ea6   c002     movff   0x002, 0xff8     	movff	(0x00 + 2), _TBLPTRU
000ea8   fff8
000eaa   d003     bra     0x000eb2         	bra	copy_loop_dec
                                           copy_loop:
000eac   0009     tblrd*+                  	tblrd*+
000eae   cff5     movff   0xff5, 0xfee     	movff	_TABLAT, _POSTINC0
000eb0   ffee
                                           copy_loop_dec:
                                           	;	while (--0x03);
                                           	;	Decrement and test the byte counter.
                                           	;	The cycle ends when the value of counter reaches the -1.
000eb2   0603     decf    0x03, 0x1, 0x0   	decf	0x03, f, 0
000eb4   e2fb     bc      0x000eac         	bc	copy_loop
000eb6   0604     decf    0x04, 0x1, 0x0   	decf	(0x03 + 1), f, 0
000eb8   e2f9     bc      0x000eac         	bc	copy_loop
                                           	;	Restore the table pointer for the next entry.
                                           	;	TBLPTR = 0x07
000eba   c007     movff   0x007, 0xff6     	movff	0x07, _TBLPTRL
000ebc   fff6
000ebe   c008     movff   0x008, 0xff7     	movff	(0x07 + 1), _TBLPTRH
000ec0   fff7
000ec2   c009     movff   0x009, 0xff8     	movff	(0x07 + 2), _TBLPTRU
000ec4   fff8
                                           entry_loop_dec:
                                           	;	while (--0x05);
                                           	;	Decrement and test the entry counter.
                                           	;	The cycle ends when the value of counter reaches the -1.
000ec6   0605     decf    0x05, 0x1, 0x0   	decf	0x05, f, 0
000ec8   e2ca     bc      0x000e5e         	bc	entry_loop
000eca   0606     decf    0x06, 0x1, 0x0   	decf	(0x05 + 1), f, 0
000ecc   e2c8     bc      0x000e5e         	bc	entry_loop
                                           	
                                           ;	.line	249; ../my_sdcc_lib/crt0i.c	main ();
000ece   ec46     call    0x000a8c, 0x0    	CALL	_main
000ed0   f005
                                           lockup:
                                           	;	Returning from main will lock up.
000ed2   d7ff     bra     0x000ed2         	bra	lockup
                                           	
                                           ; ; Starting pCode block
                                           S_main__lcd_init	code
                                           _lcd_init:
                                           ;	.line	220; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_init(CHIP chipset) {
00032a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00032c   ffe5
00032e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000330   ffd9
000332   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000334   ffe5
000336   0e02     movlw   0x02             	MOVLW	0x02
000338   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00033a   f000
                                           ;	.line	239; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS_DIR = 0;
00033c   9296     bcf     0x96, 0x1, 0x0   	BCF	_TRISEbits, 1
                                           ;	.line	240; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_EN_DIR = 0;
00033e   9496     bcf     0x96, 0x2, 0x0   	BCF	_TRISEbits, 2
                                           ;	.line	241; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D4_DIR = 0;
000340   9893     bcf     0x93, 0x4, 0x0   	BCF	_TRISBbits, 4
                                           ;	.line	242; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D5_DIR = 0;
000342   9a93     bcf     0x93, 0x5, 0x0   	BCF	_TRISBbits, 5
                                           ;	.line	243; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D6_DIR = 0;
000344   9c93     bcf     0x93, 0x6, 0x0   	BCF	_TRISBbits, 6
                                           ;	.line	244; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D7_DIR = 0;
000346   9e93     bcf     0x93, 0x7, 0x0   	BCF	_TRISBbits, 7
                                           ;	.line	246; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS = 0; // set to control char mode
000348   928d     bcf     0x8d, 0x1, 0x0   	BCF	_LATEbits, 1
                                           ;	.line	247; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (chipset == LCD_HD44780) {
00034a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00034c   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
00034e   d09a     bra     0x000484         	BRA	_00394_DS_
                                           ;	.line	248; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_25ms(); // power-up delay (> 15 ms)
000350   0e28     movlw   0x28             	MOVLW	0x28
000352   ec3f     call    0x000c7e, 0x0    	CALL	_delay10ktcy
000354   f006
                                           ;	.line	249; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011); // function set
000356   0e03     movlw   0x03             	MOVLW	0x03
000358   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00035a   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
00035c   f007
00035e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	250; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_5ms(); // > 4.1 milliseconds
000360   0e50     movlw   0x50             	MOVLW	0x50
000362   ec2c     call    0x000c58, 0x0    	CALL	_delay1ktcy
000364   f006
                                           ;	.line	251; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011); // function set
000366   0e03     movlw   0x03             	MOVLW	0x03
000368   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00036a   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
00036c   f007
00036e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	252; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_100us(); // > 100 us
000370   0ea0     movlw   0xa0             	MOVLW	0xa0
000372   ec6b     call    0x000cd6, 0x0    	CALL	_delay10tcy
000374   f006
                                           ;	.line	253; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011); // function set
000376   0e03     movlw   0x03             	MOVLW	0x03
000378   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00037a   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
00037c   f007
00037e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	254; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
000380   0e38     movlw   0x38             	MOVLW	0x38
000382   ec6b     call    0x000cd6, 0x0    	CALL	_delay10tcy
000384   f006
000386   0000     nop                      	nop	
000388   0000     nop                      	nop	
00038a   0000     nop                      	nop	
00038c   0000     nop                      	nop	
00038e   0000     nop                      	nop	
000390   0000     nop                      	nop	
000392   0000     nop                      	nop	
000394   0000     nop                      	nop	
000396   0000     nop                      	nop	
000398   0000     nop                      	nop	
00039a   0000     nop                      	nop	
00039c   0000     nop                      	nop	
00039e   0000     nop                      	nop	
0003a0   0000     nop                      	nop	
0003a2   0000     nop                      	nop	
0003a4   0000     nop                      	nop	
0003a6   0000     nop                      	nop	
0003a8   0000     nop                      	nop	
0003aa   0000     nop                      	nop	
0003ac   0000     nop                      	nop	
0003ae   0000     nop                      	nop	
0003b0   0000     nop                      	nop	
0003b2   0000     nop                      	nop	
0003b4   0000     nop                      	nop	
0003b6   0000     nop                      	nop	
0003b8   0000     nop                      	nop	
0003ba   0000     nop                      	nop	
0003bc   0000     nop                      	nop	
0003be   0000     nop                      	nop	
0003c0   0000     nop                      	nop	
0003c2   0000     nop                      	nop	
0003c4   0000     nop                      	nop	
0003c6   0000     nop                      	nop	
0003c8   0000     nop                      	nop	
0003ca   0000     nop                      	nop	
0003cc   0000     nop                      	nop	
0003ce   0000     nop                      	nop	
0003d0   0000     nop                      	nop	
0003d2   0000     nop                      	nop	
0003d4   0000     nop                      	nop	
0003d6   0000     nop                      	nop	
0003d8   0000     nop                      	nop	
0003da   0000     nop                      	nop	
0003dc   0000     nop                      	nop	
0003de   0000     nop                      	nop	
0003e0   0000     nop                      	nop	
0003e2   0000     nop                      	nop	
0003e4   0000     nop                      	nop	
                                           ;	.line	256; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000010); // select 4-bits mode
0003e6   0e02     movlw   0x02             	MOVLW	0x02
0003e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003ea   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
0003ec   f007
0003ee   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	257; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
0003f0   0e38     movlw   0x38             	MOVLW	0x38
0003f2   ec6b     call    0x000cd6, 0x0    	CALL	_delay10tcy
0003f4   f006
0003f6   0000     nop                      	nop	
0003f8   0000     nop                      	nop	
0003fa   0000     nop                      	nop	
0003fc   0000     nop                      	nop	
0003fe   0000     nop                      	nop	
000400   0000     nop                      	nop	
000402   0000     nop                      	nop	
000404   0000     nop                      	nop	
000406   0000     nop                      	nop	
000408   0000     nop                      	nop	
00040a   0000     nop                      	nop	
00040c   0000     nop                      	nop	
00040e   0000     nop                      	nop	
000410   0000     nop                      	nop	
000412   0000     nop                      	nop	
000414   0000     nop                      	nop	
000416   0000     nop                      	nop	
000418   0000     nop                      	nop	
00041a   0000     nop                      	nop	
00041c   0000     nop                      	nop	
00041e   0000     nop                      	nop	
000420   0000     nop                      	nop	
000422   0000     nop                      	nop	
000424   0000     nop                      	nop	
000426   0000     nop                      	nop	
000428   0000     nop                      	nop	
00042a   0000     nop                      	nop	
00042c   0000     nop                      	nop	
00042e   0000     nop                      	nop	
000430   0000     nop                      	nop	
000432   0000     nop                      	nop	
000434   0000     nop                      	nop	
000436   0000     nop                      	nop	
000438   0000     nop                      	nop	
00043a   0000     nop                      	nop	
00043c   0000     nop                      	nop	
00043e   0000     nop                      	nop	
000440   0000     nop                      	nop	
000442   0000     nop                      	nop	
000444   0000     nop                      	nop	
000446   0000     nop                      	nop	
000448   0000     nop                      	nop	
00044a   0000     nop                      	nop	
00044c   0000     nop                      	nop	
00044e   0000     nop                      	nop	
000450   0000     nop                      	nop	
000452   0000     nop                      	nop	
000454   0000     nop                      	nop	
                                           ;	.line	259; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00101000); // 2 lines, 5x8 dots font
000456   0e28     movlw   0x28             	MOVLW	0x28
000458   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00045a   ec19     call    0x001432, 0x0    	CALL	__lcd_write_command
00045c   f00a
00045e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	260; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00011100); // cursor (not data) move right
000460   0e1c     movlw   0x1c             	MOVLW	0x1c
000462   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000464   ec19     call    0x001432, 0x0    	CALL	__lcd_write_command
000466   f00a
000468   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	261; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00001100); // display on, cursor off, no blink
00046a   0e0c     movlw   0x0c             	MOVLW	0x0c
00046c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00046e   ec19     call    0x001432, 0x0    	CALL	__lcd_write_command
000470   f00a
000472   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	262; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(0b00000110); // cursor shift right, no data shift
000474   0e06     movlw   0x06             	MOVLW	0x06
000476   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000478   ec19     call    0x001432, 0x0    	CALL	__lcd_write_command
00047a   f00a
00047c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	264; ../my_sdcc_lib/rosso_sdcc_lcd4.h	lcd_clear_screen(); // clear display
00047e   ec61     call    0x0014c2, 0x0    	CALL	_lcd_clear_screen
000480   f00a
000482   d0f6     bra     0x000670         	BRA	_00396_DS_
                                           _00394_DS_:
                                           ;	.line	265; ../my_sdcc_lib/rosso_sdcc_lcd4.h	} else if (chipset == LCD_ST7066U) {
000484   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000486   0a01     xorlw   0x01             	XORLW	0x01
000488   e001     bz      0x00048c         	BZ	_00405_DS_
00048a   d0f2     bra     0x000670         	BRA	_00396_DS_
                                           _00405_DS_:
                                           ;	.line	266; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000011);
00048c   0e03     movlw   0x03             	MOVLW	0x03
00048e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000490   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
000492   f007
000494   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	267; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
000496   0e40     movlw   0x40             	MOVLW	0x40
000498   ec6b     call    0x000cd6, 0x0    	CALL	_delay10tcy
00049a   f006
                                           ;	.line	268; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000010);
00049c   0e02     movlw   0x02             	MOVLW	0x02
00049e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004a0   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
0004a2   f007
0004a4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	269; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00001100);
0004a6   0e0c     movlw   0x0c             	MOVLW	0x0c
0004a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004aa   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
0004ac   f007
0004ae   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	270; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
0004b0   0e40     movlw   0x40             	MOVLW	0x40
0004b2   ec6b     call    0x000cd6, 0x0    	CALL	_delay10tcy
0004b4   f006
                                           ;	.line	271; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000010);
0004b6   0e02     movlw   0x02             	MOVLW	0x02
0004b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004ba   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
0004bc   f007
0004be   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	272; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00001100);
0004c0   0e0c     movlw   0x0c             	MOVLW	0x0c
0004c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004c4   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
0004c6   f007
0004c8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	273; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
0004ca   0e38     movlw   0x38             	MOVLW	0x38
0004cc   ec6b     call    0x000cd6, 0x0    	CALL	_delay10tcy
0004ce   f006
0004d0   0000     nop                      	nop	
0004d2   0000     nop                      	nop	
0004d4   0000     nop                      	nop	
0004d6   0000     nop                      	nop	
0004d8   0000     nop                      	nop	
0004da   0000     nop                      	nop	
0004dc   0000     nop                      	nop	
0004de   0000     nop                      	nop	
0004e0   0000     nop                      	nop	
0004e2   0000     nop                      	nop	
0004e4   0000     nop                      	nop	
0004e6   0000     nop                      	nop	
0004e8   0000     nop                      	nop	
0004ea   0000     nop                      	nop	
0004ec   0000     nop                      	nop	
0004ee   0000     nop                      	nop	
0004f0   0000     nop                      	nop	
0004f2   0000     nop                      	nop	
0004f4   0000     nop                      	nop	
0004f6   0000     nop                      	nop	
0004f8   0000     nop                      	nop	
0004fa   0000     nop                      	nop	
0004fc   0000     nop                      	nop	
0004fe   0000     nop                      	nop	
000500   0000     nop                      	nop	
000502   0000     nop                      	nop	
000504   0000     nop                      	nop	
000506   0000     nop                      	nop	
000508   0000     nop                      	nop	
00050a   0000     nop                      	nop	
00050c   0000     nop                      	nop	
00050e   0000     nop                      	nop	
000510   0000     nop                      	nop	
000512   0000     nop                      	nop	
000514   0000     nop                      	nop	
000516   0000     nop                      	nop	
000518   0000     nop                      	nop	
00051a   0000     nop                      	nop	
00051c   0000     nop                      	nop	
00051e   0000     nop                      	nop	
000520   0000     nop                      	nop	
000522   0000     nop                      	nop	
000524   0000     nop                      	nop	
000526   0000     nop                      	nop	
000528   0000     nop                      	nop	
00052a   0000     nop                      	nop	
00052c   0000     nop                      	nop	
00052e   0000     nop                      	nop	
                                           ;	.line	275; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // display on / off
000530   0e00     movlw   0x00             	MOVLW	0x00
000532   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000534   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
000536   f007
000538   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	276; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00001100);
00053a   0e0c     movlw   0x0c             	MOVLW	0x0c
00053c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00053e   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
000540   f007
000542   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	277; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
000544   0e38     movlw   0x38             	MOVLW	0x38
000546   ec6b     call    0x000cd6, 0x0    	CALL	_delay10tcy
000548   f006
00054a   0000     nop                      	nop	
00054c   0000     nop                      	nop	
00054e   0000     nop                      	nop	
000550   0000     nop                      	nop	
000552   0000     nop                      	nop	
000554   0000     nop                      	nop	
000556   0000     nop                      	nop	
000558   0000     nop                      	nop	
00055a   0000     nop                      	nop	
00055c   0000     nop                      	nop	
00055e   0000     nop                      	nop	
000560   0000     nop                      	nop	
000562   0000     nop                      	nop	
000564   0000     nop                      	nop	
000566   0000     nop                      	nop	
000568   0000     nop                      	nop	
00056a   0000     nop                      	nop	
00056c   0000     nop                      	nop	
00056e   0000     nop                      	nop	
000570   0000     nop                      	nop	
000572   0000     nop                      	nop	
000574   0000     nop                      	nop	
000576   0000     nop                      	nop	
000578   0000     nop                      	nop	
00057a   0000     nop                      	nop	
00057c   0000     nop                      	nop	
00057e   0000     nop                      	nop	
000580   0000     nop                      	nop	
000582   0000     nop                      	nop	
000584   0000     nop                      	nop	
000586   0000     nop                      	nop	
000588   0000     nop                      	nop	
00058a   0000     nop                      	nop	
00058c   0000     nop                      	nop	
00058e   0000     nop                      	nop	
000590   0000     nop                      	nop	
000592   0000     nop                      	nop	
000594   0000     nop                      	nop	
000596   0000     nop                      	nop	
000598   0000     nop                      	nop	
00059a   0000     nop                      	nop	
00059c   0000     nop                      	nop	
00059e   0000     nop                      	nop	
0005a0   0000     nop                      	nop	
0005a2   0000     nop                      	nop	
0005a4   0000     nop                      	nop	
0005a6   0000     nop                      	nop	
0005a8   0000     nop                      	nop	
                                           ;	.line	279; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // display clear
0005aa   0e00     movlw   0x00             	MOVLW	0x00
0005ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005ae   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
0005b0   f007
0005b2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	280; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000001);
0005b4   0e01     movlw   0x01             	MOVLW	0x01
0005b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005b8   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
0005ba   f007
0005bc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	281; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
0005be   0ea0     movlw   0xa0             	MOVLW	0xa0
0005c0   ec58     call    0x000cb0, 0x0    	CALL	_delay100tcy
0005c2   f006
                                           ;	.line	282; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
0005c4   0e50     movlw   0x50             	MOVLW	0x50
0005c6   ec58     call    0x000cb0, 0x0    	CALL	_delay100tcy
0005c8   f006
                                           ;	.line	283; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
0005ca   0e40     movlw   0x40             	MOVLW	0x40
0005cc   ec6b     call    0x000cd6, 0x0    	CALL	_delay10tcy
0005ce   f006
                                           ;	.line	284; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // entry mode set
0005d0   0e00     movlw   0x00             	MOVLW	0x00
0005d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005d4   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
0005d6   f007
0005d8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	285; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000110);
0005da   0e06     movlw   0x06             	MOVLW	0x06
0005dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005de   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
0005e0   f007
0005e2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	286; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
0005e4   0e38     movlw   0x38             	MOVLW	0x38
0005e6   ec6b     call    0x000cd6, 0x0    	CALL	_delay10tcy
0005e8   f006
0005ea   0000     nop                      	nop	
0005ec   0000     nop                      	nop	
0005ee   0000     nop                      	nop	
0005f0   0000     nop                      	nop	
0005f2   0000     nop                      	nop	
0005f4   0000     nop                      	nop	
0005f6   0000     nop                      	nop	
0005f8   0000     nop                      	nop	
0005fa   0000     nop                      	nop	
0005fc   0000     nop                      	nop	
0005fe   0000     nop                      	nop	
000600   0000     nop                      	nop	
000602   0000     nop                      	nop	
000604   0000     nop                      	nop	
000606   0000     nop                      	nop	
000608   0000     nop                      	nop	
00060a   0000     nop                      	nop	
00060c   0000     nop                      	nop	
00060e   0000     nop                      	nop	
000610   0000     nop                      	nop	
000612   0000     nop                      	nop	
000614   0000     nop                      	nop	
000616   0000     nop                      	nop	
000618   0000     nop                      	nop	
00061a   0000     nop                      	nop	
00061c   0000     nop                      	nop	
00061e   0000     nop                      	nop	
000620   0000     nop                      	nop	
000622   0000     nop                      	nop	
000624   0000     nop                      	nop	
000626   0000     nop                      	nop	
000628   0000     nop                      	nop	
00062a   0000     nop                      	nop	
00062c   0000     nop                      	nop	
00062e   0000     nop                      	nop	
000630   0000     nop                      	nop	
000632   0000     nop                      	nop	
000634   0000     nop                      	nop	
000636   0000     nop                      	nop	
000638   0000     nop                      	nop	
00063a   0000     nop                      	nop	
00063c   0000     nop                      	nop	
00063e   0000     nop                      	nop	
000640   0000     nop                      	nop	
000642   0000     nop                      	nop	
000644   0000     nop                      	nop	
000646   0000     nop                      	nop	
000648   0000     nop                      	nop	
                                           ;	.line	288; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000000); // display clear
00064a   0e00     movlw   0x00             	MOVLW	0x00
00064c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00064e   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
000650   f007
000652   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	289; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(0b00000001);
000654   0e01     movlw   0x01             	MOVLW	0x01
000656   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000658   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
00065a   f007
00065c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	290; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
00065e   0ea0     movlw   0xa0             	MOVLW	0xa0
000660   ec58     call    0x000cb0, 0x0    	CALL	_delay100tcy
000662   f006
                                           ;	.line	291; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
000664   0e50     movlw   0x50             	MOVLW	0x50
000666   ec58     call    0x000cb0, 0x0    	CALL	_delay100tcy
000668   f006
                                           ;	.line	292; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_40us();
00066a   0e40     movlw   0x40             	MOVLW	0x40
00066c   ec6b     call    0x000cd6, 0x0    	CALL	_delay10tcy
00066e   f006
                                           _00396_DS_:
000670   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000672   f000
000674   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000676   ffd9
000678   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_progress	code
                                           _lcd_progress:
                                           ;	.line	212; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_progress(uint8_t line, uint8_t amount, uint8_t pattern) {
000cee   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000cf0   ffe5
000cf2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000cf4   ffd9
000cf6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000cf8   ffe5
000cfa   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000cfc   ffe5
000cfe   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000d00   ffe5
000d02   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
000d04   ffe5
000d06   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
000d08   ffe5
000d0a   0e02     movlw   0x02             	MOVLW	0x02
000d0c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000d0e   f000
000d10   0e03     movlw   0x03             	MOVLW	0x03
000d12   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
000d14   f001
000d16   0e04     movlw   0x04             	MOVLW	0x04
000d18   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
000d1a   f002
                                           ;	.line	214; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_POS = _lcd_line2index(line);
000d1c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000d1e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d20   ec37     call    0x00126e, 0x0    	CALL	__lcd_line2index
000d22   f009
000d24   010f     movlb   0xf              	BANKSEL	_LCD_POS
000d26   6f34     movwf   0x34, 0x1        	MOVWF	_LCD_POS, B
000d28   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	215; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
000d2a   ec86     call    0x00150c, 0x0    	CALL	__lcd_restore_cursor
000d2c   f00a
                                           ;	.line	216; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < amount; i++) lcd_write_char(pattern);
000d2e   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00364_DS_:
000d30   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000d32   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
000d34   e207     bc      0x000d44         	BC	_00361_DS_
000d36   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000d38   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d3a   ec82     call    0x000304, 0x0    	CALL	_lcd_write_char
000d3c   f001
000d3e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000d40   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
000d42   d7f6     bra     0x000d30         	BRA	_00364_DS_
                                           _00361_DS_:
                                           ;	.line	217; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < LCD_NR_CHARS - amount; i++) lcd_write_char(' ');
000d44   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00367_DS_:
000d46   c001     movff   0x001, 0x002     	MOVFF	r0x01, r0x02
000d48   f002
000d4a   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000d4c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000d4e   0810     sublw   0x10             	SUBLW	0x10
000d50   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000d52   0e00     movlw   0x00             	MOVLW	0x00
000d54   5603     subfwb  0x03, 0x1, 0x0   	SUBFWB	r0x03, F
000d56   c000     movff   0x000, 0x004     	MOVFF	r0x00, r0x04
000d58   f004
000d5a   0f80     addlw   0x80             	ADDLW	0x80
000d5c   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
000d5e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000d60   0f80     addlw   0x80             	ADDLW	0x80
000d62   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
000d64   e102     bnz     0x000d6a         	BNZ	_00386_DS_
000d66   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000d68   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
                                           _00386_DS_:
000d6a   e207     bc      0x000d7a         	BC	_00369_DS_
000d6c   0e20     movlw   0x20             	MOVLW	0x20
000d6e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d70   ec82     call    0x000304, 0x0    	CALL	_lcd_write_char
000d72   f001
000d74   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000d76   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
000d78   d7e6     bra     0x000d46         	BRA	_00367_DS_
                                           _00369_DS_:
000d7a   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
000d7c   f004
000d7e   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
000d80   f003
000d82   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
000d84   f002
000d86   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000d88   f001
000d8a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000d8c   f000
000d8e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000d90   ffd9
000d92   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_clear_line	code
                                           _lcd_clear_line:
                                           ;	.line	201; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_clear_line(uint8_t line) {
0012b6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0012b8   ffe5
0012ba   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0012bc   ffd9
0012be   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0012c0   ffe5
0012c2   0e02     movlw   0x02             	MOVLW	0x02
0012c4   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0012c6   f000
                                           ;	.line	204; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_POS = _lcd_line2index(line);
0012c8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0012ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012cc   ec37     call    0x00126e, 0x0    	CALL	__lcd_line2index
0012ce   f009
0012d0   010f     movlb   0xf              	BANKSEL	_LCD_POS
0012d2   6f34     movwf   0x34, 0x1        	MOVWF	_LCD_POS, B
0012d4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	205; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
0012d6   ec86     call    0x00150c, 0x0    	CALL	__lcd_restore_cursor
0012d8   f00a
                                           ;	.line	207; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < LCD_NR_CHARS; i++) lcd_write_char(' ');
0012da   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00345_DS_:
0012dc   0e20     movlw   0x20             	MOVLW	0x20
0012de   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012e0   ec82     call    0x000304, 0x0    	CALL	_lcd_write_char
0012e2   f001
0012e4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0012e6   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
0012e8   0e10     movlw   0x10             	MOVLW	0x10
0012ea   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
0012ec   e3f7     bnc     0x0012dc         	BNC	_00345_DS_
                                           ;	.line	209; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
0012ee   ec86     call    0x00150c, 0x0    	CALL	__lcd_restore_cursor
0012f0   f00a
0012f2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0012f4   f000
0012f6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0012f8   ffd9
0012fa   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_home	code
                                           _lcd_home:
                                           ;	.line	195; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(LCD_RETURN_HOME);
0014a4   0e02     movlw   0x02             	MOVLW	0x02
0014a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014a8   ec19     call    0x001432, 0x0    	CALL	__lcd_write_command
0014aa   f00a
0014ac   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	196; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
0014ae   0ea0     movlw   0xa0             	MOVLW	0xa0
0014b0   ec58     call    0x000cb0, 0x0    	CALL	_delay100tcy
0014b2   f006
                                           ;	.line	197; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
0014b4   0e50     movlw   0x50             	MOVLW	0x50
0014b6   ec58     call    0x000cb0, 0x0    	CALL	_delay100tcy
0014b8   f006
                                           ;	.line	198; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_300us();
0014ba   0e30     movlw   0x30             	MOVLW	0x30
0014bc   ec58     call    0x000cb0, 0x0    	CALL	_delay100tcy
0014be   f006
0014c0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_blink_display	code
                                           _lcd_cursor_blink_display:
                                           ;	.line	185; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_blink_display(bit_t cursor, bit_t blink, bit_t display) {
0011b0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0011b2   ffe5
0011b4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0011b6   ffd9
0011b8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0011ba   ffe5
0011bc   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0011be   ffe5
0011c0   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0011c2   ffe5
0011c4   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0011c6   ffe5
0011c8   0e02     movlw   0x02             	MOVLW	0x02
0011ca   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0011cc   f000
0011ce   0e03     movlw   0x03             	MOVLW	0x03
0011d0   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0011d2   f001
0011d4   0e04     movlw   0x04             	MOVLW	0x04
0011d6   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0011d8   f002
                                           ;	.line	187; ../my_sdcc_lib/rosso_sdcc_lcd4.h	reg = LCD_DISPLAY_ONOFF;
0011da   0e08     movlw   0x08             	MOVLW	0x08
0011dc   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
                                           ;	.line	188; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (display) reg = reg + 4;
0011de   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0011e0   e002     bz      0x0011e6         	BZ	_00329_DS_
0011e2   0e0c     movlw   0x0c             	MOVLW	0x0c
0011e4   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
                                           _00329_DS_:
                                           ;	.line	189; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (cursor) reg = reg + 2;
0011e6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0011e8   e002     bz      0x0011ee         	BZ	_00331_DS_
0011ea   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
0011ec   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
                                           _00331_DS_:
                                           ;	.line	190; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (blink) reg = reg + 1;
0011ee   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0011f0   e001     bz      0x0011f4         	BZ	_00333_DS_
0011f2   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
                                           _00333_DS_:
                                           ;	.line	191; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(reg);
0011f4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0011f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011f8   ec19     call    0x001432, 0x0    	CALL	__lcd_write_command
0011fa   f00a
0011fc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0011fe   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001200   f003
001202   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001204   f002
001206   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001208   f001
00120a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00120c   f000
00120e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001210   ffd9
001212   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_clear_screen	code
                                           _lcd_clear_screen:
                                           ;	.line	179; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(LCD_CLEAR_DISPLAY);
0014c2   0e01     movlw   0x01             	MOVLW	0x01
0014c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014c6   ec19     call    0x001432, 0x0    	CALL	__lcd_write_command
0014c8   f00a
0014ca   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	180; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_1ms();
0014cc   0ea0     movlw   0xa0             	MOVLW	0xa0
0014ce   ec58     call    0x000cb0, 0x0    	CALL	_delay100tcy
0014d0   f006
                                           ;	.line	181; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_500us();
0014d2   0e50     movlw   0x50             	MOVLW	0x50
0014d4   ec58     call    0x000cb0, 0x0    	CALL	_delay100tcy
0014d6   f006
                                           ;	.line	182; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_300us();
0014d8   0e30     movlw   0x30             	MOVLW	0x30
0014da   ec58     call    0x000cb0, 0x0    	CALL	_delay100tcy
0014dc   f006
0014de   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_shift_right	code
                                           _lcd_cursor_shift_right:
                                           ;	.line	171; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_shift_right(uint8_t nr) {
0012fc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0012fe   ffe5
001300   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001302   ffd9
001304   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001306   ffe5
001308   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00130a   ffe5
00130c   0e02     movlw   0x02             	MOVLW	0x02
00130e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001310   f000
                                           ;	.line	173; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
001312   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001314   e00b     bz      0x00132c         	BZ	_00306_DS_
                                           ;	.line	174; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_CURSOR_SHIFT_R_VAL);
001316   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00304_DS_:
001318   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00131a   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
00131c   e207     bc      0x00132c         	BC	_00306_DS_
00131e   0e14     movlw   0x14             	MOVLW	0x14
001320   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001322   ec19     call    0x001432, 0x0    	CALL	__lcd_write_command
001324   f00a
001326   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001328   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
00132a   d7f6     bra     0x001318         	BRA	_00304_DS_
                                           _00306_DS_:
00132c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00132e   f001
001330   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001332   f000
001334   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001336   ffd9
001338   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_shift_left	code
                                           _lcd_cursor_shift_left:
                                           ;	.line	164; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_shift_left(uint8_t nr) {
00133a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00133c   ffe5
00133e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001340   ffd9
001342   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001344   ffe5
001346   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001348   ffe5
00134a   0e02     movlw   0x02             	MOVLW	0x02
00134c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00134e   f000
                                           ;	.line	166; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
001350   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001352   e00b     bz      0x00136a         	BZ	_00283_DS_
                                           ;	.line	167; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_CURSOR_SHIFT_L_VAL);
001354   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00281_DS_:
001356   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001358   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
00135a   e207     bc      0x00136a         	BC	_00283_DS_
00135c   0e10     movlw   0x10             	MOVLW	0x10
00135e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001360   ec19     call    0x001432, 0x0    	CALL	__lcd_write_command
001362   f00a
001364   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001366   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001368   d7f6     bra     0x001356         	BRA	_00281_DS_
                                           _00283_DS_:
00136a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00136c   f001
00136e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001370   f000
001372   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001374   ffd9
001376   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_shift_right	code
                                           _lcd_shift_right:
                                           ;	.line	157; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_shift_right(uint8_t nr) {
001378   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00137a   ffe5
00137c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00137e   ffd9
001380   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001382   ffe5
001384   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001386   ffe5
001388   0e02     movlw   0x02             	MOVLW	0x02
00138a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00138c   f000
                                           ;	.line	159; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
00138e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001390   e00b     bz      0x0013a8         	BZ	_00260_DS_
                                           ;	.line	160; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_DISPLAY_SHIFT_RIGHT);
001392   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00258_DS_:
001394   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001396   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001398   e207     bc      0x0013a8         	BC	_00260_DS_
00139a   0e1c     movlw   0x1c             	MOVLW	0x1c
00139c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00139e   ec19     call    0x001432, 0x0    	CALL	__lcd_write_command
0013a0   f00a
0013a2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0013a4   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0013a6   d7f6     bra     0x001394         	BRA	_00258_DS_
                                           _00260_DS_:
0013a8   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0013aa   f001
0013ac   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0013ae   f000
0013b0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0013b2   ffd9
0013b4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_shift_left	code
                                           _lcd_shift_left:
                                           ;	.line	150; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_shift_left(uint8_t nr) {
0013b6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0013b8   ffe5
0013ba   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0013bc   ffd9
0013be   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0013c0   ffe5
0013c2   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0013c4   ffe5
0013c6   0e02     movlw   0x02             	MOVLW	0x02
0013c8   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0013ca   f000
                                           ;	.line	152; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (nr > 0) {
0013cc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0013ce   e00b     bz      0x0013e6         	BZ	_00237_DS_
                                           ;	.line	153; ../my_sdcc_lib/rosso_sdcc_lcd4.h	for (i = 0; i < nr; i++) _lcd_write_command(LCD_DISPLAY_SHIFT_LEFT);
0013d0   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00235_DS_:
0013d2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0013d4   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
0013d6   e207     bc      0x0013e6         	BC	_00237_DS_
0013d8   0e18     movlw   0x18             	MOVLW	0x18
0013da   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013dc   ec19     call    0x001432, 0x0    	CALL	__lcd_write_command
0013de   f00a
0013e0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0013e2   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0013e4   d7f6     bra     0x0013d2         	BRA	_00235_DS_
                                           _00237_DS_:
0013e6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0013e8   f001
0013ea   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0013ec   f000
0013ee   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0013f0   ffd9
0013f2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_cursor_position	code
                                           _lcd_cursor_position:
                                           ;	.line	145; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_cursor_position(uint8_t line, uint8_t pos) {
0013f4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0013f6   ffe5
0013f8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0013fa   ffd9
0013fc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0013fe   ffe5
001400   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001402   ffe5
001404   0e02     movlw   0x02             	MOVLW	0x02
001406   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001408   f000
00140a   0e03     movlw   0x03             	MOVLW	0x03
00140c   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00140e   f001
                                           ;	.line	146; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_POS = pos + _lcd_line2index(line);
001410   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001412   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001414   ec37     call    0x00126e, 0x0    	CALL	__lcd_line2index
001416   f009
001418   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00141a   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
00141c   010f     movlb   0xf              	BANKSEL	_LCD_POS
00141e   6f34     movwf   0x34, 0x1        	MOVWF	_LCD_POS, B
                                           ;	.line	147; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_restore_cursor();
001420   ec86     call    0x00150c, 0x0    	CALL	__lcd_restore_cursor
001422   f00a
001424   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001426   f001
001428   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00142a   f000
00142c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00142e   ffd9
001430   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_write_strF	code
                                           _lcd_write_strF:
                                           ;	.line	138; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_write_strF(const uint8_t *data){
0010e0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0010e2   ffe5
0010e4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0010e6   ffd9
0010e8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0010ea   ffe5
0010ec   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0010ee   ffe5
0010f0   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0010f2   ffe5
0010f4   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0010f6   ffe5
0010f8   0e02     movlw   0x02             	MOVLW	0x02
0010fa   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0010fc   f000
0010fe   0e03     movlw   0x03             	MOVLW	0x03
001100   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001102   f001
001104   0e04     movlw   0x04             	MOVLW	0x04
001106   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
001108   f002
                                           _00209_DS_:
                                           ;	.line	139; ../my_sdcc_lib/rosso_sdcc_lcd4.h	while(*data){
00110a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00110c   ffe9
00110e   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
001110   fff3
001112   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001114   ec41     call    0x001482, 0x0    	CALL	__gptrget1
001116   f00a
001118   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00111a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00111c   e00a     bz      0x001132         	BZ	_00212_DS_
                                           ;	.line	140; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_data(*data);
00111e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001120   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001122   ec2d     call    0x00145a, 0x0    	CALL	__lcd_write_data
001124   f00a
001126   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	141; ../my_sdcc_lib/rosso_sdcc_lcd4.h	*data++;
001128   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
00112a   e3ef     bnc     0x00110a         	BNC	_00209_DS_
00112c   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
00112e   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
                                           _00221_DS_:
001130   d7ec     bra     0x00110a         	BRA	_00209_DS_
                                           _00212_DS_:
001132   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001134   f003
001136   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001138   f002
00113a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00113c   f001
00113e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001140   f000
001142   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001144   ffd9
001146   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_write_str	code
                                           _lcd_write_str:
                                           ;	.line	131; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_write_str(uint8_t *data){
001148   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00114a   ffe5
00114c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00114e   ffd9
001150   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001152   ffe5
001154   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001156   ffe5
001158   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00115a   ffe5
00115c   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00115e   ffe5
001160   0e02     movlw   0x02             	MOVLW	0x02
001162   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001164   f000
001166   0e03     movlw   0x03             	MOVLW	0x03
001168   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00116a   f001
00116c   0e04     movlw   0x04             	MOVLW	0x04
00116e   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
001170   f002
                                           _00192_DS_:
                                           ;	.line	132; ../my_sdcc_lib/rosso_sdcc_lcd4.h	while(*data){
001172   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001174   ffe9
001176   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
001178   fff3
00117a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00117c   ec41     call    0x001482, 0x0    	CALL	__gptrget1
00117e   f00a
001180   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001182   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001184   e00a     bz      0x00119a         	BZ	_00195_DS_
                                           ;	.line	133; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_data(*data);
001186   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001188   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00118a   ec2d     call    0x00145a, 0x0    	CALL	__lcd_write_data
00118c   f00a
00118e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	134; ../my_sdcc_lib/rosso_sdcc_lcd4.h	*data++;
001190   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
001192   e3ef     bnc     0x001172         	BNC	_00192_DS_
001194   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
001196   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
                                           _00204_DS_:
001198   d7ec     bra     0x001172         	BRA	_00192_DS_
                                           _00195_DS_:
00119a   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00119c   f003
00119e   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0011a0   f002
0011a2   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0011a4   f001
0011a6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0011a8   f000
0011aa   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0011ac   ffd9
0011ae   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__lcd_write_char	code
                                           _lcd_write_char:
                                           ;	.line	127; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void lcd_write_char(uint8_t data) {
000304   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000306   ffe5
000308   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00030a   ffd9
00030c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00030e   ffe5
000310   0e02     movlw   0x02             	MOVLW	0x02
000312   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000314   f000
                                           ;	.line	128; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_data(data);
000316   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000318   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00031a   ec2d     call    0x00145a, 0x0    	CALL	__lcd_write_data
00031c   f00a
00031e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000320   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000322   f000
000324   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000326   ffd9
000328   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_restore_cursor	code
                                           __lcd_restore_cursor:
                                           ;	.line	124; ../my_sdcc_lib/rosso_sdcc_lcd4.h	_lcd_write_command(LCD_SET_DDRAM_ADDRESS | LCD_POS);
00150c   0e80     movlw   0x80             	MOVLW	0x80
00150e   010f     movlb   0xf              	BANKSEL	_LCD_POS
001510   1134     iorwf   0x34, 0x0, 0x1   	IORWF	_LCD_POS, W, B
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
001512   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001514   ec19     call    0x001432, 0x0    	CALL	__lcd_write_command
001516   f00a
001518   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00151a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_line2index	code
                                           __lcd_line2index:
                                           ;	.line	112; ../my_sdcc_lib/rosso_sdcc_lcd4.h	uint8_t _lcd_line2index(uint8_t line) {
00126e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001270   ffe5
001272   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001274   ffd9
001276   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001278   ffe5
00127a   0e02     movlw   0x02             	MOVLW	0x02
00127c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00127e   f000
                                           ;	.line	114; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (line < LCD_NR_LINES) {
001280   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
001282   e213     bc      0x0012aa         	BC	_00153_DS_
                                           ;	.line	115; ../my_sdcc_lib/rosso_sdcc_lcd4.h	if (line == 0) return 0x00;
001284   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001286   e102     bnz     0x00128c         	BNZ	_00150_DS_
001288   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
00128a   d010     bra     0x0012ac         	BRA	_00154_DS_
                                           _00150_DS_:
                                           ;	.line	116; ../my_sdcc_lib/rosso_sdcc_lcd4.h	else if (line == 1) return 0x40;
00128c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00128e   0a01     xorlw   0x01             	XORLW	0x01
001290   e102     bnz     0x001296         	BNZ	_00147_DS_
001292   0e40     movlw   0x40             	MOVLW	0x40
001294   d00b     bra     0x0012ac         	BRA	_00154_DS_
                                           _00147_DS_:
                                           ;	.line	117; ../my_sdcc_lib/rosso_sdcc_lcd4.h	else if (line == 2) return 0x00 + LCD_NR_CHARS;
001296   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001298   0a02     xorlw   0x02             	XORLW	0x02
00129a   e102     bnz     0x0012a0         	BNZ	_00144_DS_
00129c   0e10     movlw   0x10             	MOVLW	0x10
00129e   d006     bra     0x0012ac         	BRA	_00154_DS_
                                           _00144_DS_:
                                           ;	.line	118; ../my_sdcc_lib/rosso_sdcc_lcd4.h	else if (line == 3) return 0x40 + LCD_NR_CHARS;
0012a0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0012a2   0a03     xorlw   0x03             	XORLW	0x03
0012a4   e102     bnz     0x0012aa         	BNZ	_00153_DS_
0012a6   0e50     movlw   0x50             	MOVLW	0x50
0012a8   d001     bra     0x0012ac         	BRA	_00154_DS_
                                           _00153_DS_:
                                           ;	.line	120; ../my_sdcc_lib/rosso_sdcc_lcd4.h	return 0x00;
0012aa   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
                                           _00154_DS_:
0012ac   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0012ae   f000
0012b0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0012b2   ffd9
0012b4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_write_command	code
                                           __lcd_write_command:
                                           ;	.line	107; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void _lcd_write_command(uint8_t value) {
001432   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001434   ffe5
001436   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001438   ffd9
00143a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00143c   ffe5
00143e   0e02     movlw   0x02             	MOVLW	0x02
001440   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001442   f000
                                           ;	.line	108; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS = 0; // select command mode
001444   928d     bcf     0x8d, 0x1, 0x0   	BCF	_LATEbits, 1
                                           ;	.line	109; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write(value); // write byte
001446   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001448   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00144a   ecca     call    0x000d94, 0x0    	CALL	___lcd_write
00144c   f006
00144e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001450   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001452   f000
001454   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001456   ffd9
001458   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___lcd_write_data	code
                                           __lcd_write_data:
                                           ;	.line	102; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void _lcd_write_data(uint8_t value) {
00145a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00145c   ffe5
00145e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001460   ffd9
001462   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001464   ffe5
001466   0e02     movlw   0x02             	MOVLW	0x02
001468   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00146a   f000
                                           ;	.line	103; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_RS = 1; // select data mode
00146c   828d     bsf     0x8d, 0x1, 0x0   	BSF	_LATEbits, 1
                                           ;	.line	104; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write(value); // write byte
00146e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001470   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001472   ecca     call    0x000d94, 0x0    	CALL	___lcd_write
001474   f006
001476   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001478   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00147a   f000
00147c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00147e   ffd9
001480   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main____lcd_write	code
                                           ___lcd_write:
                                           ;	.line	95; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void __lcd_write(uint8_t value) {
000d94   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000d96   ffe5
000d98   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000d9a   ffd9
000d9c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000d9e   ffe5
000da0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000da2   ffe5
000da4   0e02     movlw   0x02             	MOVLW	0x02
000da6   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000da8   f000
                                           ;	.line	96; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(value >> 4); // write high nibble
000daa   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
000dac   0b0f     andlw   0x0f             	ANDLW	0x0f
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x01, W
000dae   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000db0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000db2   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
000db4   f007
000db6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	97; ../my_sdcc_lib/rosso_sdcc_lcd4.h	__lcd_write_nibble(value); // write low nibble
000db8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000dba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000dbc   ec6a     call    0x000ed4, 0x0    	CALL	___lcd_write_nibble
000dbe   f007
000dc0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	98; ../my_sdcc_lib/rosso_sdcc_lcd4.h	delay_35us(); // > 37 us
000dc2   0e38     movlw   0x38             	MOVLW	0x38
000dc4   ec6b     call    0x000cd6, 0x0    	CALL	_delay10tcy
000dc6   f006
000dc8   0000     nop                      	nop	
000dca   0000     nop                      	nop	
000dcc   0000     nop                      	nop	
000dce   0000     nop                      	nop	
000dd0   0000     nop                      	nop	
000dd2   0000     nop                      	nop	
000dd4   0000     nop                      	nop	
000dd6   0000     nop                      	nop	
000dd8   0000     nop                      	nop	
000dda   0000     nop                      	nop	
000ddc   0000     nop                      	nop	
000dde   0000     nop                      	nop	
000de0   0000     nop                      	nop	
000de2   0000     nop                      	nop	
000de4   0000     nop                      	nop	
000de6   0000     nop                      	nop	
000de8   0000     nop                      	nop	
000dea   0000     nop                      	nop	
000dec   0000     nop                      	nop	
000dee   0000     nop                      	nop	
000df0   0000     nop                      	nop	
000df2   0000     nop                      	nop	
000df4   0000     nop                      	nop	
000df6   0000     nop                      	nop	
000df8   0000     nop                      	nop	
000dfa   0000     nop                      	nop	
000dfc   0000     nop                      	nop	
000dfe   0000     nop                      	nop	
000e00   0000     nop                      	nop	
000e02   0000     nop                      	nop	
000e04   0000     nop                      	nop	
000e06   0000     nop                      	nop	
000e08   0000     nop                      	nop	
000e0a   0000     nop                      	nop	
000e0c   0000     nop                      	nop	
000e0e   0000     nop                      	nop	
000e10   0000     nop                      	nop	
000e12   0000     nop                      	nop	
000e14   0000     nop                      	nop	
000e16   0000     nop                      	nop	
000e18   0000     nop                      	nop	
000e1a   0000     nop                      	nop	
000e1c   0000     nop                      	nop	
000e1e   0000     nop                      	nop	
000e20   0000     nop                      	nop	
000e22   0000     nop                      	nop	
000e24   0000     nop                      	nop	
000e26   0000     nop                      	nop	
000e28   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000e2a   f001
000e2c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000e2e   f000
000e30   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000e32   ffd9
000e34   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main____lcd_write_nibble	code
                                           ___lcd_write_nibble:
                                           ;	.line	83; ../my_sdcc_lib/rosso_sdcc_lcd4.h	void __lcd_write_nibble(uint8_t value) {
000ed4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000ed6   ffe5
000ed8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000eda   ffd9
000edc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000ede   ffe5
000ee0   0e02     movlw   0x02             	MOVLW	0x02
000ee2   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000ee4   f000
                                           ;	.line	85; ../my_sdcc_lib/rosso_sdcc_lcd4.h	nibble.val = value;
000ee6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000ee8   010f     movlb   0xf              	BANKSEL	___lcd_write_nibble_nibble_1_14
000eea   6f33     movwf   0x33, 0x1        	MOVWF	___lcd_write_nibble_nibble_1_14, B
                                           ;	.line	86; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D4 = nibble.bits.b0;
000eec   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
000eee   b133     btfsc   0x33, 0x0, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_14, 0, B
000ef0   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
000ef2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000ef4   0b01     andlw   0x01             	ANDLW	0x01
000ef6   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000ef8   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000efa   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
000efc   0bef     andlw   0xef             	ANDLW	0xef
000efe   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000f00   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	87; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D5 = nibble.bits.b1;
000f02   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
000f04   b333     btfsc   0x33, 0x1, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_14, 1, B
000f06   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
000f08   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000f0a   0b01     andlw   0x01             	ANDLW	0x01
000f0c   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000f0e   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000f10   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000f12   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
000f14   0bdf     andlw   0xdf             	ANDLW	0xdf
000f16   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000f18   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	88; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D6 = nibble.bits.b2;
000f1a   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
000f1c   b533     btfsc   0x33, 0x2, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_14, 2, B
000f1e   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
000f20   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000f22   0b01     andlw   0x01             	ANDLW	0x01
000f24   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000f26   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000f28   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000f2a   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
000f2c   0bbf     andlw   0xbf             	ANDLW	0xbf
000f2e   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000f30   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	89; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_D7 = nibble.bits.b3;
000f32   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ; removed redundant BANKSEL
000f34   b733     btfsc   0x33, 0x3, 0x1   	BTFSC	___lcd_write_nibble_nibble_1_14, 3, B
000f36   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
000f38   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000f3a   0b01     andlw   0x01             	ANDLW	0x01
000f3c   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000f3e   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000f40   508a     movf    0x8a, 0x0, 0x0   	MOVF	_LATBbits, W
000f42   0b7f     andlw   0x7f             	ANDLW	0x7f
000f44   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000f46   6e8a     movwf   0x8a, 0x0        	MOVWF	_LATBbits
                                           ;	.line	90; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_EN = 1;
000f48   848d     bsf     0x8d, 0x2, 0x0   	BSF	_LATEbits, 2
000f4a   0000     nop                      	nop	
000f4c   0000     nop                      	nop	
000f4e   0000     nop                      	nop	
000f50   0000     nop                      	nop	
000f52   0000     nop                      	nop	
000f54   0000     nop                      	nop	
000f56   0000     nop                      	nop	
000f58   0000     nop                      	nop	
                                           ;	.line	92; ../my_sdcc_lib/rosso_sdcc_lcd4.h	LCD_EN = 0;
000f5a   948d     bcf     0x8d, 0x2, 0x0   	BCF	_LATEbits, 2
000f5c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000f5e   f000
000f60   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000f62   ffd9
000f64   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___delay_ms	code
                                           __delay_ms:
                                           ;	.line	175; ../my_sdcc_lib/rosso_sdcc.h	void _delay_ms(uint16_t x){
001214   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001216   ffe5
001218   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00121a   ffd9
00121c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00121e   ffe5
001220   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001222   ffe5
001224   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001226   ffe5
001228   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00122a   ffe5
00122c   0e02     movlw   0x02             	MOVLW	0x02
00122e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001230   f000
001232   0e03     movlw   0x03             	MOVLW	0x03
001234   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001236   f001
                                           _00113_DS_:
                                           ;	.line	177; ../my_sdcc_lib/rosso_sdcc.h	delay_1ms();
001238   0ea0     movlw   0xa0             	MOVLW	0xa0
00123a   ec58     call    0x000cb0, 0x0    	CALL	_delay100tcy
00123c   f006
                                           ;	.line	178; ../my_sdcc_lib/rosso_sdcc.h	}while(--x);
00123e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001240   0fff     addlw   0xff             	ADDLW	0xff
001242   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001244   0eff     movlw   0xff             	MOVLW	0xff
001246   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001248   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00124a   c002     movff   0x002, 0x000     	MOVFF	r0x02, r0x00
00124c   f000
00124e   c003     movff   0x003, 0x001     	MOVFF	r0x03, r0x01
001250   f001
001252   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001254   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
001256   e1f0     bnz     0x001238         	BNZ	_00113_DS_
001258   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00125a   f003
00125c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00125e   f002
001260   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001262   f001
001264   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001266   f000
001268   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00126a   ffd9
00126c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main___delay_us	code
                                           __delay_us:
                                           ;	.line	169; ../my_sdcc_lib/rosso_sdcc.h	void _delay_us(uint16_t x){
000ff8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000ffa   ffe5
000ffc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000ffe   ffd9
001000   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001002   ffe5
001004   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001006   ffe5
001008   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00100a   ffe5
00100c   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00100e   ffe5
001010   0e02     movlw   0x02             	MOVLW	0x02
001012   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001014   f000
001016   0e03     movlw   0x03             	MOVLW	0x03
001018   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00101a   f001
                                           _00105_DS_:
00101c   0000     nop                      	nop	
00101e   0000     nop                      	nop	
001020   0000     nop                      	nop	
001022   0000     nop                      	nop	
001024   0000     nop                      	nop	
001026   0000     nop                      	nop	
001028   0000     nop                      	nop	
00102a   0000     nop                      	nop	
00102c   0000     nop                      	nop	
00102e   0000     nop                      	nop	
001030   0000     nop                      	nop	
001032   0000     nop                      	nop	
001034   0000     nop                      	nop	
001036   0000     nop                      	nop	
001038   0000     nop                      	nop	
00103a   0000     nop                      	nop	
                                           ;	.line	172; ../my_sdcc_lib/rosso_sdcc.h	}while(--x);
00103c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00103e   0fff     addlw   0xff             	ADDLW	0xff
001040   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001042   0eff     movlw   0xff             	MOVLW	0xff
001044   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001046   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001048   c002     movff   0x002, 0x000     	MOVFF	r0x02, r0x00
00104a   f000
00104c   c003     movff   0x003, 0x001     	MOVFF	r0x03, r0x01
00104e   f001
001050   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001052   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
001054   e1e3     bnz     0x00101c         	BNZ	_00105_DS_
001056   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001058   f003
00105a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00105c   f002
00105e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001060   f001
001062   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001064   f000
001066   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001068   ffd9
00106a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block for Ival
                                           	code
                                           _sf:
000c46   4520     rlncf   0x20, 0x0, 0x1   	DB	0x20, 0x45, 0x4e, 0x47, 0x00, 0x00
000c48   474e     rlncf   0x4e, 0x1, 0x1   
000c4a   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_0:
000c4c   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x00
000c4e   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_1:
000c50   0020     dw      0x0020           	DB	0x20, 0x00
                                           ; ; Starting pCode block
                                           __str_2:
000c52   4520     rlncf   0x20, 0x0, 0x1   	DB	0x20, 0x45, 0x4e, 0x47, 0x00, 0x00
000c54   474e     rlncf   0x4e, 0x1, 0x1   
000c56   0000     nop                      


                                           ; Statistics:
                                           ; code size:	 2954 (0x0b8a) bytes ( 2.25%)
                                           ;           	 1477 (0x05c5) words
                                           ; udata size:	    6 (0x0006) bytes ( 0.16%)
                                           ; access size:	    5 (0x0005) bytes


                                           	end
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------

                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1


                                           		list	r=dec, n=96, st=off, mm=off

                                           	        nolist
                                           #endif
